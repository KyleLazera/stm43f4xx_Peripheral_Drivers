
I2C_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001474  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08001608  08001608  00011608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017cc  080017cc  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080017cc  080017cc  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017cc  080017cc  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017cc  080017cc  000117cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017d0  080017d0  000117d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080017d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  20000020  080017f4  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  080017f4  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002f6b  00000000  00000000  000200d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000adf  00000000  00000000  00023041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000268  00000000  00000000  00023b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001c3  00000000  00000000  00023d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000e823  00000000  00000000  00023f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002e2d  00000000  00000000  0003276e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00051d30  00000000  00000000  0003559b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000008f4  00000000  00000000  000872cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00087bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000020 	.word	0x20000020
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080015f0 	.word	0x080015f0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000024 	.word	0x20000024
 80001d0:	080015f0 	.word	0x080015f0

080001d4 <GPIO_Config>:
 * 			0x0		or		GPIO_PUPD_None
 * 			0x1		or		GPIO_PullUp
 * 			0x2		or		GPIO_PullDown
 */
void GPIO_Config(GPIO_Config_t *GPIO_Config, GPIO_TypeDef *Port, uint8_t Pin, uint8_t Mode, uint8_t OType, uint8_t OSpeed, uint8_t PUPD)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	4611      	mov	r1, r2
 80001e0:	461a      	mov	r2, r3
 80001e2:	460b      	mov	r3, r1
 80001e4:	71fb      	strb	r3, [r7, #7]
 80001e6:	4613      	mov	r3, r2
 80001e8:	71bb      	strb	r3, [r7, #6]
	GPIO_Config->GPIO_Pin = Pin;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	79fa      	ldrb	r2, [r7, #7]
 80001ee:	701a      	strb	r2, [r3, #0]
	GPIO_Config->GPIO_Port = Port;
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	68ba      	ldr	r2, [r7, #8]
 80001f4:	609a      	str	r2, [r3, #8]
	GPIO_Config->GPIO_MODE = Mode;
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	79ba      	ldrb	r2, [r7, #6]
 80001fa:	705a      	strb	r2, [r3, #1]
	GPIO_Config->GPIO_OTYPE = OType;
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	7e3a      	ldrb	r2, [r7, #24]
 8000200:	709a      	strb	r2, [r3, #2]
	GPIO_Config->GPIO_OSPEED = OSpeed;
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	7f3a      	ldrb	r2, [r7, #28]
 8000206:	70da      	strb	r2, [r3, #3]
	GPIO_Config->GPIO_PUPD = PUPD;
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800020e:	711a      	strb	r2, [r3, #4]
}
 8000210:	bf00      	nop
 8000212:	3714      	adds	r7, #20
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr

0800021c <GPIO_PeriphClck>:
 * @param	GPIOx: Defines the specific GPIO port, where x can range from A - E, or H.
 *
 * @param	state: Specifies whether to enable or disable the peripheral.
 */
void GPIO_PeriphClck(GPIO_TypeDef *GPIOx, FunctionalState state)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	460b      	mov	r3, r1
 8000226:	70fb      	strb	r3, [r7, #3]
	if(state == ENABLE)
 8000228:	78fb      	ldrb	r3, [r7, #3]
 800022a:	2b01      	cmp	r3, #1
 800022c:	d135      	bne.n	800029a <GPIO_PeriphClck+0x7e>
	{
		if(GPIOx == GPIOA)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4a36      	ldr	r2, [pc, #216]	; (800030c <GPIO_PeriphClck+0xf0>)
 8000232:	4293      	cmp	r3, r2
 8000234:	d104      	bne.n	8000240 <GPIO_PeriphClck+0x24>
		{
			RCC_AHB1Cmd(GPIOA_Enable, ENABLE);
 8000236:	2101      	movs	r1, #1
 8000238:	2001      	movs	r0, #1
 800023a:	f000 fe2f 	bl	8000e9c <RCC_AHB1Cmd>
			RCC_AHB1Cmd(GPIOH_Enable, DISABLE);
		}

	}

}
 800023e:	e061      	b.n	8000304 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOB)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4a33      	ldr	r2, [pc, #204]	; (8000310 <GPIO_PeriphClck+0xf4>)
 8000244:	4293      	cmp	r3, r2
 8000246:	d104      	bne.n	8000252 <GPIO_PeriphClck+0x36>
			RCC_AHB1Cmd(GPIOB_Enable, ENABLE);
 8000248:	2101      	movs	r1, #1
 800024a:	2002      	movs	r0, #2
 800024c:	f000 fe26 	bl	8000e9c <RCC_AHB1Cmd>
}
 8000250:	e058      	b.n	8000304 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOC)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a2f      	ldr	r2, [pc, #188]	; (8000314 <GPIO_PeriphClck+0xf8>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d104      	bne.n	8000264 <GPIO_PeriphClck+0x48>
			RCC_AHB1Cmd(GPIOC_Enable, ENABLE);
 800025a:	2101      	movs	r1, #1
 800025c:	2004      	movs	r0, #4
 800025e:	f000 fe1d 	bl	8000e9c <RCC_AHB1Cmd>
}
 8000262:	e04f      	b.n	8000304 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOD)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	4a2c      	ldr	r2, [pc, #176]	; (8000318 <GPIO_PeriphClck+0xfc>)
 8000268:	4293      	cmp	r3, r2
 800026a:	d104      	bne.n	8000276 <GPIO_PeriphClck+0x5a>
			RCC_AHB1Cmd(GPIOD_Enable, ENABLE);
 800026c:	2101      	movs	r1, #1
 800026e:	2008      	movs	r0, #8
 8000270:	f000 fe14 	bl	8000e9c <RCC_AHB1Cmd>
}
 8000274:	e046      	b.n	8000304 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOE)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4a28      	ldr	r2, [pc, #160]	; (800031c <GPIO_PeriphClck+0x100>)
 800027a:	4293      	cmp	r3, r2
 800027c:	d104      	bne.n	8000288 <GPIO_PeriphClck+0x6c>
			RCC_AHB1Cmd(GPIOE_Enable, ENABLE);
 800027e:	2101      	movs	r1, #1
 8000280:	2010      	movs	r0, #16
 8000282:	f000 fe0b 	bl	8000e9c <RCC_AHB1Cmd>
}
 8000286:	e03d      	b.n	8000304 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOH)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4a25      	ldr	r2, [pc, #148]	; (8000320 <GPIO_PeriphClck+0x104>)
 800028c:	4293      	cmp	r3, r2
 800028e:	d139      	bne.n	8000304 <GPIO_PeriphClck+0xe8>
			RCC_AHB1Cmd(GPIOH_Enable, ENABLE);
 8000290:	2101      	movs	r1, #1
 8000292:	2080      	movs	r0, #128	; 0x80
 8000294:	f000 fe02 	bl	8000e9c <RCC_AHB1Cmd>
}
 8000298:	e034      	b.n	8000304 <GPIO_PeriphClck+0xe8>
		if(GPIOx == GPIOA)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a1b      	ldr	r2, [pc, #108]	; (800030c <GPIO_PeriphClck+0xf0>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d104      	bne.n	80002ac <GPIO_PeriphClck+0x90>
			RCC_AHB1Cmd(GPIOA_Enable, DISABLE);
 80002a2:	2100      	movs	r1, #0
 80002a4:	2001      	movs	r0, #1
 80002a6:	f000 fdf9 	bl	8000e9c <RCC_AHB1Cmd>
}
 80002aa:	e02b      	b.n	8000304 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOB)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	4a18      	ldr	r2, [pc, #96]	; (8000310 <GPIO_PeriphClck+0xf4>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d104      	bne.n	80002be <GPIO_PeriphClck+0xa2>
			RCC_AHB1Cmd(GPIOB_Enable, DISABLE);
 80002b4:	2100      	movs	r1, #0
 80002b6:	2002      	movs	r0, #2
 80002b8:	f000 fdf0 	bl	8000e9c <RCC_AHB1Cmd>
}
 80002bc:	e022      	b.n	8000304 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOC)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4a14      	ldr	r2, [pc, #80]	; (8000314 <GPIO_PeriphClck+0xf8>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d104      	bne.n	80002d0 <GPIO_PeriphClck+0xb4>
			RCC_AHB1Cmd(GPIOC_Enable, DISABLE);
 80002c6:	2100      	movs	r1, #0
 80002c8:	2004      	movs	r0, #4
 80002ca:	f000 fde7 	bl	8000e9c <RCC_AHB1Cmd>
}
 80002ce:	e019      	b.n	8000304 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOD)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4a11      	ldr	r2, [pc, #68]	; (8000318 <GPIO_PeriphClck+0xfc>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d104      	bne.n	80002e2 <GPIO_PeriphClck+0xc6>
			RCC_AHB1Cmd(GPIOD_Enable, DISABLE);
 80002d8:	2100      	movs	r1, #0
 80002da:	2008      	movs	r0, #8
 80002dc:	f000 fdde 	bl	8000e9c <RCC_AHB1Cmd>
}
 80002e0:	e010      	b.n	8000304 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOE)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4a0d      	ldr	r2, [pc, #52]	; (800031c <GPIO_PeriphClck+0x100>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d104      	bne.n	80002f4 <GPIO_PeriphClck+0xd8>
			RCC_AHB1Cmd(GPIOE_Enable, DISABLE);
 80002ea:	2100      	movs	r1, #0
 80002ec:	2010      	movs	r0, #16
 80002ee:	f000 fdd5 	bl	8000e9c <RCC_AHB1Cmd>
}
 80002f2:	e007      	b.n	8000304 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOH)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4a0a      	ldr	r2, [pc, #40]	; (8000320 <GPIO_PeriphClck+0x104>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d103      	bne.n	8000304 <GPIO_PeriphClck+0xe8>
			RCC_AHB1Cmd(GPIOH_Enable, DISABLE);
 80002fc:	2100      	movs	r1, #0
 80002fe:	2080      	movs	r0, #128	; 0x80
 8000300:	f000 fdcc 	bl	8000e9c <RCC_AHB1Cmd>
}
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	40020000 	.word	0x40020000
 8000310:	40020400 	.word	0x40020400
 8000314:	40020800 	.word	0x40020800
 8000318:	40020c00 	.word	0x40020c00
 800031c:	40021000 	.word	0x40021000
 8000320:	40021c00 	.word	0x40021c00

08000324 <GPIO_AlternateFunctionConfig>:
 * @param	alt_function: This will take in the alternate function value that the user wishes to use.
 * 			The specific alternate function values and their functions are present in the data sheet.
 * 			The inputs for this function are AF0 - AF15;
 */
void GPIO_AlternateFunctionConfig(GPIO_Config_t *GPIO_Config, AFR_Config_t alt_function)
{
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	460b      	mov	r3, r1
 800032e:	70fb      	strb	r3, [r7, #3]
	uint8_t pin = GPIO_Config->GPIO_Pin;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	73fb      	strb	r3, [r7, #15]
	uint8_t alt_function_array = pin/8;
 8000336:	7bfb      	ldrb	r3, [r7, #15]
 8000338:	08db      	lsrs	r3, r3, #3
 800033a:	73bb      	strb	r3, [r7, #14]

	if(alt_function_array == 1)
 800033c:	7bbb      	ldrb	r3, [r7, #14]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d102      	bne.n	8000348 <GPIO_AlternateFunctionConfig+0x24>
	{
		pin -= 8;
 8000342:	7bfb      	ldrb	r3, [r7, #15]
 8000344:	3b08      	subs	r3, #8
 8000346:	73fb      	strb	r3, [r7, #15]
	}

	GPIO_Config->GPIO_Port->AFR[alt_function_array] &= ~(AF15 << (pin * 4));
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	7bba      	ldrb	r2, [r7, #14]
 800034e:	3208      	adds	r2, #8
 8000350:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000354:	7bfb      	ldrb	r3, [r7, #15]
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	220f      	movs	r2, #15
 800035a:	fa02 f303 	lsl.w	r3, r2, r3
 800035e:	43db      	mvns	r3, r3
 8000360:	4618      	mov	r0, r3
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	7bba      	ldrb	r2, [r7, #14]
 8000368:	4001      	ands	r1, r0
 800036a:	3208      	adds	r2, #8
 800036c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GPIO_Config->GPIO_Port->AFR[alt_function_array] |= (alt_function << (pin * 4));
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	7bba      	ldrb	r2, [r7, #14]
 8000376:	3208      	adds	r2, #8
 8000378:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800037c:	78fa      	ldrb	r2, [r7, #3]
 800037e:	7bfb      	ldrb	r3, [r7, #15]
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	fa02 f303 	lsl.w	r3, r2, r3
 8000386:	4618      	mov	r0, r3
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	7bba      	ldrb	r2, [r7, #14]
 800038e:	4301      	orrs	r1, r0
 8000390:	3208      	adds	r2, #8
 8000392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000396:	bf00      	nop
 8000398:	3714      	adds	r7, #20
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
	...

080003a4 <GPIO_Init>:
 *
 * @param	GPIO_Config: pointer to the GPIO_Config_t data structure that contains the
 * 			configuration parameters for the specific GPIO pin.
 */
void GPIO_Init(GPIO_Config_t *GPIO_Config, AFR_Config_t alt_function)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	460b      	mov	r3, r1
 80003ae:	70fb      	strb	r3, [r7, #3]
	uint8_t pin = GPIO_Config->GPIO_Pin;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	73fb      	strb	r3, [r7, #15]
	uint32_t temp_variable;

	GPIO_PeriphClck(GPIO_Config->GPIO_Port, ENABLE);
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	689b      	ldr	r3, [r3, #8]
 80003ba:	2101      	movs	r1, #1
 80003bc:	4618      	mov	r0, r3
 80003be:	f7ff ff2d 	bl	800021c <GPIO_PeriphClck>

	if(GPIO_Config->GPIO_Pin == AllPins)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	2b10      	cmp	r3, #16
 80003c8:	f040 8094 	bne.w	80004f4 <GPIO_Init+0x150>
	{
		if(GPIO_Config->GPIO_Port == GPIOA)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	4a88      	ldr	r2, [pc, #544]	; (80005f4 <GPIO_Init+0x250>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d112      	bne.n	80003fc <GPIO_Init+0x58>
		{
			/*Use the lock configuration to lock PA13 and PA14*/
			GPIO_Config->GPIO_Port->LCKR = LCKR_1_Pin13_Pin14;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	689b      	ldr	r3, [r3, #8]
 80003da:	f44f 32b0 	mov.w	r2, #90112	; 0x16000
 80003de:	61da      	str	r2, [r3, #28]
			GPIO_Config->GPIO_Port->LCKR = LCKR_0_Pin13_Pin14;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80003e8:	61da      	str	r2, [r3, #28]
			GPIO_Config->GPIO_Port->LCKR = LCKR_1_Pin13_Pin14;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	f44f 32b0 	mov.w	r2, #90112	; 0x16000
 80003f2:	61da      	str	r2, [r3, #28]
			temp_variable = GPIO_Config->GPIO_Port->LCKR;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	689b      	ldr	r3, [r3, #8]
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	60bb      	str	r3, [r7, #8]
		}

		/*Used to set each pin is AllPins is set by user*/
		for(pin = 0; pin < 16; pin++)
 80003fc:	2300      	movs	r3, #0
 80003fe:	73fb      	strb	r3, [r7, #15]
 8000400:	e074      	b.n	80004ec <GPIO_Init+0x148>
		{
			GPIO_Config->GPIO_Port->MODER &= ~(GPIO_Mode_Reset << (pin * 2));
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	689b      	ldr	r3, [r3, #8]
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	7bfb      	ldrb	r3, [r7, #15]
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	2103      	movs	r1, #3
 800040e:	fa01 f303 	lsl.w	r3, r1, r3
 8000412:	43db      	mvns	r3, r3
 8000414:	4619      	mov	r1, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	689b      	ldr	r3, [r3, #8]
 800041a:	400a      	ands	r2, r1
 800041c:	601a      	str	r2, [r3, #0]
			GPIO_Config->GPIO_Port->MODER |= ((GPIO_Config->GPIO_MODE) << (pin * 2));
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	689b      	ldr	r3, [r3, #8]
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	785b      	ldrb	r3, [r3, #1]
 8000428:	4619      	mov	r1, r3
 800042a:	7bfb      	ldrb	r3, [r7, #15]
 800042c:	005b      	lsls	r3, r3, #1
 800042e:	fa01 f303 	lsl.w	r3, r1, r3
 8000432:	4619      	mov	r1, r3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	430a      	orrs	r2, r1
 800043a:	601a      	str	r2, [r3, #0]

			GPIO_Config->GPIO_Port->OTYPER &= ~(GPIO_OType_Reset << pin);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	689b      	ldr	r3, [r3, #8]
 8000440:	685a      	ldr	r2, [r3, #4]
 8000442:	7bfb      	ldrb	r3, [r7, #15]
 8000444:	2101      	movs	r1, #1
 8000446:	fa01 f303 	lsl.w	r3, r1, r3
 800044a:	43db      	mvns	r3, r3
 800044c:	4619      	mov	r1, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	689b      	ldr	r3, [r3, #8]
 8000452:	400a      	ands	r2, r1
 8000454:	605a      	str	r2, [r3, #4]
			GPIO_Config->GPIO_Port->OTYPER |= ((GPIO_Config->GPIO_OTYPE) << pin);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	689b      	ldr	r3, [r3, #8]
 800045a:	685a      	ldr	r2, [r3, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	789b      	ldrb	r3, [r3, #2]
 8000460:	4619      	mov	r1, r3
 8000462:	7bfb      	ldrb	r3, [r7, #15]
 8000464:	fa01 f303 	lsl.w	r3, r1, r3
 8000468:	4619      	mov	r1, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	689b      	ldr	r3, [r3, #8]
 800046e:	430a      	orrs	r2, r1
 8000470:	605a      	str	r2, [r3, #4]

			GPIO_Config->GPIO_Port->OSPEEDR &= ~(GPIO_OSpeed_Reset << (pin * 2));
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	689b      	ldr	r3, [r3, #8]
 8000476:	689a      	ldr	r2, [r3, #8]
 8000478:	7bfb      	ldrb	r3, [r7, #15]
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	2101      	movs	r1, #1
 800047e:	fa01 f303 	lsl.w	r3, r1, r3
 8000482:	43db      	mvns	r3, r3
 8000484:	4619      	mov	r1, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	689b      	ldr	r3, [r3, #8]
 800048a:	400a      	ands	r2, r1
 800048c:	609a      	str	r2, [r3, #8]
			GPIO_Config->GPIO_Port->OSPEEDR |= ((GPIO_Config->GPIO_OSPEED) << (pin * 2));
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	689b      	ldr	r3, [r3, #8]
 8000492:	689a      	ldr	r2, [r3, #8]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	78db      	ldrb	r3, [r3, #3]
 8000498:	4619      	mov	r1, r3
 800049a:	7bfb      	ldrb	r3, [r7, #15]
 800049c:	005b      	lsls	r3, r3, #1
 800049e:	fa01 f303 	lsl.w	r3, r1, r3
 80004a2:	4619      	mov	r1, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	689b      	ldr	r3, [r3, #8]
 80004a8:	430a      	orrs	r2, r1
 80004aa:	609a      	str	r2, [r3, #8]

			GPIO_Config->GPIO_Port->PUPDR &= ~(GPIO_PUPD_Reset << (pin * 2));
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	689b      	ldr	r3, [r3, #8]
 80004b0:	68da      	ldr	r2, [r3, #12]
 80004b2:	7bfb      	ldrb	r3, [r7, #15]
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	2103      	movs	r1, #3
 80004b8:	fa01 f303 	lsl.w	r3, r1, r3
 80004bc:	43db      	mvns	r3, r3
 80004be:	4619      	mov	r1, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	400a      	ands	r2, r1
 80004c6:	60da      	str	r2, [r3, #12]
			GPIO_Config->GPIO_Port->PUPDR |= ((GPIO_Config->GPIO_PUPD) << (pin * 2));
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	68da      	ldr	r2, [r3, #12]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	791b      	ldrb	r3, [r3, #4]
 80004d2:	4619      	mov	r1, r3
 80004d4:	7bfb      	ldrb	r3, [r7, #15]
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	fa01 f303 	lsl.w	r3, r1, r3
 80004dc:	4619      	mov	r1, r3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	430a      	orrs	r2, r1
 80004e4:	60da      	str	r2, [r3, #12]
		for(pin = 0; pin < 16; pin++)
 80004e6:	7bfb      	ldrb	r3, [r7, #15]
 80004e8:	3301      	adds	r3, #1
 80004ea:	73fb      	strb	r3, [r7, #15]
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
 80004ee:	2b0f      	cmp	r3, #15
 80004f0:	d987      	bls.n	8000402 <GPIO_Init+0x5e>

		GPIO_Config->GPIO_Port->PUPDR &= ~(GPIO_PUPD_Reset << (pin * 2));
		GPIO_Config->GPIO_Port->PUPDR |= ((GPIO_Config->GPIO_PUPD) << (pin * 2));
	}

}
 80004f2:	e07a      	b.n	80005ea <GPIO_Init+0x246>
		GPIO_Config->GPIO_Port->MODER &= ~(GPIO_Mode_Reset << (pin * 2));
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	7bfb      	ldrb	r3, [r7, #15]
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	2103      	movs	r1, #3
 8000500:	fa01 f303 	lsl.w	r3, r1, r3
 8000504:	43db      	mvns	r3, r3
 8000506:	4619      	mov	r1, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	689b      	ldr	r3, [r3, #8]
 800050c:	400a      	ands	r2, r1
 800050e:	601a      	str	r2, [r3, #0]
		GPIO_Config->GPIO_Port->MODER |= ((GPIO_Config->GPIO_MODE) << (pin * 2));
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	689b      	ldr	r3, [r3, #8]
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	785b      	ldrb	r3, [r3, #1]
 800051a:	4619      	mov	r1, r3
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	fa01 f303 	lsl.w	r3, r1, r3
 8000524:	4619      	mov	r1, r3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	689b      	ldr	r3, [r3, #8]
 800052a:	430a      	orrs	r2, r1
 800052c:	601a      	str	r2, [r3, #0]
		if(GPIO_Config->GPIO_MODE == GPIO_AF)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	785b      	ldrb	r3, [r3, #1]
 8000532:	2b02      	cmp	r3, #2
 8000534:	d104      	bne.n	8000540 <GPIO_Init+0x19c>
			GPIO_AlternateFunctionConfig(GPIO_Config, alt_function);
 8000536:	78fb      	ldrb	r3, [r7, #3]
 8000538:	4619      	mov	r1, r3
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f7ff fef2 	bl	8000324 <GPIO_AlternateFunctionConfig>
		GPIO_Config->GPIO_Port->OTYPER &= ~(GPIO_OType_Reset << pin);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	685a      	ldr	r2, [r3, #4]
 8000546:	7bfb      	ldrb	r3, [r7, #15]
 8000548:	2101      	movs	r1, #1
 800054a:	fa01 f303 	lsl.w	r3, r1, r3
 800054e:	43db      	mvns	r3, r3
 8000550:	4619      	mov	r1, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	400a      	ands	r2, r1
 8000558:	605a      	str	r2, [r3, #4]
		GPIO_Config->GPIO_Port->OTYPER |= ((GPIO_Config->GPIO_OTYPE) << pin);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	685a      	ldr	r2, [r3, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	789b      	ldrb	r3, [r3, #2]
 8000564:	4619      	mov	r1, r3
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	fa01 f303 	lsl.w	r3, r1, r3
 800056c:	4619      	mov	r1, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	430a      	orrs	r2, r1
 8000574:	605a      	str	r2, [r3, #4]
		GPIO_Config->GPIO_Port->OSPEEDR &= ~(GPIO_OSpeed_Reset << (pin * 2));
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	689a      	ldr	r2, [r3, #8]
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	2101      	movs	r1, #1
 8000582:	fa01 f303 	lsl.w	r3, r1, r3
 8000586:	43db      	mvns	r3, r3
 8000588:	4619      	mov	r1, r3
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	400a      	ands	r2, r1
 8000590:	609a      	str	r2, [r3, #8]
		GPIO_Config->GPIO_Port->OSPEEDR |= ((GPIO_Config->GPIO_OSPEED) << (pin * 2));
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	689b      	ldr	r3, [r3, #8]
 8000596:	689a      	ldr	r2, [r3, #8]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	78db      	ldrb	r3, [r3, #3]
 800059c:	4619      	mov	r1, r3
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	fa01 f303 	lsl.w	r3, r1, r3
 80005a6:	4619      	mov	r1, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	430a      	orrs	r2, r1
 80005ae:	609a      	str	r2, [r3, #8]
		GPIO_Config->GPIO_Port->PUPDR &= ~(GPIO_PUPD_Reset << (pin * 2));
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	68da      	ldr	r2, [r3, #12]
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	2103      	movs	r1, #3
 80005bc:	fa01 f303 	lsl.w	r3, r1, r3
 80005c0:	43db      	mvns	r3, r3
 80005c2:	4619      	mov	r1, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	400a      	ands	r2, r1
 80005ca:	60da      	str	r2, [r3, #12]
		GPIO_Config->GPIO_Port->PUPDR |= ((GPIO_Config->GPIO_PUPD) << (pin * 2));
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	68da      	ldr	r2, [r3, #12]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	791b      	ldrb	r3, [r3, #4]
 80005d6:	4619      	mov	r1, r3
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	fa01 f303 	lsl.w	r3, r1, r3
 80005e0:	4619      	mov	r1, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	689b      	ldr	r3, [r3, #8]
 80005e6:	430a      	orrs	r2, r1
 80005e8:	60da      	str	r2, [r3, #12]
}
 80005ea:	bf00      	nop
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40020000 	.word	0x40020000

080005f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000606:	2b00      	cmp	r3, #0
 8000608:	db0b      	blt.n	8000622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	f003 021f 	and.w	r2, r3, #31
 8000610:	4907      	ldr	r1, [pc, #28]	; (8000630 <__NVIC_EnableIRQ+0x38>)
 8000612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000616:	095b      	lsrs	r3, r3, #5
 8000618:	2001      	movs	r0, #1
 800061a:	fa00 f202 	lsl.w	r2, r0, r2
 800061e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	e000e100 	.word	0xe000e100

08000634 <Enable_I2C_Periph>:

/*
 * @brief	A helper function used to activate the correct pins for the I2C peripheral.
 */
static void Enable_I2C_Periph(GPIO_TypeDef *GPIOx, uint8_t pin, AFR_Config_t alt_function)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08a      	sub	sp, #40	; 0x28
 8000638:	af04      	add	r7, sp, #16
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	70fb      	strb	r3, [r7, #3]
 8000640:	4613      	mov	r3, r2
 8000642:	70bb      	strb	r3, [r7, #2]
	GPIO_Config_t I2C_Periph;
	GPIO_Config(&I2C_Periph, GPIOx, pin, GPIO_AF, GPIO_OpenDrain, GPIO_LowSpeed, GPIO_PullUp);
 8000644:	78fa      	ldrb	r2, [r7, #3]
 8000646:	f107 000c 	add.w	r0, r7, #12
 800064a:	2301      	movs	r3, #1
 800064c:	9302      	str	r3, [sp, #8]
 800064e:	2300      	movs	r3, #0
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	2301      	movs	r3, #1
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2302      	movs	r3, #2
 8000658:	6879      	ldr	r1, [r7, #4]
 800065a:	f7ff fdbb 	bl	80001d4 <GPIO_Config>
	GPIO_Init(&I2C_Periph, alt_function);
 800065e:	78ba      	ldrb	r2, [r7, #2]
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	4611      	mov	r1, r2
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff fe9c 	bl	80003a4 <GPIO_Init>
}
 800066c:	bf00      	nop
 800066e:	3718      	adds	r7, #24
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <Generate_Start_Condition>:

/*
 * @brief	A helper function that generates the start condition.
 */
static void Generate_Start_Condition(I2C_Handle_t *I2C_Handle)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	I2C_Handle->I2Cx->CR1 |= CR1_Start;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	68db      	ldr	r3, [r3, #12]
 8000686:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800068a:	601a      	str	r2, [r3, #0]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <Generate_Stop_Condition>:

/*
 * brief	A helper function that generates a stop condition
 */
static void Generate_Stop_Condition(I2C_Handle_t *I2C_Handle)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	I2C_Handle->I2Cx->CR1 |= CR1_STOP;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	68db      	ldr	r3, [r3, #12]
 80006aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80006ae:	601a      	str	r2, [r3, #0]
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <Send_Slave_Address>:

/*
 * @brief	A helper function used to send the slave address with either a read or write in the LSB
 */
static void Send_Slave_Address(I2C_Handle_t *I2C_Handle)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	uint8_t slave_address = I2C_Handle->slave_address;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	7f1b      	ldrb	r3, [r3, #28]
 80006c8:	73fb      	strb	r3, [r7, #15]

	//Determine whether read or write mode is active first
	if(I2C_Handle->I2C_Bus_Direction == I2C_Recieve)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	7f5b      	ldrb	r3, [r3, #29]
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	d10a      	bne.n	80006e8 <Send_Slave_Address+0x2c>
	{
		//If the user wishes to read data, append a 1 to the end of the address
		slave_address = ((slave_address << 1) | (I2C_Read << 0U));
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	73fb      	strb	r3, [r7, #15]
		I2C_Handle->I2Cx->DR = slave_address;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	7bfa      	ldrb	r2, [r7, #15]
 80006e4:	611a      	str	r2, [r3, #16]
		//If the user wishes to write data append a 0 to the end of the address
		slave_address = ((slave_address << 1) | (I2C_Write << 0U));
		I2C_Handle->I2Cx->DR = slave_address;
	}

}
 80006e6:	e006      	b.n	80006f6 <Send_Slave_Address+0x3a>
		slave_address = ((slave_address << 1) | (I2C_Write << 0U));
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	73fb      	strb	r3, [r7, #15]
		I2C_Handle->I2Cx->DR = slave_address;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	7bfa      	ldrb	r2, [r7, #15]
 80006f4:	611a      	str	r2, [r3, #16]
}
 80006f6:	bf00      	nop
 80006f8:	3714      	adds	r7, #20
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <Clear_Addr_Flag>:

/*
 * @brief	A helper function that clears the Addr flag
 */
static void Clear_Addr_Flag(I2C_Handle_t *I2C_Handle)
{
 8000702:	b480      	push	{r7}
 8000704:	b085      	sub	sp, #20
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
	uint32_t temporary_variable = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]

	if((I2C_Handle->I2C_Bus_Direction == I2C_Recieve) && (I2C_Handle->Rx_Length == 1))
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	7f5b      	ldrb	r3, [r3, #29]
 8000712:	2b02      	cmp	r3, #2
 8000714:	d114      	bne.n	8000740 <Clear_Addr_Flag+0x3e>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	7c5b      	ldrb	r3, [r3, #17]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d110      	bne.n	8000740 <Clear_Addr_Flag+0x3e>
	{
		//Disable the Ack
		I2C_Handle->I2Cx->CR1 &= ~(CR1_ACK_Enable);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	68db      	ldr	r3, [r3, #12]
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800072c:	601a      	str	r2, [r3, #0]

		//Clear addr flag
		temporary_variable = I2C_Handle->I2Cx->SR1;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	68db      	ldr	r3, [r3, #12]
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	60fb      	str	r3, [r7, #12]
		temporary_variable = I2C_Handle->I2Cx->SR2;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	68db      	ldr	r3, [r3, #12]
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	e008      	b.n	8000752 <Clear_Addr_Flag+0x50>
	}

	else
	{
		//Clear the addr flag
		temporary_variable = I2C_Handle->I2Cx->SR1;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	60fb      	str	r3, [r7, #12]
		temporary_variable = I2C_Handle->I2Cx->SR2;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	60fb      	str	r3, [r7, #12]
	}


}
 8000750:	bf00      	nop
 8000752:	bf00      	nop
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <I2C_Config>:

/*
 * @brief	Configures the I2C data structure with user input, avoids use of the dot operator in the main program.
 */
void I2C_Config(I2C_Handle_t *I2C_Handle, I2C_TypeDef *I2Cx, uint32_t scl_speed, uint8_t duty_cycle, uint8_t pin_scl, uint8_t pin_sda)
{
 800075e:	b480      	push	{r7}
 8000760:	b085      	sub	sp, #20
 8000762:	af00      	add	r7, sp, #0
 8000764:	60f8      	str	r0, [r7, #12]
 8000766:	60b9      	str	r1, [r7, #8]
 8000768:	607a      	str	r2, [r7, #4]
 800076a:	70fb      	strb	r3, [r7, #3]
	I2C_Handle->I2Cx = I2Cx;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	68ba      	ldr	r2, [r7, #8]
 8000770:	60da      	str	r2, [r3, #12]
	I2C_Handle->I2C_Config.scl_speed = scl_speed;
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	605a      	str	r2, [r3, #4]
	I2C_Handle->I2C_Config.fm_dutycycle = duty_cycle;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	78fa      	ldrb	r2, [r7, #3]
 800077c:	721a      	strb	r2, [r3, #8]
	I2C_Handle->I2C_Config.pin_scl = pin_scl;
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	7e3a      	ldrb	r2, [r7, #24]
 8000782:	725a      	strb	r2, [r3, #9]
	I2C_Handle->I2C_Config.pin_sda = pin_sda;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	7f3a      	ldrb	r2, [r7, #28]
 8000788:	729a      	strb	r2, [r3, #10]
}
 800078a:	bf00      	nop
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
	...

08000798 <I2C_DeInit>:

/*
 * @brief	Deinitializes the I2C by resetting the I2Cx bus.
 */
void I2C_DeInit(I2C_Handle_t *I2C_Handle)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	if(I2C_Handle->I2Cx == I2C1)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	4a19      	ldr	r2, [pc, #100]	; (800080c <I2C_DeInit+0x74>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d10c      	bne.n	80007c4 <I2C_DeInit+0x2c>
	{
		RCC->APB1RSTR |= I2C1RST;
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <I2C_DeInit+0x78>)
 80007ac:	6a1b      	ldr	r3, [r3, #32]
 80007ae:	4a18      	ldr	r2, [pc, #96]	; (8000810 <I2C_DeInit+0x78>)
 80007b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007b4:	6213      	str	r3, [r2, #32]
		RCC->APB1RSTR &= ~I2C1RST;
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <I2C_DeInit+0x78>)
 80007b8:	6a1b      	ldr	r3, [r3, #32]
 80007ba:	4a15      	ldr	r2, [pc, #84]	; (8000810 <I2C_DeInit+0x78>)
 80007bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80007c0:	6213      	str	r3, [r2, #32]
	else
	{
		RCC->APB1RSTR |= I2C3RST;
		RCC->APB1RSTR &= ~I2C3RST;
	}
}
 80007c2:	e01d      	b.n	8000800 <I2C_DeInit+0x68>
	else if(I2C_Handle->I2Cx == I2C2)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	4a12      	ldr	r2, [pc, #72]	; (8000814 <I2C_DeInit+0x7c>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d10c      	bne.n	80007e8 <I2C_DeInit+0x50>
		RCC->APB1RSTR |= I2C2RST;
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <I2C_DeInit+0x78>)
 80007d0:	6a1b      	ldr	r3, [r3, #32]
 80007d2:	4a0f      	ldr	r2, [pc, #60]	; (8000810 <I2C_DeInit+0x78>)
 80007d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007d8:	6213      	str	r3, [r2, #32]
		RCC->APB1RSTR &= ~I2C2RST;
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <I2C_DeInit+0x78>)
 80007dc:	6a1b      	ldr	r3, [r3, #32]
 80007de:	4a0c      	ldr	r2, [pc, #48]	; (8000810 <I2C_DeInit+0x78>)
 80007e0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80007e4:	6213      	str	r3, [r2, #32]
}
 80007e6:	e00b      	b.n	8000800 <I2C_DeInit+0x68>
		RCC->APB1RSTR |= I2C3RST;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <I2C_DeInit+0x78>)
 80007ea:	6a1b      	ldr	r3, [r3, #32]
 80007ec:	4a08      	ldr	r2, [pc, #32]	; (8000810 <I2C_DeInit+0x78>)
 80007ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007f2:	6213      	str	r3, [r2, #32]
		RCC->APB1RSTR &= ~I2C3RST;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <I2C_DeInit+0x78>)
 80007f6:	6a1b      	ldr	r3, [r3, #32]
 80007f8:	4a05      	ldr	r2, [pc, #20]	; (8000810 <I2C_DeInit+0x78>)
 80007fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80007fe:	6213      	str	r3, [r2, #32]
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	40005400 	.word	0x40005400
 8000810:	40023800 	.word	0x40023800
 8000814:	40005800 	.word	0x40005800

08000818 <I2C_Init>:

/*
 * @brief	Initializes the I2C clock speeds using the CCR and Trise register and turns the I2C1 peripheral on.
 */
void I2C_Init(I2C_Handle_t *I2C_Handle)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b088      	sub	sp, #32
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	RCC_ClockFrequency_t ClockSource;

	uint16_t ccr_value;
	uint8_t trise_value;

	if(I2C_Handle->I2Cx == I2C1)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	4a69      	ldr	r2, [pc, #420]	; (80009cc <I2C_Init+0x1b4>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d113      	bne.n	8000852 <I2C_Init+0x3a>
	{
		//Enable I2C1_SDA Line
		Enable_I2C_Periph(GPIOB, (I2C_Handle->I2C_Config.pin_sda), AF4);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	7a9b      	ldrb	r3, [r3, #10]
 800082e:	2204      	movs	r2, #4
 8000830:	4619      	mov	r1, r3
 8000832:	4867      	ldr	r0, [pc, #412]	; (80009d0 <I2C_Init+0x1b8>)
 8000834:	f7ff fefe 	bl	8000634 <Enable_I2C_Periph>
		//Enable I2C1_SCL Line
		Enable_I2C_Periph(GPIOB, (I2C_Handle->I2C_Config.pin_scl), AF4);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	7a5b      	ldrb	r3, [r3, #9]
 800083c:	2204      	movs	r2, #4
 800083e:	4619      	mov	r1, r3
 8000840:	4863      	ldr	r0, [pc, #396]	; (80009d0 <I2C_Init+0x1b8>)
 8000842:	f7ff fef7 	bl	8000634 <Enable_I2C_Periph>
		//Enable Clock Access to I2C1
		RCC_APB1Cmd(I2C1_Enable, ENABLE);
 8000846:	2101      	movs	r1, #1
 8000848:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800084c:	f000 fb46 	bl	8000edc <RCC_APB1Cmd>
 8000850:	e023      	b.n	800089a <I2C_Init+0x82>
	}

	else if(I2C_Handle->I2Cx == I2C2)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	4a5f      	ldr	r2, [pc, #380]	; (80009d4 <I2C_Init+0x1bc>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d10f      	bne.n	800087c <I2C_Init+0x64>
	{
		//Enable I2C2_SCL Line for PB10
		Enable_I2C_Periph(GPIOB, 10, AF4);
 800085c:	2204      	movs	r2, #4
 800085e:	210a      	movs	r1, #10
 8000860:	485b      	ldr	r0, [pc, #364]	; (80009d0 <I2C_Init+0x1b8>)
 8000862:	f7ff fee7 	bl	8000634 <Enable_I2C_Periph>
		//Enable I2C2_SDA Line for PB3
		Enable_I2C_Periph(GPIOB, 3, AF9);
 8000866:	2209      	movs	r2, #9
 8000868:	2103      	movs	r1, #3
 800086a:	4859      	ldr	r0, [pc, #356]	; (80009d0 <I2C_Init+0x1b8>)
 800086c:	f7ff fee2 	bl	8000634 <Enable_I2C_Periph>
		//Enable Clock Access to I2C2
		RCC_APB1Cmd(I2C2_Enable, ENABLE);
 8000870:	2101      	movs	r1, #1
 8000872:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000876:	f000 fb31 	bl	8000edc <RCC_APB1Cmd>
 800087a:	e00e      	b.n	800089a <I2C_Init+0x82>
	}

	else
	{
		//Enable I2C3_SCL Line for PA8
		Enable_I2C_Periph(GPIOA, 3, AF4);
 800087c:	2204      	movs	r2, #4
 800087e:	2103      	movs	r1, #3
 8000880:	4855      	ldr	r0, [pc, #340]	; (80009d8 <I2C_Init+0x1c0>)
 8000882:	f7ff fed7 	bl	8000634 <Enable_I2C_Periph>
		//Enable I2C3_SDA Line for PC9
		Enable_I2C_Periph(GPIOC, 9, AF9);
 8000886:	2209      	movs	r2, #9
 8000888:	2109      	movs	r1, #9
 800088a:	4854      	ldr	r0, [pc, #336]	; (80009dc <I2C_Init+0x1c4>)
 800088c:	f7ff fed2 	bl	8000634 <Enable_I2C_Periph>
		//Enable Clock Access to I2C3
		RCC_APB1Cmd(I2C3_Enable, ENABLE);
 8000890:	2101      	movs	r1, #1
 8000892:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000896:	f000 fb21 	bl	8000edc <RCC_APB1Cmd>

	//I2C_Handle->I2Cx->CR1 |= CR1_SWRST;
	//I2C_Handle->I2Cx->CR1 &= ~CR1_SWRST;

	//Determining Peripheral Clock Speed
	RCC_GetClockFreq(&ClockSource);
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 fb5c 	bl	8000f5c <RCC_GetClockFreq>
	I2C_Handle->I2C_Config.peripheral_clk = (ClockSource.PCLCK1)/1000000U & (0x3F);
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	4a4e      	ldr	r2, [pc, #312]	; (80009e0 <I2C_Init+0x1c8>)
 80008a8:	fba2 2303 	umull	r2, r3, r2, r3
 80008ac:	0c9b      	lsrs	r3, r3, #18
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	701a      	strb	r2, [r3, #0]
	I2C_Handle->I2Cx->CR2 |= (I2C_Handle->I2C_Config.peripheral_clk) << CR2_Freq_Pos;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	68db      	ldr	r3, [r3, #12]
 80008be:	685a      	ldr	r2, [r3, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4619      	mov	r1, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	68db      	ldr	r3, [r3, #12]
 80008ca:	430a      	orrs	r2, r1
 80008cc:	605a      	str	r2, [r3, #4]

	//CCR Calculations:

	//Check for standard mode
	if(I2C_Handle->I2C_Config.scl_speed <= SM_100KHZ)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	4a44      	ldr	r2, [pc, #272]	; (80009e4 <I2C_Init+0x1cc>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d817      	bhi.n	8000908 <I2C_Init+0xf0>
	{
		//Clear the fast mode bit ensuring it is set to 0 (set to standard mode)
		I2C_Handle->I2Cx->CCR &= ~CCR_Speed_FM_Mode;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	69da      	ldr	r2, [r3, #28]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80008e6:	61da      	str	r2, [r3, #28]
		//In standard mode, the duty cycle is 50%
		ccr_value = (ClockSource.PCLCK1)/(2 * (I2C_Handle->I2C_Config.scl_speed));
 80008e8:	697a      	ldr	r2, [r7, #20]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f4:	83fb      	strh	r3, [r7, #30]

		//calculate the Trise value
		trise_value = ((ClockSource.PCLCK1)/(MAX_SM_TRISE_FREQ)) + 1;
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	4a39      	ldr	r2, [pc, #228]	; (80009e0 <I2C_Init+0x1c8>)
 80008fa:	fba2 2303 	umull	r2, r3, r2, r3
 80008fe:	0c9b      	lsrs	r3, r3, #18
 8000900:	b2db      	uxtb	r3, r3
 8000902:	3301      	adds	r3, #1
 8000904:	777b      	strb	r3, [r7, #29]
 8000906:	e044      	b.n	8000992 <I2C_Init+0x17a>

	//Check for fast mode
	else
	{
		//Set I2C to fast mode
		I2C_Handle->I2Cx->CCR |= CCR_Speed_FM_Mode;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	69da      	ldr	r2, [r3, #28]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	68db      	ldr	r3, [r3, #12]
 8000912:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000916:	61da      	str	r2, [r3, #28]

		if(I2C_Handle->I2C_Config.fm_dutycycle == FM_DUTY_2)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	7a1b      	ldrb	r3, [r3, #8]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d116      	bne.n	800094e <I2C_Init+0x136>
		{
			//Clear the Duty cycle bit so it is set to 0 (which means duty cycle of 2)
			I2C_Handle->I2Cx->CCR &= ~FM_DUTY_16_9;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	69da      	ldr	r2, [r3, #28]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	68db      	ldr	r3, [r3, #12]
 800092a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800092e:	61da      	str	r2, [r3, #28]
			ccr_value = ((I2C_Handle->I2C_Config.peripheral_clk)/(3 * I2C_Handle->I2C_Config.scl_speed)) & (0xFFF);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	4619      	mov	r1, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	685a      	ldr	r2, [r3, #4]
 800093a:	4613      	mov	r3, r2
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	4413      	add	r3, r2
 8000940:	fbb1 f3f3 	udiv	r3, r1, r3
 8000944:	b29b      	uxth	r3, r3
 8000946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800094a:	83fb      	strh	r3, [r7, #30]
 800094c:	e017      	b.n	800097e <I2C_Init+0x166>
		}

		else
		{
			//Set duty cycle and calculate CCR value
			I2C_Handle->I2Cx->CCR |= FM_DUTY_16_9;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	68db      	ldr	r3, [r3, #12]
 8000952:	69da      	ldr	r2, [r3, #28]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800095c:	61da      	str	r2, [r3, #28]
			ccr_value = ((I2C_Handle->I2C_Config.peripheral_clk)/(25 * I2C_Handle->I2C_Config.scl_speed)) & (0xFFF);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	4619      	mov	r1, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	685a      	ldr	r2, [r3, #4]
 8000968:	4613      	mov	r3, r2
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	4413      	add	r3, r2
 800096e:	009a      	lsls	r2, r3, #2
 8000970:	4413      	add	r3, r2
 8000972:	fbb1 f3f3 	udiv	r3, r1, r3
 8000976:	b29b      	uxth	r3, r3
 8000978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800097c:	83fb      	strh	r3, [r7, #30]
		}

		//calculate the Trise value
		trise_value = ((I2C_Handle->I2C_Config.peripheral_clk)/(MAX_FM_TRISE_FREQ)) + 1;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <I2C_Init+0x1d0>)
 8000986:	fba3 2302 	umull	r2, r3, r3, r2
 800098a:	0d5b      	lsrs	r3, r3, #21
 800098c:	b2db      	uxtb	r3, r3
 800098e:	3301      	adds	r3, #1
 8000990:	777b      	strb	r3, [r7, #29]

	}

	//Set CCR and Trise register values
	I2C_Handle->I2Cx->CCR |= (ccr_value & 0xFFF) << CCR_CCR_Pos;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	69d9      	ldr	r1, [r3, #28]
 8000998:	8bfb      	ldrh	r3, [r7, #30]
 800099a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	430a      	orrs	r2, r1
 80009a4:	61da      	str	r2, [r3, #28]
	I2C_Handle->I2Cx->TRISE = (trise_value & 0x1F);
 80009a6:	7f7a      	ldrb	r2, [r7, #29]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	f002 021f 	and.w	r2, r2, #31
 80009b0:	621a      	str	r2, [r3, #32]


	//Enable Peripheral
	I2C_Handle->I2Cx->CR1 |= CR1_PE_Enable;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	f042 0201 	orr.w	r2, r2, #1
 80009c0:	601a      	str	r2, [r3, #0]
}
 80009c2:	bf00      	nop
 80009c4:	3720      	adds	r7, #32
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40005400 	.word	0x40005400
 80009d0:	40020400 	.word	0x40020400
 80009d4:	40005800 	.word	0x40005800
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020800 	.word	0x40020800
 80009e0:	431bde83 	.word	0x431bde83
 80009e4:	000186a0 	.word	0x000186a0
 80009e8:	a10fb0af 	.word	0xa10fb0af

080009ec <Enable_Interrupt_Handler>:

/*
 * @brief	Enables the interrupts for the I2Cx peripherals through the NVIC
 */
static void Enable_Interrupt_Handler(I2C_TypeDef *I2Cx)
{	//Check which I2C peripheral is being used and enable its respective I2C error and event interrupt handle
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	if(I2Cx == I2C1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <Enable_Interrupt_Handler+0x48>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d106      	bne.n	8000a0a <Enable_Interrupt_Handler+0x1e>
	{
		NVIC_EnableIRQ(I2C1_EV_IRQn);
 80009fc:	201f      	movs	r0, #31
 80009fe:	f7ff fdfb 	bl	80005f8 <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a02:	2020      	movs	r0, #32
 8000a04:	f7ff fdf8 	bl	80005f8 <__NVIC_EnableIRQ>
	else
	{
		NVIC_EnableIRQ(I2C3_EV_IRQn);
		NVIC_EnableIRQ(I2C3_ER_IRQn);
	}
}
 8000a08:	e010      	b.n	8000a2c <Enable_Interrupt_Handler+0x40>
	else if(I2Cx == I2C2)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <Enable_Interrupt_Handler+0x4c>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d106      	bne.n	8000a20 <Enable_Interrupt_Handler+0x34>
		NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000a12:	2021      	movs	r0, #33	; 0x21
 8000a14:	f7ff fdf0 	bl	80005f8 <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000a18:	2022      	movs	r0, #34	; 0x22
 8000a1a:	f7ff fded 	bl	80005f8 <__NVIC_EnableIRQ>
}
 8000a1e:	e005      	b.n	8000a2c <Enable_Interrupt_Handler+0x40>
		NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000a20:	2048      	movs	r0, #72	; 0x48
 8000a22:	f7ff fde9 	bl	80005f8 <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(I2C3_ER_IRQn);
 8000a26:	2049      	movs	r0, #73	; 0x49
 8000a28:	f7ff fde6 	bl	80005f8 <__NVIC_EnableIRQ>
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40005400 	.word	0x40005400
 8000a38:	40005800 	.word	0x40005800

08000a3c <I2C_EndDataTransmission>:

static void I2C_EndDataTransmission(I2C_Handle_t *I2C_Handle)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	//Disable the two interrupt enable bits
	I2C_Handle->I2Cx->CR2 &= ~CR2_ITBUFEN;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	685a      	ldr	r2, [r3, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a52:	605a      	str	r2, [r3, #4]
	I2C_Handle->I2Cx->CR2 &= ~CR2_ITEVTEN;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	685a      	ldr	r2, [r3, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a62:	605a      	str	r2, [r3, #4]

	//Clear the I2C handle
	I2C_Handle->I2C_Bus_Direction = I2C_Ready;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	775a      	strb	r2, [r3, #29]

	//Enable the ACK
	I2C_Handle->I2Cx->CR1 |= CR1_ACK_Enable;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a78:	601a      	str	r2, [r3, #0]
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
	...

08000a88 <MasterTransmit_TxEInterrupt>:

static void MasterTransmit_TxEInterrupt(I2C_Handle_t *I2C_Handle, UART_Config_t *UART_Handle)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
	PrintData(UART_Handle, "Transmitting data.\n\r");
 8000a92:	4910      	ldr	r1, [pc, #64]	; (8000ad4 <MasterTransmit_TxEInterrupt+0x4c>)
 8000a94:	6838      	ldr	r0, [r7, #0]
 8000a96:	f000 fce7 	bl	8001468 <PrintData>
	//Check if there is data to be transmitted
	if(I2C_Handle->Tx_Length > 0)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	7c1b      	ldrb	r3, [r3, #16]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d014      	beq.n	8000acc <MasterTransmit_TxEInterrupt+0x44>
	{
		PrintData(UART_Handle, "Tx Length greater than 0.\n\r");
 8000aa2:	490d      	ldr	r1, [pc, #52]	; (8000ad8 <MasterTransmit_TxEInterrupt+0x50>)
 8000aa4:	6838      	ldr	r0, [r7, #0]
 8000aa6:	f000 fcdf 	bl	8001468 <PrintData>
		//Write the data to the DR
		I2C_Handle->I2Cx->DR = *(I2C_Handle->Tx_Buffer);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	781a      	ldrb	r2, [r3, #0]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

		//Decrement the length of the data to be transmitted
		I2C_Handle->Tx_Length--;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	7c1b      	ldrb	r3, [r3, #16]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	741a      	strb	r2, [r3, #16]

		//Increment the address of the buffer
		I2C_Handle->Tx_Buffer++;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	1c5a      	adds	r2, r3, #1
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	615a      	str	r2, [r3, #20]
	}
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	08001608 	.word	0x08001608
 8000ad8:	08001620 	.word	0x08001620

08000adc <MasterRecieve_RXNEInterrupt>:

static void MasterRecieve_RXNEInterrupt(I2C_Handle_t *I2C_Handle, UART_Config_t *UART_Handle)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]


	if(I2C_Handle->Rx_Size == 1)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	7c9b      	ldrb	r3, [r3, #18]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d119      	bne.n	8000b22 <MasterRecieve_RXNEInterrupt+0x46>
	{
		PrintData(UART_Handle, "Rx length = 1.\n\r");
 8000aee:	492d      	ldr	r1, [pc, #180]	; (8000ba4 <MasterRecieve_RXNEInterrupt+0xc8>)
 8000af0:	6838      	ldr	r0, [r7, #0]
 8000af2:	f000 fcb9 	bl	8001468 <PrintData>

		Generate_Stop_Condition(I2C_Handle);
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff fdce 	bl	8000698 <Generate_Stop_Condition>
		PrintData(UART_Handle, "Stop Condition generated.\n\r");
 8000afc:	492a      	ldr	r1, [pc, #168]	; (8000ba8 <MasterRecieve_RXNEInterrupt+0xcc>)
 8000afe:	6838      	ldr	r0, [r7, #0]
 8000b00:	f000 fcb2 	bl	8001468 <PrintData>

		//Ack bit needs to be disabled before clearing the address flag - this is handled by the clear address flag function
		*(I2C_Handle->Rx_Buffer) = I2C_Handle->I2Cx->DR;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	691a      	ldr	r2, [r3, #16]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	701a      	strb	r2, [r3, #0]

		PrintData(UART_Handle, "Closing Data Transmission.\n\r");
 8000b12:	4926      	ldr	r1, [pc, #152]	; (8000bac <MasterRecieve_RXNEInterrupt+0xd0>)
 8000b14:	6838      	ldr	r0, [r7, #0]
 8000b16:	f000 fca7 	bl	8001468 <PrintData>
		I2C_EndDataTransmission(I2C_Handle);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ff8e 	bl	8000a3c <I2C_EndDataTransmission>
		//Read data from DR
		*(I2C_Handle->Rx_Buffer) = I2C_Handle->I2Cx->DR;

	}

}
 8000b20:	e03b      	b.n	8000b9a <MasterRecieve_RXNEInterrupt+0xbe>
	else if(I2C_Handle->Rx_Size > 1)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	7c9b      	ldrb	r3, [r3, #18]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d937      	bls.n	8000b9a <MasterRecieve_RXNEInterrupt+0xbe>
		PrintData(UART_Handle, "RX length > 1.\n\r");
 8000b2a:	4921      	ldr	r1, [pc, #132]	; (8000bb0 <MasterRecieve_RXNEInterrupt+0xd4>)
 8000b2c:	6838      	ldr	r0, [r7, #0]
 8000b2e:	f000 fc9b 	bl	8001468 <PrintData>
		if(I2C_Handle->Rx_Length == 3)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	7c5b      	ldrb	r3, [r3, #17]
 8000b36:	2b03      	cmp	r3, #3
 8000b38:	d10b      	bne.n	8000b52 <MasterRecieve_RXNEInterrupt+0x76>
			PrintData(UART_Handle, "RX length = 2.\n\r");
 8000b3a:	491e      	ldr	r1, [pc, #120]	; (8000bb4 <MasterRecieve_RXNEInterrupt+0xd8>)
 8000b3c:	6838      	ldr	r0, [r7, #0]
 8000b3e:	f000 fc93 	bl	8001468 <PrintData>
			I2C_Handle->I2Cx->CR1 &= ~(CR1_ACK_Enable);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b50:	601a      	str	r2, [r3, #0]
		I2C_Handle->Rx_Length--;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	7c5b      	ldrb	r3, [r3, #17]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	745a      	strb	r2, [r3, #17]
		I2C_Handle->Rx_Buffer++;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	1c5a      	adds	r2, r3, #1
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	619a      	str	r2, [r3, #24]
		if(I2C_Handle->Rx_Length == 1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	7c5b      	ldrb	r3, [r3, #17]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d10d      	bne.n	8000b8c <MasterRecieve_RXNEInterrupt+0xb0>
			Generate_Stop_Condition(I2C_Handle);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff fd91 	bl	8000698 <Generate_Stop_Condition>
			PrintData(UART_Handle, "Stop Condition generated.\n\r");
 8000b76:	490c      	ldr	r1, [pc, #48]	; (8000ba8 <MasterRecieve_RXNEInterrupt+0xcc>)
 8000b78:	6838      	ldr	r0, [r7, #0]
 8000b7a:	f000 fc75 	bl	8001468 <PrintData>
			PrintData(UART_Handle, "Closing Data Transmission.\n\r");
 8000b7e:	490b      	ldr	r1, [pc, #44]	; (8000bac <MasterRecieve_RXNEInterrupt+0xd0>)
 8000b80:	6838      	ldr	r0, [r7, #0]
 8000b82:	f000 fc71 	bl	8001468 <PrintData>
			I2C_EndDataTransmission(I2C_Handle);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ff58 	bl	8000a3c <I2C_EndDataTransmission>
		*(I2C_Handle->Rx_Buffer) = I2C_Handle->I2Cx->DR;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	691a      	ldr	r2, [r3, #16]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	b2d2      	uxtb	r2, r2
 8000b98:	701a      	strb	r2, [r3, #0]
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	0800163c 	.word	0x0800163c
 8000ba8:	08001650 	.word	0x08001650
 8000bac:	0800166c 	.word	0x0800166c
 8000bb0:	0800168c 	.word	0x0800168c
 8000bb4:	080016a0 	.word	0x080016a0

08000bb8 <I2C_MasterTransmitIT>:

/*
 * @brief
 */
void I2C_MasterTransmitIT(I2C_Handle_t *I2C_Handle, uint8_t *TxData, uint8_t slave_address, uint8_t number_of_bytes, uint8_t restart_condition)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	71fb      	strb	r3, [r7, #7]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	71bb      	strb	r3, [r7, #6]
	//Enable interrupts for the secified I2C peripheral
	Enable_Interrupt_Handler(I2C_Handle->I2Cx);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ff0a 	bl	80009ec <Enable_Interrupt_Handler>

	//Ensure the I2C bus is not busy - If it is not set the specs for the I2C data structure
	if(((I2C_Handle->I2C_Bus_Direction)!= I2C_Transmit) && ((I2C_Handle->I2C_Bus_Direction)!= I2C_Recieve))
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	7f5b      	ldrb	r3, [r3, #29]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d02d      	beq.n	8000c3c <I2C_MasterTransmitIT+0x84>
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	7f5b      	ldrb	r3, [r3, #29]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d029      	beq.n	8000c3c <I2C_MasterTransmitIT+0x84>
	{
		I2C_Handle->slave_address = slave_address;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	79fa      	ldrb	r2, [r7, #7]
 8000bec:	771a      	strb	r2, [r3, #28]
		I2C_Handle->Tx_Length = number_of_bytes;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	79ba      	ldrb	r2, [r7, #6]
 8000bf2:	741a      	strb	r2, [r3, #16]
		I2C_Handle->Tx_Buffer = TxData;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	615a      	str	r2, [r3, #20]
		I2C_Handle->restart_condition = restart_condition;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	7e3a      	ldrb	r2, [r7, #24]
 8000bfe:	779a      	strb	r2, [r3, #30]
		I2C_Handle->I2C_Bus_Direction = I2C_Transmit;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2201      	movs	r2, #1
 8000c04:	775a      	strb	r2, [r3, #29]

		//Enable the Interrupt events
		I2C_Handle->I2Cx->CR2 |= CR2_ITBUFEN;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	685a      	ldr	r2, [r3, #4]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c14:	605a      	str	r2, [r3, #4]
		I2C_Handle->I2Cx->CR2 |= CR2_ITEVTEN;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c24:	605a      	str	r2, [r3, #4]
		I2C_Handle->I2Cx->CR2 |= CR2_ITERREN;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c34:	605a      	str	r2, [r3, #4]

		//Generate the start condition to start the I2C bus transfer
		Generate_Start_Condition(I2C_Handle);
 8000c36:	68f8      	ldr	r0, [r7, #12]
 8000c38:	f7ff fd1c 	bl	8000674 <Generate_Start_Condition>
	}
}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <I2C_MasterRecieveIT>:

/*
 * @brief
 */
void I2C_MasterRecieveIT(I2C_Handle_t *I2C_Handle, uint8_t *RxData, uint8_t slave_address, uint8_t number_of_bytes, uint8_t restart_condition)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	461a      	mov	r2, r3
 8000c52:	460b      	mov	r3, r1
 8000c54:	71fb      	strb	r3, [r7, #7]
 8000c56:	4613      	mov	r3, r2
 8000c58:	71bb      	strb	r3, [r7, #6]
	//Enable interrupts for the secified I2C peripheral
	Enable_Interrupt_Handler(I2C_Handle->I2Cx);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fec4 	bl	80009ec <Enable_Interrupt_Handler>

	//Ensure the I2C bus is not busy - If it is not set the specs for the I2C data structure
	if(((I2C_Handle->I2C_Bus_Direction)!= I2C_Transmit) && ((I2C_Handle->I2C_Bus_Direction)!= I2C_Recieve))
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	7f5b      	ldrb	r3, [r3, #29]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d038      	beq.n	8000cde <I2C_MasterRecieveIT+0x9a>
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	7f5b      	ldrb	r3, [r3, #29]
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d034      	beq.n	8000cde <I2C_MasterRecieveIT+0x9a>
	{
		I2C_Handle->slave_address = slave_address;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	79fa      	ldrb	r2, [r7, #7]
 8000c78:	771a      	strb	r2, [r3, #28]
		I2C_Handle->Rx_Length = number_of_bytes;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	79ba      	ldrb	r2, [r7, #6]
 8000c7e:	745a      	strb	r2, [r3, #17]
		I2C_Handle->Rx_Size = number_of_bytes;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	79ba      	ldrb	r2, [r7, #6]
 8000c84:	749a      	strb	r2, [r3, #18]
		I2C_Handle->Rx_Buffer = RxData;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	68ba      	ldr	r2, [r7, #8]
 8000c8a:	619a      	str	r2, [r3, #24]
		I2C_Handle->restart_condition = restart_condition;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	7e3a      	ldrb	r2, [r7, #24]
 8000c90:	779a      	strb	r2, [r3, #30]
		I2C_Handle->I2C_Bus_Direction = I2C_Recieve;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	2202      	movs	r2, #2
 8000c96:	775a      	strb	r2, [r3, #29]

		//Enable the Interrupt events
		I2C_Handle->I2Cx->CR2 |= CR2_ITBUFEN;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ca6:	605a      	str	r2, [r3, #4]
		I2C_Handle->I2Cx->CR2 |= CR2_ITEVTEN;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	685a      	ldr	r2, [r3, #4]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cb6:	605a      	str	r2, [r3, #4]
		I2C_Handle->I2Cx->CR2 |= CR2_ITERREN;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cc6:	605a      	str	r2, [r3, #4]

		//Enable the ACK bit
		I2C_Handle->I2Cx->CR1 |= CR1_ACK_Enable;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000cd6:	601a      	str	r2, [r3, #0]

		//Generate the start condition to start the I2C bus transfer
		Generate_Start_Condition(I2C_Handle);
 8000cd8:	68f8      	ldr	r0, [r7, #12]
 8000cda:	f7ff fccb 	bl	8000674 <Generate_Start_Condition>
	}
}
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <IRQ_Event_Handler>:

/*
 * @brief
 */
void IRQ_Event_Handler(I2C_Handle_t *I2C_Handle, UART_Config_t *UART_Handle)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
	//Used to check status of registers
	uint8_t evt_interrupt, buff_interrupt, sr_flag;
	PrintData(UART_Handle, "Interrupt Generated.\n\r");
 8000cf2:	495d      	ldr	r1, [pc, #372]	; (8000e68 <IRQ_Event_Handler+0x180>)
 8000cf4:	6838      	ldr	r0, [r7, #0]
 8000cf6:	f000 fbb7 	bl	8001468 <PrintData>

	//Used to ensure the interrupt enable bits are set
	evt_interrupt = (I2C_Handle->I2Cx->CR2 & CR2_ITEVTEN) >> 9;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	0a5b      	lsrs	r3, r3, #9
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	73fb      	strb	r3, [r7, #15]
	buff_interrupt = (I2C_Handle->I2Cx->CR2 & CR2_ITBUFEN) >> 10;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	0a9b      	lsrs	r3, r3, #10
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	73bb      	strb	r3, [r7, #14]

	//1)SB flag is raised after start generation
	sr_flag = I2C_Handle->I2Cx->SR1 & SR1_SB_Flag;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	68db      	ldr	r3, [r3, #12]
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	737b      	strb	r3, [r7, #13]

	if(evt_interrupt && sr_flag)
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d00d      	beq.n	8000d4a <IRQ_Event_Handler+0x62>
 8000d2e:	7b7b      	ldrb	r3, [r7, #13]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d00a      	beq.n	8000d4a <IRQ_Event_Handler+0x62>
	{
		PrintData(UART_Handle, "SB bit raised.\n\r");
 8000d34:	494d      	ldr	r1, [pc, #308]	; (8000e6c <IRQ_Event_Handler+0x184>)
 8000d36:	6838      	ldr	r0, [r7, #0]
 8000d38:	f000 fb96 	bl	8001468 <PrintData>
		Send_Slave_Address(I2C_Handle);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff fcbd 	bl	80006bc <Send_Slave_Address>
		PrintData(UART_Handle, "Slave address sent.\n\r");
 8000d42:	494b      	ldr	r1, [pc, #300]	; (8000e70 <IRQ_Event_Handler+0x188>)
 8000d44:	6838      	ldr	r0, [r7, #0]
 8000d46:	f000 fb8f 	bl	8001468 <PrintData>
	}

	//2) ADDR flag is set after the address was sent to the slave device
	sr_flag = (I2C_Handle->I2Cx->SR1 & SR1_ADDR_Flag) >> 1;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	085b      	lsrs	r3, r3, #1
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	737b      	strb	r3, [r7, #13]

	if(evt_interrupt && sr_flag)
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d00d      	beq.n	8000d7c <IRQ_Event_Handler+0x94>
 8000d60:	7b7b      	ldrb	r3, [r7, #13]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d00a      	beq.n	8000d7c <IRQ_Event_Handler+0x94>
	{
		PrintData(UART_Handle, "ADDR flag raised.\n\r");
 8000d66:	4943      	ldr	r1, [pc, #268]	; (8000e74 <IRQ_Event_Handler+0x18c>)
 8000d68:	6838      	ldr	r0, [r7, #0]
 8000d6a:	f000 fb7d 	bl	8001468 <PrintData>
		Clear_Addr_Flag(I2C_Handle);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff fcc7 	bl	8000702 <Clear_Addr_Flag>
		PrintData(UART_Handle, "Address flag cleared.\n\r");
 8000d74:	4940      	ldr	r1, [pc, #256]	; (8000e78 <IRQ_Event_Handler+0x190>)
 8000d76:	6838      	ldr	r0, [r7, #0]
 8000d78:	f000 fb76 	bl	8001468 <PrintData>
	}

	//5) BTF flag is set Inidcating byte transfer finished
	//		In transmission: Both the DR and shift register are empty (DR needs to be written)
	//		In reception: Both Dr and shift register are full (DR needs to be read)
	sr_flag = (I2C_Handle->I2Cx->SR1 & SR1_BTF_Flag) >> 2;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	089b      	lsrs	r3, r3, #2
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	737b      	strb	r3, [r7, #13]

	if(evt_interrupt && sr_flag)
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d02b      	beq.n	8000dea <IRQ_Event_Handler+0x102>
 8000d92:	7b7b      	ldrb	r3, [r7, #13]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d028      	beq.n	8000dea <IRQ_Event_Handler+0x102>
	{
		//Check if I2C peripheral is in transmission mode and TxE flag is set - inidcates both BTF and TxE flags are set
		if((I2C_Handle->I2C_Bus_Direction == I2C_Transmit) && ((I2C_Handle->I2Cx->SR1 & SR1_TXE_Flag)>>7))
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	7f5b      	ldrb	r3, [r3, #29]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d120      	bne.n	8000de2 <IRQ_Event_Handler+0xfa>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d019      	beq.n	8000de2 <IRQ_Event_Handler+0xfa>
		{
			PrintData(UART_Handle, "BTF flag set in transmission.\n\r");
 8000dae:	4933      	ldr	r1, [pc, #204]	; (8000e7c <IRQ_Event_Handler+0x194>)
 8000db0:	6838      	ldr	r0, [r7, #0]
 8000db2:	f000 fb59 	bl	8001468 <PrintData>
			if(I2C_Handle->Tx_Length ==0)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	7c1b      	ldrb	r3, [r3, #16]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d111      	bne.n	8000de2 <IRQ_Event_Handler+0xfa>
			{
				if((I2C_Handle->restart_condition == I2C_No_Restart))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	7f9b      	ldrb	r3, [r3, #30]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d106      	bne.n	8000dd4 <IRQ_Event_Handler+0xec>
				{
					//Generate stop condition
					Generate_Stop_Condition(I2C_Handle);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff fc66 	bl	8000698 <Generate_Stop_Condition>
					PrintData(UART_Handle, "Stop condition generated.\n\r");
 8000dcc:	492c      	ldr	r1, [pc, #176]	; (8000e80 <IRQ_Event_Handler+0x198>)
 8000dce:	6838      	ldr	r0, [r7, #0]
 8000dd0:	f000 fb4a 	bl	8001468 <PrintData>
				}

				PrintData(UART_Handle, "Closing Data Transmission.\n\r");
 8000dd4:	492b      	ldr	r1, [pc, #172]	; (8000e84 <IRQ_Event_Handler+0x19c>)
 8000dd6:	6838      	ldr	r0, [r7, #0]
 8000dd8:	f000 fb46 	bl	8001468 <PrintData>
				I2C_EndDataTransmission(I2C_Handle);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff fe2d 	bl	8000a3c <I2C_EndDataTransmission>
			}
		}

		PrintData(UART_Handle, "BTF flag set.\n\r");
 8000de2:	4929      	ldr	r1, [pc, #164]	; (8000e88 <IRQ_Event_Handler+0x1a0>)
 8000de4:	6838      	ldr	r0, [r7, #0]
 8000de6:	f000 fb3f 	bl	8001468 <PrintData>

	}

	//3) TxE flag is set indicating the data register is empty (in transmission)
	//		- Cleared by software writing to the DR of by hardware after a start/stop condition
	sr_flag = (I2C_Handle->I2Cx->SR1 & SR1_TXE_Flag) >> 7;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	695b      	ldr	r3, [r3, #20]
 8000df0:	09db      	lsrs	r3, r3, #7
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	737b      	strb	r3, [r7, #13]

	if(evt_interrupt && buff_interrupt && sr_flag)
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d011      	beq.n	8000e24 <IRQ_Event_Handler+0x13c>
 8000e00:	7bbb      	ldrb	r3, [r7, #14]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d00e      	beq.n	8000e24 <IRQ_Event_Handler+0x13c>
 8000e06:	7b7b      	ldrb	r3, [r7, #13]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d00b      	beq.n	8000e24 <IRQ_Event_Handler+0x13c>
	{
		PrintData(UART_Handle, "Txe Flag Raised.\n\r");
 8000e0c:	491f      	ldr	r1, [pc, #124]	; (8000e8c <IRQ_Event_Handler+0x1a4>)
 8000e0e:	6838      	ldr	r0, [r7, #0]
 8000e10:	f000 fb2a 	bl	8001468 <PrintData>
		MasterTransmit_TxEInterrupt(I2C_Handle, UART_Handle);
 8000e14:	6839      	ldr	r1, [r7, #0]
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff fe36 	bl	8000a88 <MasterTransmit_TxEInterrupt>
		PrintData(UART_Handle, "Txe Flag Cleared.\n\r");
 8000e1c:	491c      	ldr	r1, [pc, #112]	; (8000e90 <IRQ_Event_Handler+0x1a8>)
 8000e1e:	6838      	ldr	r0, [r7, #0]
 8000e20:	f000 fb22 	bl	8001468 <PrintData>
	}

	//4) RxNE flag is set indicating data is in the DR (when reciving data)
	sr_flag = (I2C_Handle->I2Cx->SR1 & SR1_RXNE_Flag) >> 6;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	099b      	lsrs	r3, r3, #6
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	737b      	strb	r3, [r7, #13]

	if(evt_interrupt && buff_interrupt && sr_flag)
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d011      	beq.n	8000e5e <IRQ_Event_Handler+0x176>
 8000e3a:	7bbb      	ldrb	r3, [r7, #14]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d00e      	beq.n	8000e5e <IRQ_Event_Handler+0x176>
 8000e40:	7b7b      	ldrb	r3, [r7, #13]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00b      	beq.n	8000e5e <IRQ_Event_Handler+0x176>
	{
		PrintData(UART_Handle, "RxNE Flag raised.\n\r");
 8000e46:	4913      	ldr	r1, [pc, #76]	; (8000e94 <IRQ_Event_Handler+0x1ac>)
 8000e48:	6838      	ldr	r0, [r7, #0]
 8000e4a:	f000 fb0d 	bl	8001468 <PrintData>
		MasterRecieve_RXNEInterrupt(I2C_Handle, UART_Handle);
 8000e4e:	6839      	ldr	r1, [r7, #0]
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff fe43 	bl	8000adc <MasterRecieve_RXNEInterrupt>
		PrintData(UART_Handle, "RxNE Flag cleared.\n\r");
 8000e56:	4910      	ldr	r1, [pc, #64]	; (8000e98 <IRQ_Event_Handler+0x1b0>)
 8000e58:	6838      	ldr	r0, [r7, #0]
 8000e5a:	f000 fb05 	bl	8001468 <PrintData>
	}

}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	080016b4 	.word	0x080016b4
 8000e6c:	080016cc 	.word	0x080016cc
 8000e70:	080016e0 	.word	0x080016e0
 8000e74:	080016f8 	.word	0x080016f8
 8000e78:	0800170c 	.word	0x0800170c
 8000e7c:	08001724 	.word	0x08001724
 8000e80:	08001744 	.word	0x08001744
 8000e84:	0800166c 	.word	0x0800166c
 8000e88:	08001760 	.word	0x08001760
 8000e8c:	08001770 	.word	0x08001770
 8000e90:	08001784 	.word	0x08001784
 8000e94:	08001798 	.word	0x08001798
 8000e98:	080017ac 	.word	0x080017ac

08000e9c <RCC_AHB1Cmd>:
 * @param	AHB1_Periph: Specific peripheral selected by the user (GPIOx, SPIx, I2Cx etc)
 *
 * @param	State: Specifies whether to enable or disable the peripheral.
 */
void RCC_AHB1Cmd(uint32_t AHB1_Periph, FunctionalState State)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 8000ea8:	78fb      	ldrb	r3, [r7, #3]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d106      	bne.n	8000ebc <RCC_AHB1Cmd+0x20>
	{
		RCC->AHB1ENR |= AHB1_Periph;
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <RCC_AHB1Cmd+0x3c>)
 8000eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eb2:	4909      	ldr	r1, [pc, #36]	; (8000ed8 <RCC_AHB1Cmd+0x3c>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	630b      	str	r3, [r1, #48]	; 0x30

	else
	{
		RCC->AHB1ENR &= ~AHB1_Periph;
	}
}
 8000eba:	e006      	b.n	8000eca <RCC_AHB1Cmd+0x2e>
		RCC->AHB1ENR &= ~AHB1_Periph;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <RCC_AHB1Cmd+0x3c>)
 8000ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	4904      	ldr	r1, [pc, #16]	; (8000ed8 <RCC_AHB1Cmd+0x3c>)
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800

08000edc <RCC_APB1Cmd>:
 * @param	APB1_Periph: Specific peripheral selected by the user (GPIOx, SPIx, I2Cx etc)
 *
 * @param	State: Specifies whether to enable or disable the peripheral.
 */
void RCC_APB1Cmd(uint32_t APB1_Periph, FunctionalState State)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d106      	bne.n	8000efc <RCC_APB1Cmd+0x20>
	{
		RCC->APB1ENR |= APB1_Periph;
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <RCC_APB1Cmd+0x3c>)
 8000ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ef2:	4909      	ldr	r1, [pc, #36]	; (8000f18 <RCC_APB1Cmd+0x3c>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	640b      	str	r3, [r1, #64]	; 0x40

	else
	{
		RCC->APB1ENR &= ~APB1_Periph;
	}
}
 8000efa:	e006      	b.n	8000f0a <RCC_APB1Cmd+0x2e>
		RCC->APB1ENR &= ~APB1_Periph;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <RCC_APB1Cmd+0x3c>)
 8000efe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	4904      	ldr	r1, [pc, #16]	; (8000f18 <RCC_APB1Cmd+0x3c>)
 8000f06:	4013      	ands	r3, r2
 8000f08:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800

08000f1c <RCC_APB2Cmd>:
 * @param	APB2_Periph: Specific peripheral selected by the user (GPIOx, SPIx, I2Cx etc)
 *
 * @param	State: Specifies whether to enable or disable the peripheral.
 */
void RCC_APB2Cmd(uint32_t APB2_Periph, FunctionalState State)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 8000f28:	78fb      	ldrb	r3, [r7, #3]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d106      	bne.n	8000f3c <RCC_APB2Cmd+0x20>
	{
		RCC->APB2ENR |= APB2_Periph;
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <RCC_APB2Cmd+0x3c>)
 8000f30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f32:	4909      	ldr	r1, [pc, #36]	; (8000f58 <RCC_APB2Cmd+0x3c>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	644b      	str	r3, [r1, #68]	; 0x44

	else
	{
		RCC->APB2ENR &= ~APB2_Periph;
	}
}
 8000f3a:	e006      	b.n	8000f4a <RCC_APB2Cmd+0x2e>
		RCC->APB2ENR &= ~APB2_Periph;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <RCC_APB2Cmd+0x3c>)
 8000f3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	4904      	ldr	r1, [pc, #16]	; (8000f58 <RCC_APB2Cmd+0x3c>)
 8000f46:	4013      	ands	r3, r2
 8000f48:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800

08000f5c <RCC_GetClockFreq>:
 *
 * @param	ClockSource: Points to the ClockSource data structure which contains the varibales to hold
 * 			the frequencies of the SYSCLCK, HCLCK, PCLCK1, PCLCK2.
 */
void RCC_GetClockFreq(RCC_ClockFrequency_t *ClockSource)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b08b      	sub	sp, #44	; 0x2c
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	uint32_t pll_Value = 0, plln = 0, pllm = 2, pllp = 2, pll_src = 0, pll_fvco = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	61bb      	str	r3, [r7, #24]
 8000f70:	2302      	movs	r3, #2
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]

	uint32_t temp_variable, prescaler;

	/*Determine the clock source for the SYSCLCK*/
	if(((RCC->CFGR & RCC_CFGR_SWS_Mask) >> 2) == 0x0)
 8000f7c:	4b43      	ldr	r3, [pc, #268]	; (800108c <RCC_GetClockFreq+0x130>)
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	089b      	lsrs	r3, r3, #2
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d103      	bne.n	8000f92 <RCC_GetClockFreq+0x36>
	{
		ClockSource->SYSCLCK = HSI_Value;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a40      	ldr	r2, [pc, #256]	; (8001090 <RCC_GetClockFreq+0x134>)
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	e03f      	b.n	8001012 <RCC_GetClockFreq+0xb6>
	}

	else if(((RCC->CFGR & RCC_CFGR_SWS_Mask) >> 2) == 0x1)
 8000f92:	4b3e      	ldr	r3, [pc, #248]	; (800108c <RCC_GetClockFreq+0x130>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	089b      	lsrs	r3, r3, #2
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d103      	bne.n	8000fa8 <RCC_GetClockFreq+0x4c>
	{
		ClockSource->SYSCLCK = HSE_Value;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a3c      	ldr	r2, [pc, #240]	; (8001094 <RCC_GetClockFreq+0x138>)
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	e034      	b.n	8001012 <RCC_GetClockFreq+0xb6>
	}

	else if(((RCC->CFGR & RCC_CFGR_SWS_Mask) >> 2) == 0x2)
 8000fa8:	4b38      	ldr	r3, [pc, #224]	; (800108c <RCC_GetClockFreq+0x130>)
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d12d      	bne.n	8001012 <RCC_GetClockFreq+0xb6>
	{
		/*Determine the input source of the PLL*/
		if(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC_Mask)
 8000fb6:	4b35      	ldr	r3, [pc, #212]	; (800108c <RCC_GetClockFreq+0x130>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d002      	beq.n	8000fc8 <RCC_GetClockFreq+0x6c>
		{
			pll_src = HSE_Value;
 8000fc2:	4b34      	ldr	r3, [pc, #208]	; (8001094 <RCC_GetClockFreq+0x138>)
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc6:	e001      	b.n	8000fcc <RCC_GetClockFreq+0x70>
		}

		else
		{
			pll_src = HSI_Value;
 8000fc8:	4b31      	ldr	r3, [pc, #196]	; (8001090 <RCC_GetClockFreq+0x134>)
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
		}

		plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Mask) >> 6);
 8000fcc:	4b2f      	ldr	r3, [pc, #188]	; (800108c <RCC_GetClockFreq+0x130>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	099b      	lsrs	r3, r3, #6
 8000fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fd6:	61fb      	str	r3, [r7, #28]
		pllm = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Mask);
 8000fd8:	4b2c      	ldr	r3, [pc, #176]	; (800108c <RCC_GetClockFreq+0x130>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fe0:	61bb      	str	r3, [r7, #24]
		pll_fvco = (pll_src/pllm) * plln;
 8000fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	fbb2 f2f3 	udiv	r2, r2, r3
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fb02 f303 	mul.w	r3, r2, r3
 8000ff0:	613b      	str	r3, [r7, #16]
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP_Mask) >> 16) * 2) + 2);
 8000ff2:	4b26      	ldr	r3, [pc, #152]	; (800108c <RCC_GetClockFreq+0x130>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	0c1b      	lsrs	r3, r3, #16
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	617b      	str	r3, [r7, #20]
		pll_Value = pll_fvco/pllp;
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fbb2 f3f3 	udiv	r3, r2, r3
 800100a:	623b      	str	r3, [r7, #32]

		ClockSource->SYSCLCK = pll_Value;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a3a      	ldr	r2, [r7, #32]
 8001010:	601a      	str	r2, [r3, #0]
	}

	/*Determine the frequency of the HCLCK*/
	temp_variable = ((RCC->CFGR & RCC_CFGR_HPRE_Mask) >> 4);
 8001012:	4b1e      	ldr	r3, [pc, #120]	; (800108c <RCC_GetClockFreq+0x130>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	091b      	lsrs	r3, r3, #4
 8001018:	f003 030f 	and.w	r3, r3, #15
 800101c:	60fb      	str	r3, [r7, #12]
	prescaler = prescalerTable[temp_variable];
 800101e:	4a1e      	ldr	r2, [pc, #120]	; (8001098 <RCC_GetClockFreq+0x13c>)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001026:	b29b      	uxth	r3, r3
 8001028:	60bb      	str	r3, [r7, #8]
	ClockSource->HCLCK = (ClockSource->SYSCLCK) >> prescaler;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	40da      	lsrs	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	605a      	str	r2, [r3, #4]

	/*Determine the frequency of the PCLCK1*/
	temp_variable = ((RCC->CFGR & RCC_CFGR_PPRE1_Mask) >> 10);
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <RCC_GetClockFreq+0x130>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	0a9b      	lsrs	r3, r3, #10
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	60fb      	str	r3, [r7, #12]
	prescaler = prescalerTable[temp_variable];
 8001042:	4a15      	ldr	r2, [pc, #84]	; (8001098 <RCC_GetClockFreq+0x13c>)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800104a:	b29b      	uxth	r3, r3
 800104c:	60bb      	str	r3, [r7, #8]
	ClockSource->PCLCK1 = (ClockSource->HCLCK) >> prescaler;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	40da      	lsrs	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	609a      	str	r2, [r3, #8]

	/*Determine frequency of PCLCK2*/
	temp_variable = ((RCC->CFGR & RCC_CFGR_PPRE2_Mask) >> 13);
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <RCC_GetClockFreq+0x130>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	0b5b      	lsrs	r3, r3, #13
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	60fb      	str	r3, [r7, #12]
	prescaler = prescalerTable[temp_variable];
 8001066:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <RCC_GetClockFreq+0x13c>)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800106e:	b29b      	uxth	r3, r3
 8001070:	60bb      	str	r3, [r7, #8]
	ClockSource->PCLCK2 = (ClockSource->HCLCK) >> prescaler;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	40da      	lsrs	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60da      	str	r2, [r3, #12]

}
 800107e:	bf00      	nop
 8001080:	372c      	adds	r7, #44	; 0x2c
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800
 8001090:	00f42400 	.word	0x00f42400
 8001094:	007a1200 	.word	0x007a1200
 8001098:	20000000 	.word	0x20000000

0800109c <UART_Config>:
 *
 * @param	baudrate: Allows the user to input their desired baud-rate for the UART peripheral.
 *
 */
void UART_Config(UART_Config_t *UART_Config, USART_TypeDef *UARTx, uint16_t mode, uint32_t baudrate)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	4613      	mov	r3, r2
 80010aa:	80fb      	strh	r3, [r7, #6]
	UART_Config->UARTx = UARTx;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	611a      	str	r2, [r3, #16]
	UART_Config->Mode = mode;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	88fa      	ldrh	r2, [r7, #6]
 80010b6:	819a      	strh	r2, [r3, #12]
	UART_Config->BaudRate = baudrate;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	609a      	str	r2, [r3, #8]
	UART_Config->World_Length = UART_WORDLEN_8BITS;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2200      	movs	r2, #0
 80010c2:	805a      	strh	r2, [r3, #2]
	UART_Config->Parity = UART_PARITY_DISABLED;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2200      	movs	r2, #0
 80010c8:	80da      	strh	r2, [r3, #6]
	UART_Config->oversampling = UART_OVERSAMPLING_16;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2200      	movs	r2, #0
 80010ce:	809a      	strh	r2, [r3, #4]
	UART_Config->Stop_Bits = UART_STOPBITS_1;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2200      	movs	r2, #0
 80010d4:	801a      	strh	r2, [r3, #0]
}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <Select_UART_Periph>:
 *
 * @param	alt_function: Defines the alternate function value to input into the Alternate function register.
 *
 */
void Select_UART_Periph(GPIO_TypeDef *GPIOx, uint8_t pin, AFR_Config_t alt_function)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b08c      	sub	sp, #48	; 0x30
 80010e6:	af04      	add	r7, sp, #16
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	460b      	mov	r3, r1
 80010ec:	70fb      	strb	r3, [r7, #3]
 80010ee:	4613      	mov	r3, r2
 80010f0:	70bb      	strb	r3, [r7, #2]
	GPIO_Config_t GPIOx_UARTx_Tx, GPIOx_UARTx_Rx;

	GPIO_Config(&GPIOx_UARTx_Tx, GPIOx, pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 80010f2:	78fa      	ldrb	r2, [r7, #3]
 80010f4:	f107 0014 	add.w	r0, r7, #20
 80010f8:	2300      	movs	r3, #0
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2300      	movs	r3, #0
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	2300      	movs	r3, #0
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2302      	movs	r3, #2
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	f7ff f864 	bl	80001d4 <GPIO_Config>
	GPIO_Init(&GPIOx_UARTx_Tx, alt_function);
 800110c:	78ba      	ldrb	r2, [r7, #2]
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f945 	bl	80003a4 <GPIO_Init>

	GPIO_Config(&GPIOx_UARTx_Rx, GPIOx, (pin + 1), GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 800111a:	78fb      	ldrb	r3, [r7, #3]
 800111c:	3301      	adds	r3, #1
 800111e:	b2da      	uxtb	r2, r3
 8001120:	f107 0008 	add.w	r0, r7, #8
 8001124:	2300      	movs	r3, #0
 8001126:	9302      	str	r3, [sp, #8]
 8001128:	2300      	movs	r3, #0
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	2300      	movs	r3, #0
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2302      	movs	r3, #2
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	f7ff f84e 	bl	80001d4 <GPIO_Config>
	GPIO_Init(&GPIOx_UARTx_Rx, alt_function);
 8001138:	78ba      	ldrb	r2, [r7, #2]
 800113a:	f107 0308 	add.w	r3, r7, #8
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f92f 	bl	80003a4 <GPIO_Init>
}
 8001146:	bf00      	nop
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <Enable_UART_Periph>:
 * 			based on the peripheral selected by the user.
 *
 * @param	UARTx: Defines which UART peripheral the user chooses, this can be: USART1, USART2 or USART6.
 */
void Enable_UART_Periph(USART_TypeDef *UARTx)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	if(UARTx == USART2)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a1c      	ldr	r2, [pc, #112]	; (80011cc <Enable_UART_Periph+0x7c>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d10f      	bne.n	8001180 <Enable_UART_Periph+0x30>
	{

		Select_UART_Periph(GPIOA, Pin2, AF7);
 8001160:	2207      	movs	r2, #7
 8001162:	2102      	movs	r1, #2
 8001164:	481a      	ldr	r0, [pc, #104]	; (80011d0 <Enable_UART_Periph+0x80>)
 8001166:	f7ff ffbc 	bl	80010e2 <Select_UART_Periph>
		Select_UART_Periph(GPIOD, Pin5, AF7);
 800116a:	2207      	movs	r2, #7
 800116c:	2105      	movs	r1, #5
 800116e:	4819      	ldr	r0, [pc, #100]	; (80011d4 <Enable_UART_Periph+0x84>)
 8001170:	f7ff ffb7 	bl	80010e2 <Select_UART_Periph>

		RCC_APB1Cmd(USART2_Enable, ENABLE);
 8001174:	2101      	movs	r1, #1
 8001176:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800117a:	f7ff feaf 	bl	8000edc <RCC_APB1Cmd>
		Select_UART_Periph(GPIOC, Pin6, AF7);

		RCC_APB2Cmd(USART6_Enable, ENABLE);

	}
}
 800117e:	e020      	b.n	80011c2 <Enable_UART_Periph+0x72>
	else if(UARTx == USART1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a15      	ldr	r2, [pc, #84]	; (80011d8 <Enable_UART_Periph+0x88>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d10e      	bne.n	80011a6 <Enable_UART_Periph+0x56>
		Select_UART_Periph(GPIOA, Pin9, AF7);
 8001188:	2207      	movs	r2, #7
 800118a:	2109      	movs	r1, #9
 800118c:	4810      	ldr	r0, [pc, #64]	; (80011d0 <Enable_UART_Periph+0x80>)
 800118e:	f7ff ffa8 	bl	80010e2 <Select_UART_Periph>
		Select_UART_Periph(GPIOB, Pin6, AF7);
 8001192:	2207      	movs	r2, #7
 8001194:	2106      	movs	r1, #6
 8001196:	4811      	ldr	r0, [pc, #68]	; (80011dc <Enable_UART_Periph+0x8c>)
 8001198:	f7ff ffa3 	bl	80010e2 <Select_UART_Periph>
		RCC_APB2Cmd(USART1_Enable, ENABLE);
 800119c:	2101      	movs	r1, #1
 800119e:	2010      	movs	r0, #16
 80011a0:	f7ff febc 	bl	8000f1c <RCC_APB2Cmd>
}
 80011a4:	e00d      	b.n	80011c2 <Enable_UART_Periph+0x72>
		Select_UART_Periph(GPIOA, Pin11, AF8);
 80011a6:	2208      	movs	r2, #8
 80011a8:	210b      	movs	r1, #11
 80011aa:	4809      	ldr	r0, [pc, #36]	; (80011d0 <Enable_UART_Periph+0x80>)
 80011ac:	f7ff ff99 	bl	80010e2 <Select_UART_Periph>
		Select_UART_Periph(GPIOC, Pin6, AF7);
 80011b0:	2207      	movs	r2, #7
 80011b2:	2106      	movs	r1, #6
 80011b4:	480a      	ldr	r0, [pc, #40]	; (80011e0 <Enable_UART_Periph+0x90>)
 80011b6:	f7ff ff94 	bl	80010e2 <Select_UART_Periph>
		RCC_APB2Cmd(USART6_Enable, ENABLE);
 80011ba:	2101      	movs	r1, #1
 80011bc:	2020      	movs	r0, #32
 80011be:	f7ff fead 	bl	8000f1c <RCC_APB2Cmd>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40004400 	.word	0x40004400
 80011d0:	40020000 	.word	0x40020000
 80011d4:	40020c00 	.word	0x40020c00
 80011d8:	40011000 	.word	0x40011000
 80011dc:	40020400 	.word	0x40020400
 80011e0:	40020800 	.word	0x40020800

080011e4 <Set_BaudRate>:
 *@param	ClockSource: Defines the specific clock source for the MCU which includes SYSCLK,
 *			HCLK, PCLK1, PCLK2.
 *
 */
void Set_BaudRate(RCC_ClockFrequency_t *ClockSource, UART_Config_t *UART_Config)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
	RCC_GetClockFreq(ClockSource);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff feb4 	bl	8000f5c <RCC_GetClockFreq>

	uint32_t periph_clk, over8, usartdiv, baudrate;
	uint32_t mantissa_value, fraction_value, tempvariable = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	623b      	str	r3, [r7, #32]

	over8 = (UART_Config->UARTx->CR1) & (UART_CR1_OVER8_Mask);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001202:	61fb      	str	r3, [r7, #28]
	baudrate = UART_Config->BaudRate;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	61bb      	str	r3, [r7, #24]

	if(UART_Config->UARTx == USART2)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	4a32      	ldr	r2, [pc, #200]	; (80012d8 <Set_BaudRate+0xf4>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d103      	bne.n	800121c <Set_BaudRate+0x38>
	{
		periph_clk = ClockSource->PCLCK1;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
 800121a:	e002      	b.n	8001222 <Set_BaudRate+0x3e>
	}

	else
	{
		periph_clk = ClockSource->PCLCK2;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/*Over-sampling by 16*/
	if(over8 == 0)
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d125      	bne.n	8001274 <Set_BaudRate+0x90>
	{
		usartdiv = (periph_clk * 100)/(16 * baudrate);
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	2264      	movs	r2, #100	; 0x64
 800122c:	fb03 f202 	mul.w	r2, r3, r2
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	fbb2 f3f3 	udiv	r3, r2, r3
 8001238:	617b      	str	r3, [r7, #20]
		mantissa_value = usartdiv/100;
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	4a27      	ldr	r2, [pc, #156]	; (80012dc <Set_BaudRate+0xf8>)
 800123e:	fba2 2303 	umull	r2, r3, r2, r3
 8001242:	095b      	lsrs	r3, r3, #5
 8001244:	613b      	str	r3, [r7, #16]
		tempvariable |= mantissa_value << 4;
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	6a3a      	ldr	r2, [r7, #32]
 800124c:	4313      	orrs	r3, r2
 800124e:	623b      	str	r3, [r7, #32]

		fraction_value = (((usartdiv - (mantissa_value * 100)) * 16) + 50)/100;
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	2264      	movs	r2, #100	; 0x64
 8001254:	fb02 f303 	mul.w	r3, r2, r3
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	011b      	lsls	r3, r3, #4
 800125e:	3332      	adds	r3, #50	; 0x32
 8001260:	4a1e      	ldr	r2, [pc, #120]	; (80012dc <Set_BaudRate+0xf8>)
 8001262:	fba2 2303 	umull	r2, r3, r2, r3
 8001266:	095b      	lsrs	r3, r3, #5
 8001268:	60fb      	str	r3, [r7, #12]
		tempvariable |= fraction_value;
 800126a:	6a3a      	ldr	r2, [r7, #32]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4313      	orrs	r3, r2
 8001270:	623b      	str	r3, [r7, #32]
 8001272:	e024      	b.n	80012be <Set_BaudRate+0xda>
	}

	/*Over-sampling by 8*/
	else
	{
		usartdiv = ((periph_clk * 100)/(8 * baudrate));
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	2264      	movs	r2, #100	; 0x64
 8001278:	fb03 f202 	mul.w	r2, r3, r2
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	fbb2 f3f3 	udiv	r3, r2, r3
 8001284:	617b      	str	r3, [r7, #20]
		mantissa_value = usartdiv/100;
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	4a14      	ldr	r2, [pc, #80]	; (80012dc <Set_BaudRate+0xf8>)
 800128a:	fba2 2303 	umull	r2, r3, r2, r3
 800128e:	095b      	lsrs	r3, r3, #5
 8001290:	613b      	str	r3, [r7, #16]
		tempvariable |= (mantissa_value << 4);
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	011b      	lsls	r3, r3, #4
 8001296:	6a3a      	ldr	r2, [r7, #32]
 8001298:	4313      	orrs	r3, r2
 800129a:	623b      	str	r3, [r7, #32]
		fraction_value = (((usartdiv - (mantissa_value * 100)) * 8) + 50)/100;
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	2264      	movs	r2, #100	; 0x64
 80012a0:	fb02 f303 	mul.w	r3, r2, r3
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	3332      	adds	r3, #50	; 0x32
 80012ac:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <Set_BaudRate+0xf8>)
 80012ae:	fba2 2303 	umull	r2, r3, r2, r3
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	60fb      	str	r3, [r7, #12]
		tempvariable |= fraction_value;
 80012b6:	6a3a      	ldr	r2, [r7, #32]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	623b      	str	r3, [r7, #32]
	}

	UART_Config->UARTx->BRR |= tempvariable;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	6899      	ldr	r1, [r3, #8]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	6a3a      	ldr	r2, [r7, #32]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	609a      	str	r2, [r3, #8]
}
 80012ce:	bf00      	nop
 80012d0:	3728      	adds	r7, #40	; 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40004400 	.word	0x40004400
 80012dc:	51eb851f 	.word	0x51eb851f

080012e0 <UART_Init>:
 *
 * @param	UART_Config_t: This points to the UART_Config_t data structure that holds all of the information for the
 * 			specific UART peripheral.
 */
void UART_Init(UART_Config_t *UART_Config)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	RCC_ClockFrequency_t Clock_Source;

	Enable_UART_Periph(UART_Config->UARTx);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff2f 	bl	8001150 <Enable_UART_Periph>

	/**Configuring UART**/

	/*Select the Word-Length (8 bits/9 bits)*/
	UART_Config->UARTx->CR1 &= ~UART_WORDLEN_9BITS;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	68da      	ldr	r2, [r3, #12]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001300:	60da      	str	r2, [r3, #12]
	UART_Config->UARTx->CR1 |= UART_Config->World_Length;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	885b      	ldrh	r3, [r3, #2]
 800130c:	4619      	mov	r1, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	430a      	orrs	r2, r1
 8001314:	60da      	str	r2, [r3, #12]

	/*Select over-sampling (8 or 16)*/
	UART_Config->UARTx->CR1 &= ~UART_OVERSAMPLING_8;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001324:	60da      	str	r2, [r3, #12]
	UART_Config->UARTx->CR1 |= UART_Config->oversampling;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	68da      	ldr	r2, [r3, #12]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	889b      	ldrh	r3, [r3, #4]
 8001330:	4619      	mov	r1, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	430a      	orrs	r2, r1
 8001338:	60da      	str	r2, [r3, #12]

	/*Select transmission direction (Tx, Rx or Tx & Rx)*/
	UART_Config->UARTx->CR1 &= ~UART_MODE_TXRX;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	f022 020c 	bic.w	r2, r2, #12
 8001348:	60da      	str	r2, [r3, #12]
	UART_Config->UARTx->CR1 |= UART_Config->Mode;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	899b      	ldrh	r3, [r3, #12]
 8001354:	4619      	mov	r1, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	430a      	orrs	r2, r1
 800135c:	60da      	str	r2, [r3, #12]

	/*Select parity (odd or even)*/
	UART_Config->UARTx->CR1 &= ~UART_PARITY_ODD;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800136c:	60da      	str	r2, [r3, #12]
	UART_Config->UARTx->CR1 |= UART_Config->Parity;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	88db      	ldrh	r3, [r3, #6]
 8001378:	4619      	mov	r1, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	430a      	orrs	r2, r1
 8001380:	60da      	str	r2, [r3, #12]

	/*Select number of stop bits (0.5, 1, 1.5, 2)*/
	UART_Config->UARTx->CR2 &= ~UART_STOPBITS_1_5;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001390:	611a      	str	r2, [r3, #16]
	UART_Config->UARTx->CR2 |= UART_Config->Stop_Bits;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	691a      	ldr	r2, [r3, #16]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	611a      	str	r2, [r3, #16]

	/*Calculate and set baud-rate*/
	Set_BaudRate(&Clock_Source, UART_Config);
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff19 	bl	80011e4 <Set_BaudRate>

	/*Enable UART*/
	UART_Config->UARTx->CR1 |= UART_CR1_Enable;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013c0:	60da      	str	r2, [r3, #12]

}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <WriteByte>:
 * 			specific UART peripheral.
 *
 * @param	data: This specifies the data the user wishes to transmit.
 */
void WriteByte(UART_Config_t *UART_Config, uint16_t data)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	460b      	mov	r3, r1
 80013d4:	807b      	strh	r3, [r7, #2]
	while(!(UART_Config->UARTx->SR) && (UART_SR_TXE_Mask)){}
 80013d6:	bf00      	nop
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0fa      	beq.n	80013d8 <WriteByte+0xe>

	//Word length is 9 bits
	if(UART_Config->UARTx->CR1 & UART_WORDLEN_9BITS)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d01a      	beq.n	8001426 <WriteByte+0x5c>
	{
		//If parity is enabled 8 bits of data are sent with the 9th bit being the parity bit
		if((UART_Config->UARTx->CR1 & UART_PARITY_EVEN) || (UART_Config->UARTx->CR1 & UART_PARITY_ODD))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d106      	bne.n	800140c <WriteByte+0x42>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <WriteByte+0x4e>
		{
			UART_Config->UARTx->DR = ((uint8_t)data);
 800140c:	887b      	ldrh	r3, [r7, #2]
 800140e:	b2da      	uxtb	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	e021      	b.n	800145c <WriteByte+0x92>
		}

		//If parity is disabled then all 9 bits of data will be read as information
		else
		{
			UART_Config->UARTx->DR = (data & 0x1FF);
 8001418:	887a      	ldrh	r2, [r7, #2]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001422:	605a      	str	r2, [r3, #4]
		else
		{
			UART_Config->UARTx->DR = ((uint8_t)data);
		}
	}
}
 8001424:	e01a      	b.n	800145c <WriteByte+0x92>
		if((UART_Config->UARTx->CR1 & UART_PARITY_EVEN) || (UART_Config->UARTx->CR1 & UART_PARITY_ODD))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001430:	2b00      	cmp	r3, #0
 8001432:	d106      	bne.n	8001442 <WriteByte+0x78>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800143e:	2b00      	cmp	r3, #0
 8001440:	d006      	beq.n	8001450 <WriteByte+0x86>
			UART_Config->UARTx->DR = (data & 0x7F);
 8001442:	887a      	ldrh	r2, [r7, #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	e005      	b.n	800145c <WriteByte+0x92>
			UART_Config->UARTx->DR = ((uint8_t)data);
 8001450:	887b      	ldrh	r3, [r7, #2]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	605a      	str	r2, [r3, #4]
}
 800145a:	e7ff      	b.n	800145c <WriteByte+0x92>
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <PrintData>:
 * 			specific UART peripheral.
 *
 * @param	ptr: This points to a character array and allows the user to pass messages to the UART peripheral.
 */
int PrintData(UART_Config_t *UART_Config, char *ptr)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
	while(*ptr)
 8001472:	e008      	b.n	8001486 <PrintData+0x1e>
	{
		WriteByte(UART_Config, *ptr++);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	603a      	str	r2, [r7, #0]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	b29b      	uxth	r3, r3
 800147e:	4619      	mov	r1, r3
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ffa2 	bl	80013ca <WriteByte>
	while(*ptr)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f2      	bne.n	8001474 <PrintData+0xc>
	}
	return 1;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <main>:
void I2C1_EV_IRQHandler();

const uint8_t slave_address = 0b1101000;

int main()
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af02      	add	r7, sp, #8
	uint8_t output_data[7] = {0x00, 5, 14, 70, 2, 8, 18, 36};
 800149e:	4a21      	ldr	r2, [pc, #132]	; (8001524 <main+0x8c>)
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014a8:	6018      	str	r0, [r3, #0]
 80014aa:	3304      	adds	r3, #4
 80014ac:	8019      	strh	r1, [r3, #0]
 80014ae:	3302      	adds	r3, #2
 80014b0:	0c0a      	lsrs	r2, r1, #16
 80014b2:	701a      	strb	r2, [r3, #0]
	uint8_t output_register_address[1] = {0x00};
 80014b4:	2300      	movs	r3, #0
 80014b6:	733b      	strb	r3, [r7, #12]
	uint8_t input_data[7];

	//Configure UART settings
	UART_Config(&UART2, USART2, UART_MODE_TX, 115200);
 80014b8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80014bc:	2208      	movs	r2, #8
 80014be:	491a      	ldr	r1, [pc, #104]	; (8001528 <main+0x90>)
 80014c0:	481a      	ldr	r0, [pc, #104]	; (800152c <main+0x94>)
 80014c2:	f7ff fdeb 	bl	800109c <UART_Config>

	//Initilize the UART
	UART_Init(&UART2);
 80014c6:	4819      	ldr	r0, [pc, #100]	; (800152c <main+0x94>)
 80014c8:	f7ff ff0a 	bl	80012e0 <UART_Init>

	I2C_Config(&I2C_Example, I2C1, SM_100KHZ, FM_DUTY_2, Pin8, Pin9);
 80014cc:	2309      	movs	r3, #9
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	2308      	movs	r3, #8
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	2300      	movs	r3, #0
 80014d6:	4a16      	ldr	r2, [pc, #88]	; (8001530 <main+0x98>)
 80014d8:	4916      	ldr	r1, [pc, #88]	; (8001534 <main+0x9c>)
 80014da:	4817      	ldr	r0, [pc, #92]	; (8001538 <main+0xa0>)
 80014dc:	f7ff f93f 	bl	800075e <I2C_Config>

	I2C_DeInit(&I2C_Example);
 80014e0:	4815      	ldr	r0, [pc, #84]	; (8001538 <main+0xa0>)
 80014e2:	f7ff f959 	bl	8000798 <I2C_DeInit>

	I2C_Init(&I2C_Example);
 80014e6:	4814      	ldr	r0, [pc, #80]	; (8001538 <main+0xa0>)
 80014e8:	f7ff f996 	bl	8000818 <I2C_Init>

	//I2C_MasterTransmit(&I2C_Example, output_data, slave_address, 8, I2C_Restart);
	I2C_MasterTransmitIT(&I2C_Example, output_data, slave_address, 8, I2C_No_Restart);
 80014ec:	2268      	movs	r2, #104	; 0x68
 80014ee:	f107 0110 	add.w	r1, r7, #16
 80014f2:	2300      	movs	r3, #0
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2308      	movs	r3, #8
 80014f8:	480f      	ldr	r0, [pc, #60]	; (8001538 <main+0xa0>)
 80014fa:	f7ff fb5d 	bl	8000bb8 <I2C_MasterTransmitIT>

	//I2C_MasterTransmit(&I2C_Example, output_register_address, slave_address, 1, I2C_Restart);
	I2C_MasterTransmitIT(&I2C_Example, output_register_address, slave_address, 1, I2C_No_Restart);
 80014fe:	2268      	movs	r2, #104	; 0x68
 8001500:	f107 010c 	add.w	r1, r7, #12
 8001504:	2300      	movs	r3, #0
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2301      	movs	r3, #1
 800150a:	480b      	ldr	r0, [pc, #44]	; (8001538 <main+0xa0>)
 800150c:	f7ff fb54 	bl	8000bb8 <I2C_MasterTransmitIT>

	//I2C_MasterRecieve(&I2C_Example, input_data, slave_address, 7, I2C_No_Restart);
	I2C_MasterRecieveIT(&I2C_Example, input_data, slave_address, 7, I2C_No_Restart);
 8001510:	2268      	movs	r2, #104	; 0x68
 8001512:	1d39      	adds	r1, r7, #4
 8001514:	2300      	movs	r3, #0
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2307      	movs	r3, #7
 800151a:	4807      	ldr	r0, [pc, #28]	; (8001538 <main+0xa0>)
 800151c:	f7ff fb92 	bl	8000c44 <I2C_MasterRecieveIT>
		//PrintData(&UART2, "\n\rData: \n\r\n\r");
		WriteByte(&UART2, input_data[i]);
	}*/


	while(1)
 8001520:	e7fe      	b.n	8001520 <main+0x88>
 8001522:	bf00      	nop
 8001524:	080017c4 	.word	0x080017c4
 8001528:	40004400 	.word	0x40004400
 800152c:	2000005c 	.word	0x2000005c
 8001530:	000186a0 	.word	0x000186a0
 8001534:	40005400 	.word	0x40005400
 8001538:	2000003c 	.word	0x2000003c

0800153c <I2C1_EV_IRQHandler>:

	}
}

void I2C1_EV_IRQHandler()
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	IRQ_Event_Handler(&I2C_Example, &UART2);
 8001540:	4902      	ldr	r1, [pc, #8]	; (800154c <I2C1_EV_IRQHandler+0x10>)
 8001542:	4803      	ldr	r0, [pc, #12]	; (8001550 <I2C1_EV_IRQHandler+0x14>)
 8001544:	f7ff fbd0 	bl	8000ce8 <IRQ_Event_Handler>
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000005c 	.word	0x2000005c
 8001550:	2000003c 	.word	0x2000003c

08001554 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001554:	480d      	ldr	r0, [pc, #52]	; (800158c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001556:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001558:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800155c:	480c      	ldr	r0, [pc, #48]	; (8001590 <LoopForever+0x6>)
  ldr r1, =_edata
 800155e:	490d      	ldr	r1, [pc, #52]	; (8001594 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001560:	4a0d      	ldr	r2, [pc, #52]	; (8001598 <LoopForever+0xe>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001564:	e002      	b.n	800156c <LoopCopyDataInit>

08001566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156a:	3304      	adds	r3, #4

0800156c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800156c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001570:	d3f9      	bcc.n	8001566 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001572:	4a0a      	ldr	r2, [pc, #40]	; (800159c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001574:	4c0a      	ldr	r4, [pc, #40]	; (80015a0 <LoopForever+0x16>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001578:	e001      	b.n	800157e <LoopFillZerobss>

0800157a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800157c:	3204      	adds	r2, #4

0800157e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001580:	d3fb      	bcc.n	800157a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001582:	f000 f811 	bl	80015a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001586:	f7ff ff87 	bl	8001498 <main>

0800158a <LoopForever>:

LoopForever:
  b LoopForever
 800158a:	e7fe      	b.n	800158a <LoopForever>
  ldr   r0, =_estack
 800158c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001594:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001598:	080017d4 	.word	0x080017d4
  ldr r2, =_sbss
 800159c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80015a0:	20000070 	.word	0x20000070

080015a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC_IRQHandler>
	...

080015a8 <__libc_init_array>:
 80015a8:	b570      	push	{r4, r5, r6, lr}
 80015aa:	4d0d      	ldr	r5, [pc, #52]	; (80015e0 <__libc_init_array+0x38>)
 80015ac:	4c0d      	ldr	r4, [pc, #52]	; (80015e4 <__libc_init_array+0x3c>)
 80015ae:	1b64      	subs	r4, r4, r5
 80015b0:	10a4      	asrs	r4, r4, #2
 80015b2:	2600      	movs	r6, #0
 80015b4:	42a6      	cmp	r6, r4
 80015b6:	d109      	bne.n	80015cc <__libc_init_array+0x24>
 80015b8:	4d0b      	ldr	r5, [pc, #44]	; (80015e8 <__libc_init_array+0x40>)
 80015ba:	4c0c      	ldr	r4, [pc, #48]	; (80015ec <__libc_init_array+0x44>)
 80015bc:	f000 f818 	bl	80015f0 <_init>
 80015c0:	1b64      	subs	r4, r4, r5
 80015c2:	10a4      	asrs	r4, r4, #2
 80015c4:	2600      	movs	r6, #0
 80015c6:	42a6      	cmp	r6, r4
 80015c8:	d105      	bne.n	80015d6 <__libc_init_array+0x2e>
 80015ca:	bd70      	pop	{r4, r5, r6, pc}
 80015cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80015d0:	4798      	blx	r3
 80015d2:	3601      	adds	r6, #1
 80015d4:	e7ee      	b.n	80015b4 <__libc_init_array+0xc>
 80015d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80015da:	4798      	blx	r3
 80015dc:	3601      	adds	r6, #1
 80015de:	e7f2      	b.n	80015c6 <__libc_init_array+0x1e>
 80015e0:	080017cc 	.word	0x080017cc
 80015e4:	080017cc 	.word	0x080017cc
 80015e8:	080017cc 	.word	0x080017cc
 80015ec:	080017d0 	.word	0x080017d0

080015f0 <_init>:
 80015f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015f2:	bf00      	nop
 80015f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015f6:	bc08      	pop	{r3}
 80015f8:	469e      	mov	lr, r3
 80015fa:	4770      	bx	lr

080015fc <_fini>:
 80015fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015fe:	bf00      	nop
 8001600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001602:	bc08      	pop	{r3}
 8001604:	469e      	mov	lr, r3
 8001606:	4770      	bx	lr
