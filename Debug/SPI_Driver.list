
SPI_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b78  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d0c  08000d0c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d0c  08000d0c  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000d0c  08000d0c  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d0c  08000d0c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d0c  08000d0c  00010d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d10  08000d10  00010d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000d14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000020  08000d34  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08000d34  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .debug_info   000018ce  00000000  00000000  00020093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000072a  00000000  00000000  00021961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000158  00000000  00000000  00022090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f1  00000000  00000000  000221e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ee22  00000000  00000000  000222d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002210  00000000  00000000  000310fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005524b  00000000  00000000  0003330b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000450  00000000  00000000  00088558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000889a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000020 	.word	0x20000020
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000cf4 	.word	0x08000cf4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000024 	.word	0x20000024
 80001d0:	08000cf4 	.word	0x08000cf4

080001d4 <GPIO_Config>:
 * 			0x0		or		GPIO_PUPD_None
 * 			0x1		or		GPIO_PullUp
 * 			0x2		or		GPIO_PullDown
 */
void GPIO_Config(GPIO_Config_t *GPIO_Config, GPIO_TypeDef *Port, uint8_t Pin, uint8_t Mode, uint8_t OType, uint8_t OSpeed, uint8_t PUPD)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	4611      	mov	r1, r2
 80001e0:	461a      	mov	r2, r3
 80001e2:	460b      	mov	r3, r1
 80001e4:	71fb      	strb	r3, [r7, #7]
 80001e6:	4613      	mov	r3, r2
 80001e8:	71bb      	strb	r3, [r7, #6]
	GPIO_Config->GPIO_Pin = Pin;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	79fa      	ldrb	r2, [r7, #7]
 80001ee:	701a      	strb	r2, [r3, #0]
	GPIO_Config->GPIO_Port = Port;
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	68ba      	ldr	r2, [r7, #8]
 80001f4:	609a      	str	r2, [r3, #8]
	GPIO_Config->GPIO_MODE = Mode;
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	79ba      	ldrb	r2, [r7, #6]
 80001fa:	705a      	strb	r2, [r3, #1]
	GPIO_Config->GPIO_OTYPE = OType;
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	7e3a      	ldrb	r2, [r7, #24]
 8000200:	709a      	strb	r2, [r3, #2]
	GPIO_Config->GPIO_OSPEED = OSpeed;
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	7f3a      	ldrb	r2, [r7, #28]
 8000206:	70da      	strb	r2, [r3, #3]
	GPIO_Config->GPIO_PUPD = PUPD;
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800020e:	711a      	strb	r2, [r3, #4]
}
 8000210:	bf00      	nop
 8000212:	3714      	adds	r7, #20
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr

0800021c <GPIO_PeriphClck>:
 * @param	GPIOx: Defines the specific GPIO port, where x can range from A - E, or H.
 *
 * @param	state: Specifies whether to enable or disable the peripheral.
 */
void GPIO_PeriphClck(GPIO_TypeDef *GPIOx, FunctionalState state)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	460b      	mov	r3, r1
 8000226:	70fb      	strb	r3, [r7, #3]
	if(state == ENABLE)
 8000228:	78fb      	ldrb	r3, [r7, #3]
 800022a:	2b01      	cmp	r3, #1
 800022c:	d135      	bne.n	800029a <GPIO_PeriphClck+0x7e>
	{
		if(GPIOx == GPIOA)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4a36      	ldr	r2, [pc, #216]	; (800030c <GPIO_PeriphClck+0xf0>)
 8000232:	4293      	cmp	r3, r2
 8000234:	d104      	bne.n	8000240 <GPIO_PeriphClck+0x24>
		{
			RCC_AHB1Cmd(GPIOA_Enable, ENABLE);
 8000236:	2101      	movs	r1, #1
 8000238:	2001      	movs	r0, #1
 800023a:	f000 f9dd 	bl	80005f8 <RCC_AHB1Cmd>
			RCC_AHB1Cmd(GPIOH_Enable, DISABLE);
		}

	}

}
 800023e:	e061      	b.n	8000304 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOB)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4a33      	ldr	r2, [pc, #204]	; (8000310 <GPIO_PeriphClck+0xf4>)
 8000244:	4293      	cmp	r3, r2
 8000246:	d104      	bne.n	8000252 <GPIO_PeriphClck+0x36>
			RCC_AHB1Cmd(GPIOB_Enable, ENABLE);
 8000248:	2101      	movs	r1, #1
 800024a:	2002      	movs	r0, #2
 800024c:	f000 f9d4 	bl	80005f8 <RCC_AHB1Cmd>
}
 8000250:	e058      	b.n	8000304 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOC)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a2f      	ldr	r2, [pc, #188]	; (8000314 <GPIO_PeriphClck+0xf8>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d104      	bne.n	8000264 <GPIO_PeriphClck+0x48>
			RCC_AHB1Cmd(GPIOC_Enable, ENABLE);
 800025a:	2101      	movs	r1, #1
 800025c:	2004      	movs	r0, #4
 800025e:	f000 f9cb 	bl	80005f8 <RCC_AHB1Cmd>
}
 8000262:	e04f      	b.n	8000304 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOD)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	4a2c      	ldr	r2, [pc, #176]	; (8000318 <GPIO_PeriphClck+0xfc>)
 8000268:	4293      	cmp	r3, r2
 800026a:	d104      	bne.n	8000276 <GPIO_PeriphClck+0x5a>
			RCC_AHB1Cmd(GPIOD_Enable, ENABLE);
 800026c:	2101      	movs	r1, #1
 800026e:	2008      	movs	r0, #8
 8000270:	f000 f9c2 	bl	80005f8 <RCC_AHB1Cmd>
}
 8000274:	e046      	b.n	8000304 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOE)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4a28      	ldr	r2, [pc, #160]	; (800031c <GPIO_PeriphClck+0x100>)
 800027a:	4293      	cmp	r3, r2
 800027c:	d104      	bne.n	8000288 <GPIO_PeriphClck+0x6c>
			RCC_AHB1Cmd(GPIOE_Enable, ENABLE);
 800027e:	2101      	movs	r1, #1
 8000280:	2010      	movs	r0, #16
 8000282:	f000 f9b9 	bl	80005f8 <RCC_AHB1Cmd>
}
 8000286:	e03d      	b.n	8000304 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOH)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4a25      	ldr	r2, [pc, #148]	; (8000320 <GPIO_PeriphClck+0x104>)
 800028c:	4293      	cmp	r3, r2
 800028e:	d139      	bne.n	8000304 <GPIO_PeriphClck+0xe8>
			RCC_AHB1Cmd(GPIOH_Enable, ENABLE);
 8000290:	2101      	movs	r1, #1
 8000292:	2080      	movs	r0, #128	; 0x80
 8000294:	f000 f9b0 	bl	80005f8 <RCC_AHB1Cmd>
}
 8000298:	e034      	b.n	8000304 <GPIO_PeriphClck+0xe8>
		if(GPIOx == GPIOA)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a1b      	ldr	r2, [pc, #108]	; (800030c <GPIO_PeriphClck+0xf0>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d104      	bne.n	80002ac <GPIO_PeriphClck+0x90>
			RCC_AHB1Cmd(GPIOA_Enable, DISABLE);
 80002a2:	2100      	movs	r1, #0
 80002a4:	2001      	movs	r0, #1
 80002a6:	f000 f9a7 	bl	80005f8 <RCC_AHB1Cmd>
}
 80002aa:	e02b      	b.n	8000304 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOB)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	4a18      	ldr	r2, [pc, #96]	; (8000310 <GPIO_PeriphClck+0xf4>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d104      	bne.n	80002be <GPIO_PeriphClck+0xa2>
			RCC_AHB1Cmd(GPIOB_Enable, DISABLE);
 80002b4:	2100      	movs	r1, #0
 80002b6:	2002      	movs	r0, #2
 80002b8:	f000 f99e 	bl	80005f8 <RCC_AHB1Cmd>
}
 80002bc:	e022      	b.n	8000304 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOC)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4a14      	ldr	r2, [pc, #80]	; (8000314 <GPIO_PeriphClck+0xf8>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d104      	bne.n	80002d0 <GPIO_PeriphClck+0xb4>
			RCC_AHB1Cmd(GPIOC_Enable, DISABLE);
 80002c6:	2100      	movs	r1, #0
 80002c8:	2004      	movs	r0, #4
 80002ca:	f000 f995 	bl	80005f8 <RCC_AHB1Cmd>
}
 80002ce:	e019      	b.n	8000304 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOD)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4a11      	ldr	r2, [pc, #68]	; (8000318 <GPIO_PeriphClck+0xfc>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d104      	bne.n	80002e2 <GPIO_PeriphClck+0xc6>
			RCC_AHB1Cmd(GPIOD_Enable, DISABLE);
 80002d8:	2100      	movs	r1, #0
 80002da:	2008      	movs	r0, #8
 80002dc:	f000 f98c 	bl	80005f8 <RCC_AHB1Cmd>
}
 80002e0:	e010      	b.n	8000304 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOE)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4a0d      	ldr	r2, [pc, #52]	; (800031c <GPIO_PeriphClck+0x100>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d104      	bne.n	80002f4 <GPIO_PeriphClck+0xd8>
			RCC_AHB1Cmd(GPIOE_Enable, DISABLE);
 80002ea:	2100      	movs	r1, #0
 80002ec:	2010      	movs	r0, #16
 80002ee:	f000 f983 	bl	80005f8 <RCC_AHB1Cmd>
}
 80002f2:	e007      	b.n	8000304 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOH)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4a0a      	ldr	r2, [pc, #40]	; (8000320 <GPIO_PeriphClck+0x104>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d103      	bne.n	8000304 <GPIO_PeriphClck+0xe8>
			RCC_AHB1Cmd(GPIOH_Enable, DISABLE);
 80002fc:	2100      	movs	r1, #0
 80002fe:	2080      	movs	r0, #128	; 0x80
 8000300:	f000 f97a 	bl	80005f8 <RCC_AHB1Cmd>
}
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	40020000 	.word	0x40020000
 8000310:	40020400 	.word	0x40020400
 8000314:	40020800 	.word	0x40020800
 8000318:	40020c00 	.word	0x40020c00
 800031c:	40021000 	.word	0x40021000
 8000320:	40021c00 	.word	0x40021c00

08000324 <GPIO_AlternateFunctionConfig>:
 * @param	alt_function: This will take in the alternate function value that the user wishes to use.
 * 			The specific alternate function values and their functions are present in the data sheet.
 * 			The inputs for this function are AF0 - AF15;
 */
void GPIO_AlternateFunctionConfig(GPIO_Config_t *GPIO_Config, AFR_Config_t alt_function)
{
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	460b      	mov	r3, r1
 800032e:	70fb      	strb	r3, [r7, #3]
	uint8_t pin = GPIO_Config->GPIO_Pin;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	73fb      	strb	r3, [r7, #15]
	uint8_t alt_function_array = pin/8;
 8000336:	7bfb      	ldrb	r3, [r7, #15]
 8000338:	08db      	lsrs	r3, r3, #3
 800033a:	73bb      	strb	r3, [r7, #14]

	if(alt_function_array == 1)
 800033c:	7bbb      	ldrb	r3, [r7, #14]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d102      	bne.n	8000348 <GPIO_AlternateFunctionConfig+0x24>
	{
		pin -= 8;
 8000342:	7bfb      	ldrb	r3, [r7, #15]
 8000344:	3b08      	subs	r3, #8
 8000346:	73fb      	strb	r3, [r7, #15]
	}

	GPIO_Config->GPIO_Port->AFR[alt_function_array] &= ~(AF15 << (pin * 4));
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	7bba      	ldrb	r2, [r7, #14]
 800034e:	3208      	adds	r2, #8
 8000350:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000354:	7bfb      	ldrb	r3, [r7, #15]
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	220f      	movs	r2, #15
 800035a:	fa02 f303 	lsl.w	r3, r2, r3
 800035e:	43db      	mvns	r3, r3
 8000360:	4618      	mov	r0, r3
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	7bba      	ldrb	r2, [r7, #14]
 8000368:	4001      	ands	r1, r0
 800036a:	3208      	adds	r2, #8
 800036c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GPIO_Config->GPIO_Port->AFR[alt_function_array] |= (alt_function << (pin * 4));
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	7bba      	ldrb	r2, [r7, #14]
 8000376:	3208      	adds	r2, #8
 8000378:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800037c:	78fa      	ldrb	r2, [r7, #3]
 800037e:	7bfb      	ldrb	r3, [r7, #15]
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	fa02 f303 	lsl.w	r3, r2, r3
 8000386:	4618      	mov	r0, r3
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	7bba      	ldrb	r2, [r7, #14]
 800038e:	4301      	orrs	r1, r0
 8000390:	3208      	adds	r2, #8
 8000392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000396:	bf00      	nop
 8000398:	3714      	adds	r7, #20
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
	...

080003a4 <GPIO_Init>:
 *
 * @param	GPIO_Config: pointer to the GPIO_Config_t data structure that contains the
 * 			configuration parameters for the specific GPIO pin.
 */
void GPIO_Init(GPIO_Config_t *GPIO_Config, AFR_Config_t alt_function)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	460b      	mov	r3, r1
 80003ae:	70fb      	strb	r3, [r7, #3]
	uint8_t pin = GPIO_Config->GPIO_Pin;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	73fb      	strb	r3, [r7, #15]
	uint32_t temp_variable;

	GPIO_PeriphClck(GPIO_Config->GPIO_Port, ENABLE);
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	689b      	ldr	r3, [r3, #8]
 80003ba:	2101      	movs	r1, #1
 80003bc:	4618      	mov	r0, r3
 80003be:	f7ff ff2d 	bl	800021c <GPIO_PeriphClck>

	if(GPIO_Config->GPIO_Pin == AllPins)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	2b10      	cmp	r3, #16
 80003c8:	f040 8094 	bne.w	80004f4 <GPIO_Init+0x150>
	{
		if(GPIO_Config->GPIO_Port == GPIOA)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	4a88      	ldr	r2, [pc, #544]	; (80005f4 <GPIO_Init+0x250>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d112      	bne.n	80003fc <GPIO_Init+0x58>
		{
			/*Use the lock configuration to lock PA13 and PA14*/
			GPIO_Config->GPIO_Port->LCKR = LCKR_1_Pin13_Pin14;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	689b      	ldr	r3, [r3, #8]
 80003da:	f44f 32b0 	mov.w	r2, #90112	; 0x16000
 80003de:	61da      	str	r2, [r3, #28]
			GPIO_Config->GPIO_Port->LCKR = LCKR_0_Pin13_Pin14;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80003e8:	61da      	str	r2, [r3, #28]
			GPIO_Config->GPIO_Port->LCKR = LCKR_1_Pin13_Pin14;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	f44f 32b0 	mov.w	r2, #90112	; 0x16000
 80003f2:	61da      	str	r2, [r3, #28]
			temp_variable = GPIO_Config->GPIO_Port->LCKR;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	689b      	ldr	r3, [r3, #8]
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	60bb      	str	r3, [r7, #8]
		}

		/*Used to set each pin is AllPins is set by user*/
		for(pin = 0; pin < 16; pin++)
 80003fc:	2300      	movs	r3, #0
 80003fe:	73fb      	strb	r3, [r7, #15]
 8000400:	e074      	b.n	80004ec <GPIO_Init+0x148>
		{
			GPIO_Config->GPIO_Port->MODER &= ~(GPIO_Mode_Reset << (pin * 2));
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	689b      	ldr	r3, [r3, #8]
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	7bfb      	ldrb	r3, [r7, #15]
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	2103      	movs	r1, #3
 800040e:	fa01 f303 	lsl.w	r3, r1, r3
 8000412:	43db      	mvns	r3, r3
 8000414:	4619      	mov	r1, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	689b      	ldr	r3, [r3, #8]
 800041a:	400a      	ands	r2, r1
 800041c:	601a      	str	r2, [r3, #0]
			GPIO_Config->GPIO_Port->MODER |= ((GPIO_Config->GPIO_MODE) << (pin * 2));
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	689b      	ldr	r3, [r3, #8]
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	785b      	ldrb	r3, [r3, #1]
 8000428:	4619      	mov	r1, r3
 800042a:	7bfb      	ldrb	r3, [r7, #15]
 800042c:	005b      	lsls	r3, r3, #1
 800042e:	fa01 f303 	lsl.w	r3, r1, r3
 8000432:	4619      	mov	r1, r3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	430a      	orrs	r2, r1
 800043a:	601a      	str	r2, [r3, #0]

			GPIO_Config->GPIO_Port->OTYPER &= ~(GPIO_OType_Reset << pin);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	689b      	ldr	r3, [r3, #8]
 8000440:	685a      	ldr	r2, [r3, #4]
 8000442:	7bfb      	ldrb	r3, [r7, #15]
 8000444:	2101      	movs	r1, #1
 8000446:	fa01 f303 	lsl.w	r3, r1, r3
 800044a:	43db      	mvns	r3, r3
 800044c:	4619      	mov	r1, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	689b      	ldr	r3, [r3, #8]
 8000452:	400a      	ands	r2, r1
 8000454:	605a      	str	r2, [r3, #4]
			GPIO_Config->GPIO_Port->OTYPER |= ((GPIO_Config->GPIO_OTYPE) << pin);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	689b      	ldr	r3, [r3, #8]
 800045a:	685a      	ldr	r2, [r3, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	789b      	ldrb	r3, [r3, #2]
 8000460:	4619      	mov	r1, r3
 8000462:	7bfb      	ldrb	r3, [r7, #15]
 8000464:	fa01 f303 	lsl.w	r3, r1, r3
 8000468:	4619      	mov	r1, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	689b      	ldr	r3, [r3, #8]
 800046e:	430a      	orrs	r2, r1
 8000470:	605a      	str	r2, [r3, #4]

			GPIO_Config->GPIO_Port->OSPEEDR &= ~(GPIO_OSpeed_Reset << (pin * 2));
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	689b      	ldr	r3, [r3, #8]
 8000476:	689a      	ldr	r2, [r3, #8]
 8000478:	7bfb      	ldrb	r3, [r7, #15]
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	2101      	movs	r1, #1
 800047e:	fa01 f303 	lsl.w	r3, r1, r3
 8000482:	43db      	mvns	r3, r3
 8000484:	4619      	mov	r1, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	689b      	ldr	r3, [r3, #8]
 800048a:	400a      	ands	r2, r1
 800048c:	609a      	str	r2, [r3, #8]
			GPIO_Config->GPIO_Port->OSPEEDR |= ((GPIO_Config->GPIO_OSPEED) << (pin * 2));
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	689b      	ldr	r3, [r3, #8]
 8000492:	689a      	ldr	r2, [r3, #8]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	78db      	ldrb	r3, [r3, #3]
 8000498:	4619      	mov	r1, r3
 800049a:	7bfb      	ldrb	r3, [r7, #15]
 800049c:	005b      	lsls	r3, r3, #1
 800049e:	fa01 f303 	lsl.w	r3, r1, r3
 80004a2:	4619      	mov	r1, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	689b      	ldr	r3, [r3, #8]
 80004a8:	430a      	orrs	r2, r1
 80004aa:	609a      	str	r2, [r3, #8]

			GPIO_Config->GPIO_Port->PUPDR &= ~(GPIO_PUPD_Reset << (pin * 2));
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	689b      	ldr	r3, [r3, #8]
 80004b0:	68da      	ldr	r2, [r3, #12]
 80004b2:	7bfb      	ldrb	r3, [r7, #15]
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	2103      	movs	r1, #3
 80004b8:	fa01 f303 	lsl.w	r3, r1, r3
 80004bc:	43db      	mvns	r3, r3
 80004be:	4619      	mov	r1, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	400a      	ands	r2, r1
 80004c6:	60da      	str	r2, [r3, #12]
			GPIO_Config->GPIO_Port->PUPDR |= ((GPIO_Config->GPIO_PUPD) << (pin * 2));
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	68da      	ldr	r2, [r3, #12]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	791b      	ldrb	r3, [r3, #4]
 80004d2:	4619      	mov	r1, r3
 80004d4:	7bfb      	ldrb	r3, [r7, #15]
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	fa01 f303 	lsl.w	r3, r1, r3
 80004dc:	4619      	mov	r1, r3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	430a      	orrs	r2, r1
 80004e4:	60da      	str	r2, [r3, #12]
		for(pin = 0; pin < 16; pin++)
 80004e6:	7bfb      	ldrb	r3, [r7, #15]
 80004e8:	3301      	adds	r3, #1
 80004ea:	73fb      	strb	r3, [r7, #15]
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
 80004ee:	2b0f      	cmp	r3, #15
 80004f0:	d987      	bls.n	8000402 <GPIO_Init+0x5e>

		GPIO_Config->GPIO_Port->PUPDR &= ~(GPIO_PUPD_Reset << (pin * 2));
		GPIO_Config->GPIO_Port->PUPDR |= ((GPIO_Config->GPIO_PUPD) << (pin * 2));
	}

}
 80004f2:	e07a      	b.n	80005ea <GPIO_Init+0x246>
		GPIO_Config->GPIO_Port->MODER &= ~(GPIO_Mode_Reset << (pin * 2));
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	7bfb      	ldrb	r3, [r7, #15]
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	2103      	movs	r1, #3
 8000500:	fa01 f303 	lsl.w	r3, r1, r3
 8000504:	43db      	mvns	r3, r3
 8000506:	4619      	mov	r1, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	689b      	ldr	r3, [r3, #8]
 800050c:	400a      	ands	r2, r1
 800050e:	601a      	str	r2, [r3, #0]
		GPIO_Config->GPIO_Port->MODER |= ((GPIO_Config->GPIO_MODE) << (pin * 2));
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	689b      	ldr	r3, [r3, #8]
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	785b      	ldrb	r3, [r3, #1]
 800051a:	4619      	mov	r1, r3
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	fa01 f303 	lsl.w	r3, r1, r3
 8000524:	4619      	mov	r1, r3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	689b      	ldr	r3, [r3, #8]
 800052a:	430a      	orrs	r2, r1
 800052c:	601a      	str	r2, [r3, #0]
		if(GPIO_Config->GPIO_MODE == GPIO_AF)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	785b      	ldrb	r3, [r3, #1]
 8000532:	2b02      	cmp	r3, #2
 8000534:	d104      	bne.n	8000540 <GPIO_Init+0x19c>
			GPIO_AlternateFunctionConfig(GPIO_Config, alt_function);
 8000536:	78fb      	ldrb	r3, [r7, #3]
 8000538:	4619      	mov	r1, r3
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f7ff fef2 	bl	8000324 <GPIO_AlternateFunctionConfig>
		GPIO_Config->GPIO_Port->OTYPER &= ~(GPIO_OType_Reset << pin);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	685a      	ldr	r2, [r3, #4]
 8000546:	7bfb      	ldrb	r3, [r7, #15]
 8000548:	2101      	movs	r1, #1
 800054a:	fa01 f303 	lsl.w	r3, r1, r3
 800054e:	43db      	mvns	r3, r3
 8000550:	4619      	mov	r1, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	400a      	ands	r2, r1
 8000558:	605a      	str	r2, [r3, #4]
		GPIO_Config->GPIO_Port->OTYPER |= ((GPIO_Config->GPIO_OTYPE) << pin);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	685a      	ldr	r2, [r3, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	789b      	ldrb	r3, [r3, #2]
 8000564:	4619      	mov	r1, r3
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	fa01 f303 	lsl.w	r3, r1, r3
 800056c:	4619      	mov	r1, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	430a      	orrs	r2, r1
 8000574:	605a      	str	r2, [r3, #4]
		GPIO_Config->GPIO_Port->OSPEEDR &= ~(GPIO_OSpeed_Reset << (pin * 2));
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	689a      	ldr	r2, [r3, #8]
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	2101      	movs	r1, #1
 8000582:	fa01 f303 	lsl.w	r3, r1, r3
 8000586:	43db      	mvns	r3, r3
 8000588:	4619      	mov	r1, r3
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	400a      	ands	r2, r1
 8000590:	609a      	str	r2, [r3, #8]
		GPIO_Config->GPIO_Port->OSPEEDR |= ((GPIO_Config->GPIO_OSPEED) << (pin * 2));
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	689b      	ldr	r3, [r3, #8]
 8000596:	689a      	ldr	r2, [r3, #8]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	78db      	ldrb	r3, [r3, #3]
 800059c:	4619      	mov	r1, r3
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	fa01 f303 	lsl.w	r3, r1, r3
 80005a6:	4619      	mov	r1, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	430a      	orrs	r2, r1
 80005ae:	609a      	str	r2, [r3, #8]
		GPIO_Config->GPIO_Port->PUPDR &= ~(GPIO_PUPD_Reset << (pin * 2));
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	68da      	ldr	r2, [r3, #12]
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	2103      	movs	r1, #3
 80005bc:	fa01 f303 	lsl.w	r3, r1, r3
 80005c0:	43db      	mvns	r3, r3
 80005c2:	4619      	mov	r1, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	400a      	ands	r2, r1
 80005ca:	60da      	str	r2, [r3, #12]
		GPIO_Config->GPIO_Port->PUPDR |= ((GPIO_Config->GPIO_PUPD) << (pin * 2));
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	68da      	ldr	r2, [r3, #12]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	791b      	ldrb	r3, [r3, #4]
 80005d6:	4619      	mov	r1, r3
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	fa01 f303 	lsl.w	r3, r1, r3
 80005e0:	4619      	mov	r1, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	689b      	ldr	r3, [r3, #8]
 80005e6:	430a      	orrs	r2, r1
 80005e8:	60da      	str	r2, [r3, #12]
}
 80005ea:	bf00      	nop
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40020000 	.word	0x40020000

080005f8 <RCC_AHB1Cmd>:
 * @param	AHB1_Periph: Specific peripheral selected by the user (GPIOx, SPIx, I2Cx etc)
 *
 * @param	State: Specifies whether to enable or disable the peripheral.
 */
void RCC_AHB1Cmd(uint32_t AHB1_Periph, FunctionalState State)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 8000604:	78fb      	ldrb	r3, [r7, #3]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d106      	bne.n	8000618 <RCC_AHB1Cmd+0x20>
	{
		RCC->AHB1ENR |= AHB1_Periph;
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <RCC_AHB1Cmd+0x3c>)
 800060c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800060e:	4909      	ldr	r1, [pc, #36]	; (8000634 <RCC_AHB1Cmd+0x3c>)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4313      	orrs	r3, r2
 8000614:	630b      	str	r3, [r1, #48]	; 0x30

	else
	{
		RCC->AHB1ENR &= ~AHB1_Periph;
	}
}
 8000616:	e006      	b.n	8000626 <RCC_AHB1Cmd+0x2e>
		RCC->AHB1ENR &= ~AHB1_Periph;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <RCC_AHB1Cmd+0x3c>)
 800061a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	43db      	mvns	r3, r3
 8000620:	4904      	ldr	r1, [pc, #16]	; (8000634 <RCC_AHB1Cmd+0x3c>)
 8000622:	4013      	ands	r3, r2
 8000624:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800

08000638 <RCC_APB1Cmd>:
 * @param	APB1_Periph: Specific peripheral selected by the user (GPIOx, SPIx, I2Cx etc)
 *
 * @param	State: Specifies whether to enable or disable the peripheral.
 */
void RCC_APB1Cmd(uint32_t APB1_Periph, FunctionalState State)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	460b      	mov	r3, r1
 8000642:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 8000644:	78fb      	ldrb	r3, [r7, #3]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d106      	bne.n	8000658 <RCC_APB1Cmd+0x20>
	{
		RCC->APB1ENR |= APB1_Periph;
 800064a:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <RCC_APB1Cmd+0x3c>)
 800064c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800064e:	4909      	ldr	r1, [pc, #36]	; (8000674 <RCC_APB1Cmd+0x3c>)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4313      	orrs	r3, r2
 8000654:	640b      	str	r3, [r1, #64]	; 0x40

	else
	{
		RCC->APB1ENR &= ~APB1_Periph;
	}
}
 8000656:	e006      	b.n	8000666 <RCC_APB1Cmd+0x2e>
		RCC->APB1ENR &= ~APB1_Periph;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <RCC_APB1Cmd+0x3c>)
 800065a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	43db      	mvns	r3, r3
 8000660:	4904      	ldr	r1, [pc, #16]	; (8000674 <RCC_APB1Cmd+0x3c>)
 8000662:	4013      	ands	r3, r2
 8000664:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800

08000678 <RCC_APB2Cmd>:
 * @param	APB2_Periph: Specific peripheral selected by the user (GPIOx, SPIx, I2Cx etc)
 *
 * @param	State: Specifies whether to enable or disable the peripheral.
 */
void RCC_APB2Cmd(uint32_t APB2_Periph, FunctionalState State)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 8000684:	78fb      	ldrb	r3, [r7, #3]
 8000686:	2b01      	cmp	r3, #1
 8000688:	d106      	bne.n	8000698 <RCC_APB2Cmd+0x20>
	{
		RCC->APB2ENR |= APB2_Periph;
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <RCC_APB2Cmd+0x3c>)
 800068c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800068e:	4909      	ldr	r1, [pc, #36]	; (80006b4 <RCC_APB2Cmd+0x3c>)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4313      	orrs	r3, r2
 8000694:	644b      	str	r3, [r1, #68]	; 0x44

	else
	{
		RCC->APB2ENR &= ~APB2_Periph;
	}
}
 8000696:	e006      	b.n	80006a6 <RCC_APB2Cmd+0x2e>
		RCC->APB2ENR &= ~APB2_Periph;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <RCC_APB2Cmd+0x3c>)
 800069a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	43db      	mvns	r3, r3
 80006a0:	4904      	ldr	r1, [pc, #16]	; (80006b4 <RCC_APB2Cmd+0x3c>)
 80006a2:	4013      	ands	r3, r2
 80006a4:	644b      	str	r3, [r1, #68]	; 0x44
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800

080006b8 <RCC_GetClockFreq>:
 *
 * @param	ClockSource: Points to the ClockSource data structure which contains the varibales to hold
 * 			the frequencies of the SYSCLCK, HCLCK, PCLCK1, PCLCK2.
 */
void RCC_GetClockFreq(RCC_ClockFrequency_t *ClockSource)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b08b      	sub	sp, #44	; 0x2c
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	uint32_t pll_Value = 0, plln = 0, pllm = 2, pllp = 2, pll_src = 0, pll_fvco = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	623b      	str	r3, [r7, #32]
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
 80006c8:	2302      	movs	r3, #2
 80006ca:	61bb      	str	r3, [r7, #24]
 80006cc:	2302      	movs	r3, #2
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	2300      	movs	r3, #0
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]

	uint32_t temp_variable, prescaler;

	/*Determine the clock source for the SYSCLCK*/
	if(((RCC->CFGR & RCC_CFGR_SWS_Mask) >> 2) == 0x0)
 80006d8:	4b43      	ldr	r3, [pc, #268]	; (80007e8 <RCC_GetClockFreq+0x130>)
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	089b      	lsrs	r3, r3, #2
 80006de:	f003 0303 	and.w	r3, r3, #3
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d103      	bne.n	80006ee <RCC_GetClockFreq+0x36>
	{
		ClockSource->SYSCLCK = HSI_Value;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4a40      	ldr	r2, [pc, #256]	; (80007ec <RCC_GetClockFreq+0x134>)
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	e03f      	b.n	800076e <RCC_GetClockFreq+0xb6>
	}

	else if(((RCC->CFGR & RCC_CFGR_SWS_Mask) >> 2) == 0x1)
 80006ee:	4b3e      	ldr	r3, [pc, #248]	; (80007e8 <RCC_GetClockFreq+0x130>)
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	089b      	lsrs	r3, r3, #2
 80006f4:	f003 0303 	and.w	r3, r3, #3
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d103      	bne.n	8000704 <RCC_GetClockFreq+0x4c>
	{
		ClockSource->SYSCLCK = HSE_Value;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a3c      	ldr	r2, [pc, #240]	; (80007f0 <RCC_GetClockFreq+0x138>)
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	e034      	b.n	800076e <RCC_GetClockFreq+0xb6>
	}

	else if(((RCC->CFGR & RCC_CFGR_SWS_Mask) >> 2) == 0x2)
 8000704:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <RCC_GetClockFreq+0x130>)
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	089b      	lsrs	r3, r3, #2
 800070a:	f003 0303 	and.w	r3, r3, #3
 800070e:	2b02      	cmp	r3, #2
 8000710:	d12d      	bne.n	800076e <RCC_GetClockFreq+0xb6>
	{
		/*Determine the input source of the PLL*/
		if(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC_Mask)
 8000712:	4b35      	ldr	r3, [pc, #212]	; (80007e8 <RCC_GetClockFreq+0x130>)
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d002      	beq.n	8000724 <RCC_GetClockFreq+0x6c>
		{
			pll_src = HSE_Value;
 800071e:	4b34      	ldr	r3, [pc, #208]	; (80007f0 <RCC_GetClockFreq+0x138>)
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
 8000722:	e001      	b.n	8000728 <RCC_GetClockFreq+0x70>
		}

		else
		{
			pll_src = HSI_Value;
 8000724:	4b31      	ldr	r3, [pc, #196]	; (80007ec <RCC_GetClockFreq+0x134>)
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
		}

		plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Mask) >> 6);
 8000728:	4b2f      	ldr	r3, [pc, #188]	; (80007e8 <RCC_GetClockFreq+0x130>)
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	099b      	lsrs	r3, r3, #6
 800072e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000732:	61fb      	str	r3, [r7, #28]
		pllm = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Mask);
 8000734:	4b2c      	ldr	r3, [pc, #176]	; (80007e8 <RCC_GetClockFreq+0x130>)
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800073c:	61bb      	str	r3, [r7, #24]
		pll_fvco = (pll_src/pllm) * plln;
 800073e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	fbb2 f2f3 	udiv	r2, r2, r3
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	fb02 f303 	mul.w	r3, r2, r3
 800074c:	613b      	str	r3, [r7, #16]
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP_Mask) >> 16) * 2) + 2);
 800074e:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <RCC_GetClockFreq+0x130>)
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	0c1b      	lsrs	r3, r3, #16
 8000754:	f003 0303 	and.w	r3, r3, #3
 8000758:	3301      	adds	r3, #1
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	617b      	str	r3, [r7, #20]
		pll_Value = pll_fvco/pllp;
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	fbb2 f3f3 	udiv	r3, r2, r3
 8000766:	623b      	str	r3, [r7, #32]

		ClockSource->SYSCLCK = pll_Value;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6a3a      	ldr	r2, [r7, #32]
 800076c:	601a      	str	r2, [r3, #0]
	}

	/*Determine the frequency of the HCLCK*/
	temp_variable = ((RCC->CFGR & RCC_CFGR_HPRE_Mask) >> 4);
 800076e:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <RCC_GetClockFreq+0x130>)
 8000770:	689b      	ldr	r3, [r3, #8]
 8000772:	091b      	lsrs	r3, r3, #4
 8000774:	f003 030f 	and.w	r3, r3, #15
 8000778:	60fb      	str	r3, [r7, #12]
	prescaler = prescalerTable[temp_variable];
 800077a:	4a1e      	ldr	r2, [pc, #120]	; (80007f4 <RCC_GetClockFreq+0x13c>)
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000782:	b29b      	uxth	r3, r3
 8000784:	60bb      	str	r3, [r7, #8]
	ClockSource->HCLCK = (ClockSource->SYSCLCK) >> prescaler;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	40da      	lsrs	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	605a      	str	r2, [r3, #4]

	/*Determine the frequency of the PCLCK1*/
	temp_variable = ((RCC->CFGR & RCC_CFGR_PPRE1_Mask) >> 10);
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <RCC_GetClockFreq+0x130>)
 8000794:	689b      	ldr	r3, [r3, #8]
 8000796:	0a9b      	lsrs	r3, r3, #10
 8000798:	f003 0307 	and.w	r3, r3, #7
 800079c:	60fb      	str	r3, [r7, #12]
	prescaler = prescalerTable[temp_variable];
 800079e:	4a15      	ldr	r2, [pc, #84]	; (80007f4 <RCC_GetClockFreq+0x13c>)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	60bb      	str	r3, [r7, #8]
	ClockSource->PCLCK1 = (ClockSource->HCLCK) >> prescaler;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	685a      	ldr	r2, [r3, #4]
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	40da      	lsrs	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	609a      	str	r2, [r3, #8]

	/*Determine frequency of PCLCK2*/
	temp_variable = ((RCC->CFGR & RCC_CFGR_PPRE2_Mask) >> 13);
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <RCC_GetClockFreq+0x130>)
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	0b5b      	lsrs	r3, r3, #13
 80007bc:	f003 0307 	and.w	r3, r3, #7
 80007c0:	60fb      	str	r3, [r7, #12]
	prescaler = prescalerTable[temp_variable];
 80007c2:	4a0c      	ldr	r2, [pc, #48]	; (80007f4 <RCC_GetClockFreq+0x13c>)
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	60bb      	str	r3, [r7, #8]
	ClockSource->PCLCK2 = (ClockSource->HCLCK) >> prescaler;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	685a      	ldr	r2, [r3, #4]
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	40da      	lsrs	r2, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	60da      	str	r2, [r3, #12]

}
 80007da:	bf00      	nop
 80007dc:	372c      	adds	r7, #44	; 0x2c
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	00f42400 	.word	0x00f42400
 80007f0:	007a1200 	.word	0x007a1200
 80007f4:	20000000 	.word	0x20000000

080007f8 <RCC_PCLCK1Config>:
 * 				RCC_APB1Prescaler_4			/4
 * 				RCC_APB1Prescaler_8			/8
 * 				RCC_APB1Prescaler_16			/16
 */
void RCC_PCLCK1Config(uint32_t APB1_Prescaler)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	RCC->CFGR &= ~RCC_CFGR_PPRE1_Mask;
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <RCC_PCLCK1Config+0x2c>)
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	4a07      	ldr	r2, [pc, #28]	; (8000824 <RCC_PCLCK1Config+0x2c>)
 8000806:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800080a:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= APB1_Prescaler;
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <RCC_PCLCK1Config+0x2c>)
 800080e:	689a      	ldr	r2, [r3, #8]
 8000810:	4904      	ldr	r1, [pc, #16]	; (8000824 <RCC_PCLCK1Config+0x2c>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4313      	orrs	r3, r2
 8000816:	608b      	str	r3, [r1, #8]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	40023800 	.word	0x40023800

08000828 <Config_SPI_Periph>:

/*
 * @brief	Helper function used to enable the SPI GPIO pins
 */
static void Config_SPI_Periph(GPIO_TypeDef *GPIOx, uint8_t pin, AFR_Config_t alt_function)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af04      	add	r7, sp, #16
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	70fb      	strb	r3, [r7, #3]
 8000834:	4613      	mov	r3, r2
 8000836:	70bb      	strb	r3, [r7, #2]
	GPIO_Config_t SPI_Periph;
	GPIO_Config(&SPI_Periph, GPIOx, pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000838:	78fa      	ldrb	r2, [r7, #3]
 800083a:	f107 000c 	add.w	r0, r7, #12
 800083e:	2300      	movs	r3, #0
 8000840:	9302      	str	r3, [sp, #8]
 8000842:	2300      	movs	r3, #0
 8000844:	9301      	str	r3, [sp, #4]
 8000846:	2300      	movs	r3, #0
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2302      	movs	r3, #2
 800084c:	6879      	ldr	r1, [r7, #4]
 800084e:	f7ff fcc1 	bl	80001d4 <GPIO_Config>
	GPIO_Init(&SPI_Periph, alt_function);
 8000852:	78ba      	ldrb	r2, [r7, #2]
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	4611      	mov	r1, r2
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fda2 	bl	80003a4 <GPIO_Init>
}
 8000860:	bf00      	nop
 8000862:	3718      	adds	r7, #24
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <Enable_SPI_Periph>:
 * @brief	Helper function to initialize the SPI peripheral based on specified pins
 *
 * @note	Sets the specific port and alternate function for the specified SPI
 */
static void Enable_SPI_Periph(SPI_Handle_t *SPI_Handle)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	//Initialize varibales for pins
	uint8_t nss_pin, sck_pin, mosi_pin, miso_pin;
	nss_pin = SPI_Handle->SPI_Config.pin_nss;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	791b      	ldrb	r3, [r3, #4]
 8000874:	73fb      	strb	r3, [r7, #15]
	sck_pin = SPI_Handle->SPI_Config.pin_sck;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	79db      	ldrb	r3, [r3, #7]
 800087a:	73bb      	strb	r3, [r7, #14]
	mosi_pin = SPI_Handle->SPI_Config.pin_mosi;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	795b      	ldrb	r3, [r3, #5]
 8000880:	737b      	strb	r3, [r7, #13]
	miso_pin = SPI_Handle->SPI_Config.pin_miso;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	799b      	ldrb	r3, [r3, #6]
 8000886:	733b      	strb	r3, [r7, #12]

	if(SPI_Handle->SPIx == SPI1)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a8c      	ldr	r2, [pc, #560]	; (8000ac0 <Enable_SPI_Periph+0x258>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d148      	bne.n	8000924 <Enable_SPI_Periph+0xbc>
	{
		//Check is ssm is set - if not, enable the specified nss pin
		if(!SPI_Handle->SPI_Config.ssm)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	7a1b      	ldrb	r3, [r3, #8]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d105      	bne.n	80008a6 <Enable_SPI_Periph+0x3e>
		{
			//Init slave select pin
			Config_SPI_Periph(GPIOA, nss_pin, AF5);
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	2205      	movs	r2, #5
 800089e:	4619      	mov	r1, r3
 80008a0:	4888      	ldr	r0, [pc, #544]	; (8000ac4 <Enable_SPI_Periph+0x25c>)
 80008a2:	f7ff ffc1 	bl	8000828 <Config_SPI_Periph>
		}

		//Init serial clock
		switch(sck_pin)
 80008a6:	7bbb      	ldrb	r3, [r7, #14]
 80008a8:	2b03      	cmp	r3, #3
 80008aa:	d008      	beq.n	80008be <Enable_SPI_Periph+0x56>
 80008ac:	2b05      	cmp	r3, #5
 80008ae:	d10d      	bne.n	80008cc <Enable_SPI_Periph+0x64>
		{
		case Pin5:
			Config_SPI_Periph(GPIOA, sck_pin, AF5);
 80008b0:	7bbb      	ldrb	r3, [r7, #14]
 80008b2:	2205      	movs	r2, #5
 80008b4:	4619      	mov	r1, r3
 80008b6:	4883      	ldr	r0, [pc, #524]	; (8000ac4 <Enable_SPI_Periph+0x25c>)
 80008b8:	f7ff ffb6 	bl	8000828 <Config_SPI_Periph>
			break;
 80008bc:	e006      	b.n	80008cc <Enable_SPI_Periph+0x64>
		case Pin3:
			Config_SPI_Periph(GPIOB, sck_pin, AF5);
 80008be:	7bbb      	ldrb	r3, [r7, #14]
 80008c0:	2205      	movs	r2, #5
 80008c2:	4619      	mov	r1, r3
 80008c4:	4880      	ldr	r0, [pc, #512]	; (8000ac8 <Enable_SPI_Periph+0x260>)
 80008c6:	f7ff ffaf 	bl	8000828 <Config_SPI_Periph>
			break;
 80008ca:	bf00      	nop
		}

		//Init mosi pin
		switch(miso_pin)
 80008cc:	7b3b      	ldrb	r3, [r7, #12]
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	d008      	beq.n	80008e4 <Enable_SPI_Periph+0x7c>
 80008d2:	2b06      	cmp	r3, #6
 80008d4:	d10d      	bne.n	80008f2 <Enable_SPI_Periph+0x8a>
		{
		case Pin6:
			Config_SPI_Periph(GPIOA, mosi_pin, AF5);
 80008d6:	7b7b      	ldrb	r3, [r7, #13]
 80008d8:	2205      	movs	r2, #5
 80008da:	4619      	mov	r1, r3
 80008dc:	4879      	ldr	r0, [pc, #484]	; (8000ac4 <Enable_SPI_Periph+0x25c>)
 80008de:	f7ff ffa3 	bl	8000828 <Config_SPI_Periph>
			break;
 80008e2:	e006      	b.n	80008f2 <Enable_SPI_Periph+0x8a>
		case Pin4:
			Config_SPI_Periph(GPIOB, mosi_pin, AF5);
 80008e4:	7b7b      	ldrb	r3, [r7, #13]
 80008e6:	2205      	movs	r2, #5
 80008e8:	4619      	mov	r1, r3
 80008ea:	4877      	ldr	r0, [pc, #476]	; (8000ac8 <Enable_SPI_Periph+0x260>)
 80008ec:	f7ff ff9c 	bl	8000828 <Config_SPI_Periph>
			break;
 80008f0:	bf00      	nop

		}

		//Init miso pin
		switch(mosi_pin)
 80008f2:	7b7b      	ldrb	r3, [r7, #13]
 80008f4:	2b05      	cmp	r3, #5
 80008f6:	d008      	beq.n	800090a <Enable_SPI_Periph+0xa2>
 80008f8:	2b07      	cmp	r3, #7
 80008fa:	d10d      	bne.n	8000918 <Enable_SPI_Periph+0xb0>
		{
		case Pin7:
			Config_SPI_Periph(GPIOA, miso_pin, AF5);
 80008fc:	7b3b      	ldrb	r3, [r7, #12]
 80008fe:	2205      	movs	r2, #5
 8000900:	4619      	mov	r1, r3
 8000902:	4870      	ldr	r0, [pc, #448]	; (8000ac4 <Enable_SPI_Periph+0x25c>)
 8000904:	f7ff ff90 	bl	8000828 <Config_SPI_Periph>
			break;
 8000908:	e006      	b.n	8000918 <Enable_SPI_Periph+0xb0>
		case Pin5:
			Config_SPI_Periph(GPIOB, miso_pin, AF5);
 800090a:	7b3b      	ldrb	r3, [r7, #12]
 800090c:	2205      	movs	r2, #5
 800090e:	4619      	mov	r1, r3
 8000910:	486d      	ldr	r0, [pc, #436]	; (8000ac8 <Enable_SPI_Periph+0x260>)
 8000912:	f7ff ff89 	bl	8000828 <Config_SPI_Periph>
			break;
 8000916:	bf00      	nop
		}

		//Enable Clock Access to SPI1
		RCC_APB2Cmd(SPI1_Enable, ENABLE);
 8000918:	2101      	movs	r1, #1
 800091a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800091e:	f7ff feab 	bl	8000678 <RCC_APB2Cmd>
		Config_SPI_Periph(GPIOE, mosi_pin, AF5);

		//Enable Clock Access to SPI4
		RCC_APB2Cmd(SPI4_Enable, ENABLE);
	}
}
 8000922:	e0c9      	b.n	8000ab8 <Enable_SPI_Periph+0x250>
	else if(SPI_Handle->SPIx == SPI2)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a68      	ldr	r2, [pc, #416]	; (8000acc <Enable_SPI_Periph+0x264>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d148      	bne.n	80009c0 <Enable_SPI_Periph+0x158>
		if(SPI_Handle->SPI_Config.ssm)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	7a1b      	ldrb	r3, [r3, #8]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d005      	beq.n	8000942 <Enable_SPI_Periph+0xda>
			Config_SPI_Periph(GPIOB, nss_pin, AF5);
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	2205      	movs	r2, #5
 800093a:	4619      	mov	r1, r3
 800093c:	4862      	ldr	r0, [pc, #392]	; (8000ac8 <Enable_SPI_Periph+0x260>)
 800093e:	f7ff ff73 	bl	8000828 <Config_SPI_Periph>
		switch(sck_pin)
 8000942:	7bbb      	ldrb	r3, [r7, #14]
 8000944:	2b03      	cmp	r3, #3
 8000946:	d106      	bne.n	8000956 <Enable_SPI_Periph+0xee>
			Config_SPI_Periph(GPIOD, sck_pin, AF5);
 8000948:	7bbb      	ldrb	r3, [r7, #14]
 800094a:	2205      	movs	r2, #5
 800094c:	4619      	mov	r1, r3
 800094e:	4860      	ldr	r0, [pc, #384]	; (8000ad0 <Enable_SPI_Periph+0x268>)
 8000950:	f7ff ff6a 	bl	8000828 <Config_SPI_Periph>
			break;
 8000954:	e006      	b.n	8000964 <Enable_SPI_Periph+0xfc>
			Config_SPI_Periph(GPIOB, sck_pin, AF5);
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	2205      	movs	r2, #5
 800095a:	4619      	mov	r1, r3
 800095c:	485a      	ldr	r0, [pc, #360]	; (8000ac8 <Enable_SPI_Periph+0x260>)
 800095e:	f7ff ff63 	bl	8000828 <Config_SPI_Periph>
			break;
 8000962:	bf00      	nop
		switch(mosi_pin)
 8000964:	7b7b      	ldrb	r3, [r7, #13]
 8000966:	2b03      	cmp	r3, #3
 8000968:	d002      	beq.n	8000970 <Enable_SPI_Periph+0x108>
 800096a:	2b0f      	cmp	r3, #15
 800096c:	d007      	beq.n	800097e <Enable_SPI_Periph+0x116>
 800096e:	e00d      	b.n	800098c <Enable_SPI_Periph+0x124>
			Config_SPI_Periph(GPIOC, mosi_pin, AF5);
 8000970:	7b7b      	ldrb	r3, [r7, #13]
 8000972:	2205      	movs	r2, #5
 8000974:	4619      	mov	r1, r3
 8000976:	4857      	ldr	r0, [pc, #348]	; (8000ad4 <Enable_SPI_Periph+0x26c>)
 8000978:	f7ff ff56 	bl	8000828 <Config_SPI_Periph>
			break;
 800097c:	e006      	b.n	800098c <Enable_SPI_Periph+0x124>
			Config_SPI_Periph(GPIOB, mosi_pin, AF5);
 800097e:	7b7b      	ldrb	r3, [r7, #13]
 8000980:	2205      	movs	r2, #5
 8000982:	4619      	mov	r1, r3
 8000984:	4850      	ldr	r0, [pc, #320]	; (8000ac8 <Enable_SPI_Periph+0x260>)
 8000986:	f7ff ff4f 	bl	8000828 <Config_SPI_Periph>
			break;
 800098a:	bf00      	nop
		switch(miso_pin)
 800098c:	7b3b      	ldrb	r3, [r7, #12]
 800098e:	2b02      	cmp	r3, #2
 8000990:	d002      	beq.n	8000998 <Enable_SPI_Periph+0x130>
 8000992:	2b0e      	cmp	r3, #14
 8000994:	d007      	beq.n	80009a6 <Enable_SPI_Periph+0x13e>
 8000996:	e00d      	b.n	80009b4 <Enable_SPI_Periph+0x14c>
			Config_SPI_Periph(GPIOC, miso_pin, AF5);
 8000998:	7b3b      	ldrb	r3, [r7, #12]
 800099a:	2205      	movs	r2, #5
 800099c:	4619      	mov	r1, r3
 800099e:	484d      	ldr	r0, [pc, #308]	; (8000ad4 <Enable_SPI_Periph+0x26c>)
 80009a0:	f7ff ff42 	bl	8000828 <Config_SPI_Periph>
			break;
 80009a4:	e006      	b.n	80009b4 <Enable_SPI_Periph+0x14c>
			Config_SPI_Periph(GPIOB, miso_pin, AF5);
 80009a6:	7b3b      	ldrb	r3, [r7, #12]
 80009a8:	2205      	movs	r2, #5
 80009aa:	4619      	mov	r1, r3
 80009ac:	4846      	ldr	r0, [pc, #280]	; (8000ac8 <Enable_SPI_Periph+0x260>)
 80009ae:	f7ff ff3b 	bl	8000828 <Config_SPI_Periph>
			break;
 80009b2:	bf00      	nop
		RCC_APB1Cmd(SPI2_Enable, ENABLE);
 80009b4:	2101      	movs	r1, #1
 80009b6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009ba:	f7ff fe3d 	bl	8000638 <RCC_APB1Cmd>
}
 80009be:	e07b      	b.n	8000ab8 <Enable_SPI_Periph+0x250>
	else if(SPI_Handle->SPIx == SPI3)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a44      	ldr	r2, [pc, #272]	; (8000ad8 <Enable_SPI_Periph+0x270>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d155      	bne.n	8000a76 <Enable_SPI_Periph+0x20e>
		if(SPI_Handle->SPI_Config.ssm)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	7a1b      	ldrb	r3, [r3, #8]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d005      	beq.n	80009de <Enable_SPI_Periph+0x176>
			Config_SPI_Periph(GPIOA, nss_pin, AF6);
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	2206      	movs	r2, #6
 80009d6:	4619      	mov	r1, r3
 80009d8:	483a      	ldr	r0, [pc, #232]	; (8000ac4 <Enable_SPI_Periph+0x25c>)
 80009da:	f7ff ff25 	bl	8000828 <Config_SPI_Periph>
		switch(sck_pin)
 80009de:	7bbb      	ldrb	r3, [r7, #14]
 80009e0:	2b03      	cmp	r3, #3
 80009e2:	d002      	beq.n	80009ea <Enable_SPI_Periph+0x182>
 80009e4:	2b0a      	cmp	r3, #10
 80009e6:	d007      	beq.n	80009f8 <Enable_SPI_Periph+0x190>
 80009e8:	e00d      	b.n	8000a06 <Enable_SPI_Periph+0x19e>
			Config_SPI_Periph(GPIOB, sck_pin, AF6);
 80009ea:	7bbb      	ldrb	r3, [r7, #14]
 80009ec:	2206      	movs	r2, #6
 80009ee:	4619      	mov	r1, r3
 80009f0:	4835      	ldr	r0, [pc, #212]	; (8000ac8 <Enable_SPI_Periph+0x260>)
 80009f2:	f7ff ff19 	bl	8000828 <Config_SPI_Periph>
			break;
 80009f6:	e006      	b.n	8000a06 <Enable_SPI_Periph+0x19e>
			Config_SPI_Periph(GPIOC, sck_pin, AF6);
 80009f8:	7bbb      	ldrb	r3, [r7, #14]
 80009fa:	2206      	movs	r2, #6
 80009fc:	4619      	mov	r1, r3
 80009fe:	4835      	ldr	r0, [pc, #212]	; (8000ad4 <Enable_SPI_Periph+0x26c>)
 8000a00:	f7ff ff12 	bl	8000828 <Config_SPI_Periph>
			break;
 8000a04:	bf00      	nop
		switch(mosi_pin)
 8000a06:	7b7b      	ldrb	r3, [r7, #13]
 8000a08:	2b0c      	cmp	r3, #12
 8000a0a:	d006      	beq.n	8000a1a <Enable_SPI_Periph+0x1b2>
 8000a0c:	2b0c      	cmp	r3, #12
 8000a0e:	dc19      	bgt.n	8000a44 <Enable_SPI_Periph+0x1dc>
 8000a10:	2b05      	cmp	r3, #5
 8000a12:	d010      	beq.n	8000a36 <Enable_SPI_Periph+0x1ce>
 8000a14:	2b06      	cmp	r3, #6
 8000a16:	d007      	beq.n	8000a28 <Enable_SPI_Periph+0x1c0>
 8000a18:	e014      	b.n	8000a44 <Enable_SPI_Periph+0x1dc>
			Config_SPI_Periph(GPIOC, mosi_pin, AF6);
 8000a1a:	7b7b      	ldrb	r3, [r7, #13]
 8000a1c:	2206      	movs	r2, #6
 8000a1e:	4619      	mov	r1, r3
 8000a20:	482c      	ldr	r0, [pc, #176]	; (8000ad4 <Enable_SPI_Periph+0x26c>)
 8000a22:	f7ff ff01 	bl	8000828 <Config_SPI_Periph>
			break;
 8000a26:	e00d      	b.n	8000a44 <Enable_SPI_Periph+0x1dc>
			Config_SPI_Periph(GPIOD, mosi_pin, AF5);
 8000a28:	7b7b      	ldrb	r3, [r7, #13]
 8000a2a:	2205      	movs	r2, #5
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4828      	ldr	r0, [pc, #160]	; (8000ad0 <Enable_SPI_Periph+0x268>)
 8000a30:	f7ff fefa 	bl	8000828 <Config_SPI_Periph>
			break;
 8000a34:	e006      	b.n	8000a44 <Enable_SPI_Periph+0x1dc>
			Config_SPI_Periph(GPIOB, mosi_pin, AF6);
 8000a36:	7b7b      	ldrb	r3, [r7, #13]
 8000a38:	2206      	movs	r2, #6
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4822      	ldr	r0, [pc, #136]	; (8000ac8 <Enable_SPI_Periph+0x260>)
 8000a3e:	f7ff fef3 	bl	8000828 <Config_SPI_Periph>
			break;
 8000a42:	bf00      	nop
		switch(miso_pin)
 8000a44:	7b3b      	ldrb	r3, [r7, #12]
 8000a46:	2b04      	cmp	r3, #4
 8000a48:	d008      	beq.n	8000a5c <Enable_SPI_Periph+0x1f4>
 8000a4a:	2b0b      	cmp	r3, #11
 8000a4c:	d10d      	bne.n	8000a6a <Enable_SPI_Periph+0x202>
			Config_SPI_Periph(GPIOC, miso_pin, AF6);
 8000a4e:	7b3b      	ldrb	r3, [r7, #12]
 8000a50:	2206      	movs	r2, #6
 8000a52:	4619      	mov	r1, r3
 8000a54:	481f      	ldr	r0, [pc, #124]	; (8000ad4 <Enable_SPI_Periph+0x26c>)
 8000a56:	f7ff fee7 	bl	8000828 <Config_SPI_Periph>
			break;
 8000a5a:	e006      	b.n	8000a6a <Enable_SPI_Periph+0x202>
			Config_SPI_Periph(GPIOB, miso_pin, AF6);
 8000a5c:	7b3b      	ldrb	r3, [r7, #12]
 8000a5e:	2206      	movs	r2, #6
 8000a60:	4619      	mov	r1, r3
 8000a62:	4819      	ldr	r0, [pc, #100]	; (8000ac8 <Enable_SPI_Periph+0x260>)
 8000a64:	f7ff fee0 	bl	8000828 <Config_SPI_Periph>
			break;
 8000a68:	bf00      	nop
		RCC_APB1Cmd(SPI3_Enable, ENABLE);
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a70:	f7ff fde2 	bl	8000638 <RCC_APB1Cmd>
}
 8000a74:	e020      	b.n	8000ab8 <Enable_SPI_Periph+0x250>
		if(SPI_Handle->SPI_Config.ssm)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	7a1b      	ldrb	r3, [r3, #8]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d005      	beq.n	8000a8a <Enable_SPI_Periph+0x222>
			Config_SPI_Periph(GPIOE, nss_pin, AF5);
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	2205      	movs	r2, #5
 8000a82:	4619      	mov	r1, r3
 8000a84:	4815      	ldr	r0, [pc, #84]	; (8000adc <Enable_SPI_Periph+0x274>)
 8000a86:	f7ff fecf 	bl	8000828 <Config_SPI_Periph>
		Config_SPI_Periph(GPIOE, sck_pin, AF5);
 8000a8a:	7bbb      	ldrb	r3, [r7, #14]
 8000a8c:	2205      	movs	r2, #5
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4812      	ldr	r0, [pc, #72]	; (8000adc <Enable_SPI_Periph+0x274>)
 8000a92:	f7ff fec9 	bl	8000828 <Config_SPI_Periph>
		Config_SPI_Periph(GPIOE, miso_pin, AF5);
 8000a96:	7b3b      	ldrb	r3, [r7, #12]
 8000a98:	2205      	movs	r2, #5
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480f      	ldr	r0, [pc, #60]	; (8000adc <Enable_SPI_Periph+0x274>)
 8000a9e:	f7ff fec3 	bl	8000828 <Config_SPI_Periph>
		Config_SPI_Periph(GPIOE, mosi_pin, AF5);
 8000aa2:	7b7b      	ldrb	r3, [r7, #13]
 8000aa4:	2205      	movs	r2, #5
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <Enable_SPI_Periph+0x274>)
 8000aaa:	f7ff febd 	bl	8000828 <Config_SPI_Periph>
		RCC_APB2Cmd(SPI4_Enable, ENABLE);
 8000aae:	2101      	movs	r1, #1
 8000ab0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ab4:	f7ff fde0 	bl	8000678 <RCC_APB2Cmd>
}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40013000 	.word	0x40013000
 8000ac4:	40020000 	.word	0x40020000
 8000ac8:	40020400 	.word	0x40020400
 8000acc:	40003800 	.word	0x40003800
 8000ad0:	40020c00 	.word	0x40020c00
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40003c00 	.word	0x40003c00
 8000adc:	40021000 	.word	0x40021000

08000ae0 <SPI_Init>:

/*
 * @brief
 */
void SPI_Init(SPI_Handle_t *SPI_Handle)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	RCC_ClockFrequency_t ClockSource;

	uint32_t clock_rate = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
	//Used to keep track of the bit value to input into the CR1 register
	uint8_t bit_value = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	76fb      	strb	r3, [r7, #27]

	//Enable specified pins and clock access to specified SPI
	Enable_SPI_Periph(SPI_Handle);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff feb9 	bl	8000868 <Enable_SPI_Periph>

	//Check if software slave management is enabled
	if(SPI_Handle->SPI_Config.ssm)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	7a1b      	ldrb	r3, [r3, #8]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d008      	beq.n	8000b10 <SPI_Init+0x30>
	{
		//Enable ssm bit in CR1
		SPI_Handle->SPIx->CR1 |= CR1_SSM_Enable;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	e00b      	b.n	8000b28 <SPI_Init+0x48>
	}

	else
	{
		//if SSM is disabled check for SSOE flag
		if(SPI_Handle->SPI_Config.ssoe)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	7a5b      	ldrb	r3, [r3, #9]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d007      	beq.n	8000b28 <SPI_Init+0x48>
		{
			//Enable SSOE flag
			SPI_Handle->SPIx->CR2 |= CR2_SSOE_Enable;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	685a      	ldr	r2, [r3, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f042 0204 	orr.w	r2, r2, #4
 8000b26:	605a      	str	r2, [r3, #4]
		}
	}

	//Determine Peripheral Clock Speed
	RCC_GetClockFreq(&ClockSource);
 8000b28:	f107 0308 	add.w	r3, r7, #8
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fdc3 	bl	80006b8 <RCC_GetClockFreq>

	//Alorithm to determine the divisor based off the clock speed input by the user
	while(clock_rate != SPI_Handle->SPI_Config.clock_rate)
 8000b32:	e01a      	b.n	8000b6a <SPI_Init+0x8a>
	{
		bit_value++;
 8000b34:	7efb      	ldrb	r3, [r7, #27]
 8000b36:	3301      	adds	r3, #1
 8000b38:	76fb      	strb	r3, [r7, #27]

		//Check for which SPI peripheral is enabled - this determines whether to use APB1 or APB2
		if(SPI_Handle->SPIx == SPI1 || SPI_Handle->SPIx == SPI4)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a30      	ldr	r2, [pc, #192]	; (8000c00 <SPI_Init+0x120>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d004      	beq.n	8000b4e <SPI_Init+0x6e>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a2e      	ldr	r2, [pc, #184]	; (8000c04 <SPI_Init+0x124>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d105      	bne.n	8000b5a <SPI_Init+0x7a>
		{
			clock_rate = (ClockSource.PCLCK1) >> (bit_value);
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	7efb      	ldrb	r3, [r7, #27]
 8000b52:	fa22 f303 	lsr.w	r3, r2, r3
 8000b56:	61fb      	str	r3, [r7, #28]
 8000b58:	e004      	b.n	8000b64 <SPI_Init+0x84>
		}
		else
		{
			clock_rate = (ClockSource.PCLCK2) >> (bit_value);
 8000b5a:	697a      	ldr	r2, [r7, #20]
 8000b5c:	7efb      	ldrb	r3, [r7, #27]
 8000b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b62:	61fb      	str	r3, [r7, #28]
		}

		//Ensure the while loop does not get caught in an infinte loop
		if(bit_value > 8)
 8000b64:	7efb      	ldrb	r3, [r7, #27]
 8000b66:	2b08      	cmp	r3, #8
 8000b68:	d846      	bhi.n	8000bf8 <SPI_Init+0x118>
	while(clock_rate != SPI_Handle->SPI_Config.clock_rate)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	69fa      	ldr	r2, [r7, #28]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d1df      	bne.n	8000b34 <SPI_Init+0x54>
			return;
		}
	}

	//Set Baud rate control
	SPI_Handle->SPIx->CR1 |= ((bit_value - 1) << CR1_BR_Pos);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	7efb      	ldrb	r3, [r7, #27]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	00db      	lsls	r3, r3, #3
 8000b80:	4619      	mov	r1, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	430a      	orrs	r2, r1
 8000b88:	601a      	str	r2, [r3, #0]

	//Set CPOL and CPHA
	SPI_Handle->SPIx->CR1 |= ((SPI_Handle->SPI_Config.cpol) << CR1_CPOL_Pos);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	7c9b      	ldrb	r3, [r3, #18]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	4619      	mov	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	601a      	str	r2, [r3, #0]
	SPI_Handle->SPIx->CR1 |= ((SPI_Handle->SPI_Config.cpha) << CR1_CPHA_Pos);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	7cdb      	ldrb	r3, [r3, #19]
 8000baa:	4619      	mov	r1, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	601a      	str	r2, [r3, #0]

	//Set to master or slave
	SPI_Handle->SPIx->CR1 |= ((SPI_Handle->SPI_Config.spi_bus_direction) << CR1_MSTR_Pos);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	7d1b      	ldrb	r3, [r3, #20]
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	601a      	str	r2, [r3, #0]

	//Set the data frame & LSB first
	SPI_Handle->SPIx->CR1 |= ((SPI_Handle->SPI_Config.lsbfirst) << CR1_LSBFIRST_Pos);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	7c5b      	ldrb	r3, [r3, #17]
 8000bd4:	01db      	lsls	r3, r3, #7
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	601a      	str	r2, [r3, #0]
	SPI_Handle->SPIx->CR1 |= ((SPI_Handle->SPI_Config.data_frame) << CR1_DFF_Pos);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	7c1b      	ldrb	r3, [r3, #16]
 8000bea:	02db      	lsls	r3, r3, #11
 8000bec:	4619      	mov	r1, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	e000      	b.n	8000bfa <SPI_Init+0x11a>
			return;
 8000bf8:	bf00      	nop
}
 8000bfa:	3720      	adds	r7, #32
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40013000 	.word	0x40013000
 8000c04:	40013400 	.word	0x40013400

08000c08 <main>:
#include "stm32f401_spi.h"

int main()
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI_Example;

	SPI_Example.SPI_Config.ssm = SSM_Enable;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	723b      	strb	r3, [r7, #8]
	SPI_Example.SPIx = SPI1;
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <main+0x4c>)
 8000c14:	603b      	str	r3, [r7, #0]
	SPI_Example.SPI_Config.pin_sck = Pin5;
 8000c16:	2305      	movs	r3, #5
 8000c18:	71fb      	strb	r3, [r7, #7]
	SPI_Example.SPI_Config.pin_nss = Pin4;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	713b      	strb	r3, [r7, #4]
	SPI_Example.SPI_Config.pin_mosi = Pin7;
 8000c1e:	2307      	movs	r3, #7
 8000c20:	717b      	strb	r3, [r7, #5]
	SPI_Example.SPI_Config.pin_miso = Pin6;
 8000c22:	2306      	movs	r3, #6
 8000c24:	71bb      	strb	r3, [r7, #6]
	SPI_Example.SPI_Config.clock_rate = 5756;
 8000c26:	f241 637c 	movw	r3, #5756	; 0x167c
 8000c2a:	60fb      	str	r3, [r7, #12]

	SPI_Example.SPI_Config.data_frame = Data_8_Bits;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	743b      	strb	r3, [r7, #16]
	SPI_Example.SPI_Config.cpha = Rising_Edge;
 8000c30:	2300      	movs	r3, #0
 8000c32:	74fb      	strb	r3, [r7, #19]
	SPI_Example.SPI_Config.cpol = Odd_Polarity;
 8000c34:	2300      	movs	r3, #0
 8000c36:	74bb      	strb	r3, [r7, #18]
	SPI_Example.SPI_Config.lsbfirst = LSB_First;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	747b      	strb	r3, [r7, #17]
	SPI_Example.SPI_Config.spi_bus_direction = SPI_Master;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	753b      	strb	r3, [r7, #20]

	RCC_PCLCK1Config(RCC_APB1Prescaler_2);
 8000c40:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c44:	f7ff fdd8 	bl	80007f8 <RCC_PCLCK1Config>

	SPI_Init(&SPI_Example);
 8000c48:	463b      	mov	r3, r7
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff48 	bl	8000ae0 <SPI_Init>

	while(1)
 8000c50:	e7fe      	b.n	8000c50 <main+0x48>
 8000c52:	bf00      	nop
 8000c54:	40013000 	.word	0x40013000

08000c58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c58:	480d      	ldr	r0, [pc, #52]	; (8000c90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c5a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c5c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c62:	490d      	ldr	r1, [pc, #52]	; (8000c98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <LoopForever+0xe>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c78:	4c0a      	ldr	r4, [pc, #40]	; (8000ca4 <LoopForever+0x16>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c86:	f000 f811 	bl	8000cac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c8a:	f7ff ffbd 	bl	8000c08 <main>

08000c8e <LoopForever>:

LoopForever:
  b LoopForever
 8000c8e:	e7fe      	b.n	8000c8e <LoopForever>
  ldr   r0, =_estack
 8000c90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000c9c:	08000d14 	.word	0x08000d14
  ldr r2, =_sbss
 8000ca0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000ca4:	2000003c 	.word	0x2000003c

08000ca8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC_IRQHandler>
	...

08000cac <__libc_init_array>:
 8000cac:	b570      	push	{r4, r5, r6, lr}
 8000cae:	4d0d      	ldr	r5, [pc, #52]	; (8000ce4 <__libc_init_array+0x38>)
 8000cb0:	4c0d      	ldr	r4, [pc, #52]	; (8000ce8 <__libc_init_array+0x3c>)
 8000cb2:	1b64      	subs	r4, r4, r5
 8000cb4:	10a4      	asrs	r4, r4, #2
 8000cb6:	2600      	movs	r6, #0
 8000cb8:	42a6      	cmp	r6, r4
 8000cba:	d109      	bne.n	8000cd0 <__libc_init_array+0x24>
 8000cbc:	4d0b      	ldr	r5, [pc, #44]	; (8000cec <__libc_init_array+0x40>)
 8000cbe:	4c0c      	ldr	r4, [pc, #48]	; (8000cf0 <__libc_init_array+0x44>)
 8000cc0:	f000 f818 	bl	8000cf4 <_init>
 8000cc4:	1b64      	subs	r4, r4, r5
 8000cc6:	10a4      	asrs	r4, r4, #2
 8000cc8:	2600      	movs	r6, #0
 8000cca:	42a6      	cmp	r6, r4
 8000ccc:	d105      	bne.n	8000cda <__libc_init_array+0x2e>
 8000cce:	bd70      	pop	{r4, r5, r6, pc}
 8000cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cd4:	4798      	blx	r3
 8000cd6:	3601      	adds	r6, #1
 8000cd8:	e7ee      	b.n	8000cb8 <__libc_init_array+0xc>
 8000cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cde:	4798      	blx	r3
 8000ce0:	3601      	adds	r6, #1
 8000ce2:	e7f2      	b.n	8000cca <__libc_init_array+0x1e>
 8000ce4:	08000d0c 	.word	0x08000d0c
 8000ce8:	08000d0c 	.word	0x08000d0c
 8000cec:	08000d0c 	.word	0x08000d0c
 8000cf0:	08000d10 	.word	0x08000d10

08000cf4 <_init>:
 8000cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf6:	bf00      	nop
 8000cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cfa:	bc08      	pop	{r3}
 8000cfc:	469e      	mov	lr, r3
 8000cfe:	4770      	bx	lr

08000d00 <_fini>:
 8000d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d02:	bf00      	nop
 8000d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d06:	bc08      	pop	{r3}
 8000d08:	469e      	mov	lr, r3
 8000d0a:	4770      	bx	lr
