
SPI_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019c4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001b5c  08001b64  00011b64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001b5c  08001b5c  00011b64  2**0
                  CONTENTS
  4 .ARM          00000000  08001b5c  08001b5c  00011b64  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b5c  08001b64  00011b64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b5c  08001b5c  00011b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b60  08001b60  00011b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011b64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000000  08001b64  00020000  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001b64  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011b64  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00011b94  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002494  00000000  00000000  00011bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000853  00000000  00000000  0001406b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f8  00000000  00000000  000148c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000172  00000000  00000000  00014ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000e3d2  00000000  00000000  00014c2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000027d8  00000000  00000000  00022ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000521e4  00000000  00000000  000257d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000080c  00000000  00000000  000779b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000781c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001b44 	.word	0x08001b44

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08001b44 	.word	0x08001b44

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <GPIO_Config>:
 * 			0x0		or		GPIO_PUPD_None
 * 			0x1		or		GPIO_PullUp
 * 			0x2		or		GPIO_PullDown
 */
void GPIO_Config(GPIO_Config_t *GPIO_Config, GPIO_TypeDef *Port, uint8_t Pin, uint8_t Mode, uint8_t OType, uint8_t OSpeed, uint8_t PUPD)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	4611      	mov	r1, r2
 80007b0:	461a      	mov	r2, r3
 80007b2:	460b      	mov	r3, r1
 80007b4:	71fb      	strb	r3, [r7, #7]
 80007b6:	4613      	mov	r3, r2
 80007b8:	71bb      	strb	r3, [r7, #6]
	GPIO_Config->GPIO_Pin = Pin;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	79fa      	ldrb	r2, [r7, #7]
 80007be:	701a      	strb	r2, [r3, #0]
	GPIO_Config->GPIO_Port = Port;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	609a      	str	r2, [r3, #8]
	GPIO_Config->GPIO_MODE = Mode;
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	79ba      	ldrb	r2, [r7, #6]
 80007ca:	705a      	strb	r2, [r3, #1]
	GPIO_Config->GPIO_OTYPE = OType;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	7e3a      	ldrb	r2, [r7, #24]
 80007d0:	709a      	strb	r2, [r3, #2]
	GPIO_Config->GPIO_OSPEED = OSpeed;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	7f3a      	ldrb	r2, [r7, #28]
 80007d6:	70da      	strb	r2, [r3, #3]
	GPIO_Config->GPIO_PUPD = PUPD;
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f897 2020 	ldrb.w	r2, [r7, #32]
 80007de:	711a      	strb	r2, [r3, #4]
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <GPIO_PeriphClck>:
 * @param	GPIOx: Defines the specific GPIO port, where x can range from A - E, or H.
 *
 * @param	state: Specifies whether to enable or disable the peripheral.
 */
void GPIO_PeriphClck(GPIO_TypeDef *GPIOx, FunctionalState state)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
	if(state == ENABLE)
 80007f8:	78fb      	ldrb	r3, [r7, #3]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d135      	bne.n	800086a <GPIO_PeriphClck+0x7e>
	{
		if(GPIOx == GPIOA)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a36      	ldr	r2, [pc, #216]	; (80008dc <GPIO_PeriphClck+0xf0>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d104      	bne.n	8000810 <GPIO_PeriphClck+0x24>
		{
			RCC_AHB1Cmd(GPIOA_Enable, ENABLE);
 8000806:	2101      	movs	r1, #1
 8000808:	2001      	movs	r0, #1
 800080a:	f000 fcff 	bl	800120c <RCC_AHB1Cmd>
			RCC_AHB1Cmd(GPIOH_Enable, DISABLE);
		}

	}

}
 800080e:	e061      	b.n	80008d4 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOB)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a33      	ldr	r2, [pc, #204]	; (80008e0 <GPIO_PeriphClck+0xf4>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d104      	bne.n	8000822 <GPIO_PeriphClck+0x36>
			RCC_AHB1Cmd(GPIOB_Enable, ENABLE);
 8000818:	2101      	movs	r1, #1
 800081a:	2002      	movs	r0, #2
 800081c:	f000 fcf6 	bl	800120c <RCC_AHB1Cmd>
}
 8000820:	e058      	b.n	80008d4 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOC)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a2f      	ldr	r2, [pc, #188]	; (80008e4 <GPIO_PeriphClck+0xf8>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d104      	bne.n	8000834 <GPIO_PeriphClck+0x48>
			RCC_AHB1Cmd(GPIOC_Enable, ENABLE);
 800082a:	2101      	movs	r1, #1
 800082c:	2004      	movs	r0, #4
 800082e:	f000 fced 	bl	800120c <RCC_AHB1Cmd>
}
 8000832:	e04f      	b.n	80008d4 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOD)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a2c      	ldr	r2, [pc, #176]	; (80008e8 <GPIO_PeriphClck+0xfc>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d104      	bne.n	8000846 <GPIO_PeriphClck+0x5a>
			RCC_AHB1Cmd(GPIOD_Enable, ENABLE);
 800083c:	2101      	movs	r1, #1
 800083e:	2008      	movs	r0, #8
 8000840:	f000 fce4 	bl	800120c <RCC_AHB1Cmd>
}
 8000844:	e046      	b.n	80008d4 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOE)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a28      	ldr	r2, [pc, #160]	; (80008ec <GPIO_PeriphClck+0x100>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d104      	bne.n	8000858 <GPIO_PeriphClck+0x6c>
			RCC_AHB1Cmd(GPIOE_Enable, ENABLE);
 800084e:	2101      	movs	r1, #1
 8000850:	2010      	movs	r0, #16
 8000852:	f000 fcdb 	bl	800120c <RCC_AHB1Cmd>
}
 8000856:	e03d      	b.n	80008d4 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOH)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a25      	ldr	r2, [pc, #148]	; (80008f0 <GPIO_PeriphClck+0x104>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d139      	bne.n	80008d4 <GPIO_PeriphClck+0xe8>
			RCC_AHB1Cmd(GPIOH_Enable, ENABLE);
 8000860:	2101      	movs	r1, #1
 8000862:	2080      	movs	r0, #128	; 0x80
 8000864:	f000 fcd2 	bl	800120c <RCC_AHB1Cmd>
}
 8000868:	e034      	b.n	80008d4 <GPIO_PeriphClck+0xe8>
		if(GPIOx == GPIOA)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4a1b      	ldr	r2, [pc, #108]	; (80008dc <GPIO_PeriphClck+0xf0>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d104      	bne.n	800087c <GPIO_PeriphClck+0x90>
			RCC_AHB1Cmd(GPIOA_Enable, DISABLE);
 8000872:	2100      	movs	r1, #0
 8000874:	2001      	movs	r0, #1
 8000876:	f000 fcc9 	bl	800120c <RCC_AHB1Cmd>
}
 800087a:	e02b      	b.n	80008d4 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOB)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a18      	ldr	r2, [pc, #96]	; (80008e0 <GPIO_PeriphClck+0xf4>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d104      	bne.n	800088e <GPIO_PeriphClck+0xa2>
			RCC_AHB1Cmd(GPIOB_Enable, DISABLE);
 8000884:	2100      	movs	r1, #0
 8000886:	2002      	movs	r0, #2
 8000888:	f000 fcc0 	bl	800120c <RCC_AHB1Cmd>
}
 800088c:	e022      	b.n	80008d4 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOC)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a14      	ldr	r2, [pc, #80]	; (80008e4 <GPIO_PeriphClck+0xf8>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d104      	bne.n	80008a0 <GPIO_PeriphClck+0xb4>
			RCC_AHB1Cmd(GPIOC_Enable, DISABLE);
 8000896:	2100      	movs	r1, #0
 8000898:	2004      	movs	r0, #4
 800089a:	f000 fcb7 	bl	800120c <RCC_AHB1Cmd>
}
 800089e:	e019      	b.n	80008d4 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOD)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a11      	ldr	r2, [pc, #68]	; (80008e8 <GPIO_PeriphClck+0xfc>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d104      	bne.n	80008b2 <GPIO_PeriphClck+0xc6>
			RCC_AHB1Cmd(GPIOD_Enable, DISABLE);
 80008a8:	2100      	movs	r1, #0
 80008aa:	2008      	movs	r0, #8
 80008ac:	f000 fcae 	bl	800120c <RCC_AHB1Cmd>
}
 80008b0:	e010      	b.n	80008d4 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOE)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a0d      	ldr	r2, [pc, #52]	; (80008ec <GPIO_PeriphClck+0x100>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d104      	bne.n	80008c4 <GPIO_PeriphClck+0xd8>
			RCC_AHB1Cmd(GPIOE_Enable, DISABLE);
 80008ba:	2100      	movs	r1, #0
 80008bc:	2010      	movs	r0, #16
 80008be:	f000 fca5 	bl	800120c <RCC_AHB1Cmd>
}
 80008c2:	e007      	b.n	80008d4 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOH)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <GPIO_PeriphClck+0x104>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d103      	bne.n	80008d4 <GPIO_PeriphClck+0xe8>
			RCC_AHB1Cmd(GPIOH_Enable, DISABLE);
 80008cc:	2100      	movs	r1, #0
 80008ce:	2080      	movs	r0, #128	; 0x80
 80008d0:	f000 fc9c 	bl	800120c <RCC_AHB1Cmd>
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40020000 	.word	0x40020000
 80008e0:	40020400 	.word	0x40020400
 80008e4:	40020800 	.word	0x40020800
 80008e8:	40020c00 	.word	0x40020c00
 80008ec:	40021000 	.word	0x40021000
 80008f0:	40021c00 	.word	0x40021c00

080008f4 <GPIO_AlternateFunctionConfig>:
 * @param	alt_function: This will take in the alternate function value that the user wishes to use.
 * 			The specific alternate function values and their functions are present in the data sheet.
 * 			The inputs for this function are AF0 - AF15;
 */
void GPIO_AlternateFunctionConfig(GPIO_Config_t *GPIO_Config, AFR_Config_t alt_function)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	70fb      	strb	r3, [r7, #3]
	uint8_t pin = GPIO_Config->GPIO_Pin;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	73fb      	strb	r3, [r7, #15]
	uint8_t alt_function_array = pin/8;
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	08db      	lsrs	r3, r3, #3
 800090a:	73bb      	strb	r3, [r7, #14]

	if(alt_function_array == 1)
 800090c:	7bbb      	ldrb	r3, [r7, #14]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d102      	bne.n	8000918 <GPIO_AlternateFunctionConfig+0x24>
	{
		pin -= 8;
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	3b08      	subs	r3, #8
 8000916:	73fb      	strb	r3, [r7, #15]
	}

	GPIO_Config->GPIO_Port->AFR[alt_function_array] &= ~(AF15 << (pin * 4));
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	7bba      	ldrb	r2, [r7, #14]
 800091e:	3208      	adds	r2, #8
 8000920:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	220f      	movs	r2, #15
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	43db      	mvns	r3, r3
 8000930:	4618      	mov	r0, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	7bba      	ldrb	r2, [r7, #14]
 8000938:	4001      	ands	r1, r0
 800093a:	3208      	adds	r2, #8
 800093c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GPIO_Config->GPIO_Port->AFR[alt_function_array] |= (alt_function << (pin * 4));
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	7bba      	ldrb	r2, [r7, #14]
 8000946:	3208      	adds	r2, #8
 8000948:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800094c:	78fa      	ldrb	r2, [r7, #3]
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	4618      	mov	r0, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	7bba      	ldrb	r2, [r7, #14]
 800095e:	4301      	orrs	r1, r0
 8000960:	3208      	adds	r2, #8
 8000962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000966:	bf00      	nop
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <GPIO_Init>:
 *
 * @param	GPIO_Config: pointer to the GPIO_Config_t data structure that contains the
 * 			configuration parameters for the specific GPIO pin.
 */
void GPIO_Init(GPIO_Config_t *GPIO_Config, AFR_Config_t alt_function)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	70fb      	strb	r3, [r7, #3]
	uint8_t pin = GPIO_Config->GPIO_Pin;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	73fb      	strb	r3, [r7, #15]
	uint32_t temp_variable;

	GPIO_PeriphClck(GPIO_Config->GPIO_Port, ENABLE);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	2101      	movs	r1, #1
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff2d 	bl	80007ec <GPIO_PeriphClck>

	if(GPIO_Config->GPIO_Pin == AllPins)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b10      	cmp	r3, #16
 8000998:	f040 8094 	bne.w	8000ac4 <GPIO_Init+0x150>
	{
		if(GPIO_Config->GPIO_Port == GPIOA)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	4a88      	ldr	r2, [pc, #544]	; (8000bc4 <GPIO_Init+0x250>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d112      	bne.n	80009cc <GPIO_Init+0x58>
		{
			/*Use the lock configuration to lock PA13 and PA14*/
			GPIO_Config->GPIO_Port->LCKR = LCKR_1_Pin13_Pin14;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	f44f 32b0 	mov.w	r2, #90112	; 0x16000
 80009ae:	61da      	str	r2, [r3, #28]
			GPIO_Config->GPIO_Port->LCKR = LCKR_0_Pin13_Pin14;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80009b8:	61da      	str	r2, [r3, #28]
			GPIO_Config->GPIO_Port->LCKR = LCKR_1_Pin13_Pin14;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	f44f 32b0 	mov.w	r2, #90112	; 0x16000
 80009c2:	61da      	str	r2, [r3, #28]
			temp_variable = GPIO_Config->GPIO_Port->LCKR;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	60bb      	str	r3, [r7, #8]
		}

		/*Used to set each pin is AllPins is set by user*/
		for(pin = 0; pin < 16; pin++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	73fb      	strb	r3, [r7, #15]
 80009d0:	e074      	b.n	8000abc <GPIO_Init+0x148>
		{
			GPIO_Config->GPIO_Port->MODER &= ~(GPIO_Mode_Reset << (pin * 2));
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	2103      	movs	r1, #3
 80009de:	fa01 f303 	lsl.w	r3, r1, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	4619      	mov	r1, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	400a      	ands	r2, r1
 80009ec:	601a      	str	r2, [r3, #0]
			GPIO_Config->GPIO_Port->MODER |= ((GPIO_Config->GPIO_MODE) << (pin * 2));
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	785b      	ldrb	r3, [r3, #1]
 80009f8:	4619      	mov	r1, r3
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000a02:	4619      	mov	r1, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	601a      	str	r2, [r3, #0]

			GPIO_Config->GPIO_Port->OTYPER &= ~(GPIO_OType_Reset << pin);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	685a      	ldr	r2, [r3, #4]
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	2101      	movs	r1, #1
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	400a      	ands	r2, r1
 8000a24:	605a      	str	r2, [r3, #4]
			GPIO_Config->GPIO_Port->OTYPER |= ((GPIO_Config->GPIO_OTYPE) << pin);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	685a      	ldr	r2, [r3, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	789b      	ldrb	r3, [r3, #2]
 8000a30:	4619      	mov	r1, r3
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	fa01 f303 	lsl.w	r3, r1, r3
 8000a38:	4619      	mov	r1, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	605a      	str	r2, [r3, #4]

			GPIO_Config->GPIO_Port->OSPEEDR &= ~(GPIO_OSpeed_Reset << (pin * 2));
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	689a      	ldr	r2, [r3, #8]
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	4619      	mov	r1, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	400a      	ands	r2, r1
 8000a5c:	609a      	str	r2, [r3, #8]
			GPIO_Config->GPIO_Port->OSPEEDR |= ((GPIO_Config->GPIO_OSPEED) << (pin * 2));
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	689a      	ldr	r2, [r3, #8]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	78db      	ldrb	r3, [r3, #3]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a72:	4619      	mov	r1, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	609a      	str	r2, [r3, #8]

			GPIO_Config->GPIO_Port->PUPDR &= ~(GPIO_PUPD_Reset << (pin * 2));
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	68da      	ldr	r2, [r3, #12]
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	2103      	movs	r1, #3
 8000a88:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	4619      	mov	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	400a      	ands	r2, r1
 8000a96:	60da      	str	r2, [r3, #12]
			GPIO_Config->GPIO_Port->PUPDR |= ((GPIO_Config->GPIO_PUPD) << (pin * 2));
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	68da      	ldr	r2, [r3, #12]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	791b      	ldrb	r3, [r3, #4]
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aac:	4619      	mov	r1, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	60da      	str	r2, [r3, #12]
		for(pin = 0; pin < 16; pin++)
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	73fb      	strb	r3, [r7, #15]
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	2b0f      	cmp	r3, #15
 8000ac0:	d987      	bls.n	80009d2 <GPIO_Init+0x5e>

		GPIO_Config->GPIO_Port->MODER &= ~(GPIO_Mode_Reset << (pin * 2));
		GPIO_Config->GPIO_Port->MODER |= ((GPIO_Config->GPIO_MODE) << (pin * 2));
	}

}
 8000ac2:	e07a      	b.n	8000bba <GPIO_Init+0x246>
		if(GPIO_Config->GPIO_MODE == GPIO_AF)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	785b      	ldrb	r3, [r3, #1]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d104      	bne.n	8000ad6 <GPIO_Init+0x162>
			GPIO_AlternateFunctionConfig(GPIO_Config, alt_function);
 8000acc:	78fb      	ldrb	r3, [r7, #3]
 8000ace:	4619      	mov	r1, r3
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ff0f 	bl	80008f4 <GPIO_AlternateFunctionConfig>
		GPIO_Config->GPIO_Port->OTYPER &= ~(GPIO_OType_Reset << pin);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	685a      	ldr	r2, [r3, #4]
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	2101      	movs	r1, #1
 8000ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	400a      	ands	r2, r1
 8000aee:	605a      	str	r2, [r3, #4]
		GPIO_Config->GPIO_Port->OTYPER |= ((GPIO_Config->GPIO_OTYPE) << pin);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	685a      	ldr	r2, [r3, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	789b      	ldrb	r3, [r3, #2]
 8000afa:	4619      	mov	r1, r3
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	4619      	mov	r1, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	605a      	str	r2, [r3, #4]
		GPIO_Config->GPIO_Port->OSPEEDR &= ~(GPIO_OSpeed_Reset << (pin * 2));
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	689a      	ldr	r2, [r3, #8]
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	2101      	movs	r1, #1
 8000b18:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	4619      	mov	r1, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	400a      	ands	r2, r1
 8000b26:	609a      	str	r2, [r3, #8]
		GPIO_Config->GPIO_Port->OSPEEDR |= ((GPIO_Config->GPIO_OSPEED) << (pin * 2));
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	689a      	ldr	r2, [r3, #8]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	78db      	ldrb	r3, [r3, #3]
 8000b32:	4619      	mov	r1, r3
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	430a      	orrs	r2, r1
 8000b44:	609a      	str	r2, [r3, #8]
		GPIO_Config->GPIO_Port->PUPDR &= ~(GPIO_PUPD_Reset << (pin * 2));
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	68da      	ldr	r2, [r3, #12]
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	2103      	movs	r1, #3
 8000b52:	fa01 f303 	lsl.w	r3, r1, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	4619      	mov	r1, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	400a      	ands	r2, r1
 8000b60:	60da      	str	r2, [r3, #12]
		GPIO_Config->GPIO_Port->PUPDR |= ((GPIO_Config->GPIO_PUPD) << (pin * 2));
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	68da      	ldr	r2, [r3, #12]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	791b      	ldrb	r3, [r3, #4]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	fa01 f303 	lsl.w	r3, r1, r3
 8000b76:	4619      	mov	r1, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	60da      	str	r2, [r3, #12]
		GPIO_Config->GPIO_Port->MODER &= ~(GPIO_Mode_Reset << (pin * 2));
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	2103      	movs	r1, #3
 8000b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	4619      	mov	r1, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	400a      	ands	r2, r1
 8000b9a:	601a      	str	r2, [r3, #0]
		GPIO_Config->GPIO_Port->MODER |= ((GPIO_Config->GPIO_MODE) << (pin * 2));
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	785b      	ldrb	r3, [r3, #1]
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	601a      	str	r2, [r3, #0]
}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40020000 	.word	0x40020000

08000bc8 <SPI1_Periph_Enable>:

/*
 * @Brief SPI peripheral enabled specified for SPI1. There are 3 other functions: 1 for each SPI peripheral.
 */
void SPI1_Periph_Enable(uint8_t ssm_enabled, GPIO_TypeDef *GPIOx, uint8_t cs_pin, uint8_t clk_pin, uint8_t mosi_pin, uint8_t miso_pin)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af04      	add	r7, sp, #16
 8000bce:	6039      	str	r1, [r7, #0]
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	71fb      	strb	r3, [r7, #7]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	71bb      	strb	r3, [r7, #6]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	717b      	strb	r3, [r7, #5]
	GPIO_Config_t SPI1_Periph;

	//Check if SSM bit is disabled
	if(!ssm_enabled)
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d112      	bne.n	8000c0c <SPI1_Periph_Enable+0x44>
	{
		//Configure the NSS pin for alternate function
		GPIO_Config(&SPI1_Periph, GPIOA, cs_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000be6:	79ba      	ldrb	r2, [r7, #6]
 8000be8:	f107 000c 	add.w	r0, r7, #12
 8000bec:	2300      	movs	r3, #0
 8000bee:	9302      	str	r3, [sp, #8]
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	9301      	str	r3, [sp, #4]
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	494d      	ldr	r1, [pc, #308]	; (8000d30 <SPI1_Periph_Enable+0x168>)
 8000bfc:	f7ff fdd2 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	2105      	movs	r1, #5
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff feb4 	bl	8000974 <GPIO_Init>
		GPIO_Config(&SPI1_Periph, GPIOA, Pin9, GPIO_Output, GPIO_PushPull, GPIO_HighSpeed, GPIO_PullUp);
		GPIO_Init(&SPI1_Periph, 0x0);
	}*/

	//Configure the SPI clock pin
	switch(clk_pin){
 8000c0c:	797b      	ldrb	r3, [r7, #5]
 8000c0e:	2b03      	cmp	r3, #3
 8000c10:	d015      	beq.n	8000c3e <SPI1_Periph_Enable+0x76>
 8000c12:	2b05      	cmp	r3, #5
 8000c14:	d127      	bne.n	8000c66 <SPI1_Periph_Enable+0x9e>
	case 5:
		GPIO_Config(&SPI1_Periph, GPIOA, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000c16:	797a      	ldrb	r2, [r7, #5]
 8000c18:	f107 000c 	add.w	r0, r7, #12
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	9302      	str	r3, [sp, #8]
 8000c20:	2300      	movs	r3, #0
 8000c22:	9301      	str	r3, [sp, #4]
 8000c24:	2300      	movs	r3, #0
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	2302      	movs	r3, #2
 8000c2a:	4941      	ldr	r1, [pc, #260]	; (8000d30 <SPI1_Periph_Enable+0x168>)
 8000c2c:	f7ff fdba 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	2105      	movs	r1, #5
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fe9c 	bl	8000974 <GPIO_Init>
		break;
 8000c3c:	e013      	b.n	8000c66 <SPI1_Periph_Enable+0x9e>
	case 3:
		GPIO_Config(&SPI1_Periph, GPIOB, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000c3e:	797a      	ldrb	r2, [r7, #5]
 8000c40:	f107 000c 	add.w	r0, r7, #12
 8000c44:	2300      	movs	r3, #0
 8000c46:	9302      	str	r3, [sp, #8]
 8000c48:	2300      	movs	r3, #0
 8000c4a:	9301      	str	r3, [sp, #4]
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	2302      	movs	r3, #2
 8000c52:	4938      	ldr	r1, [pc, #224]	; (8000d34 <SPI1_Periph_Enable+0x16c>)
 8000c54:	f7ff fda6 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	2105      	movs	r1, #5
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fe88 	bl	8000974 <GPIO_Init>
		break;
 8000c64:	bf00      	nop
	}

	//Conigure MISO pin
	switch(miso_pin){
 8000c66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	d016      	beq.n	8000c9c <SPI1_Periph_Enable+0xd4>
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d129      	bne.n	8000cc6 <SPI1_Periph_Enable+0xfe>
	case 6:
		GPIO_Config(&SPI1_Periph, GPIOA, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000c72:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000c76:	f107 000c 	add.w	r0, r7, #12
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	9302      	str	r3, [sp, #8]
 8000c7e:	2300      	movs	r3, #0
 8000c80:	9301      	str	r3, [sp, #4]
 8000c82:	2300      	movs	r3, #0
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	2302      	movs	r3, #2
 8000c88:	4929      	ldr	r1, [pc, #164]	; (8000d30 <SPI1_Periph_Enable+0x168>)
 8000c8a:	f7ff fd8b 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	2105      	movs	r1, #5
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fe6d 	bl	8000974 <GPIO_Init>
		break;
 8000c9a:	e014      	b.n	8000cc6 <SPI1_Periph_Enable+0xfe>
	case 4:
		GPIO_Config(&SPI1_Periph, GPIOB, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000c9c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000ca0:	f107 000c 	add.w	r0, r7, #12
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	9302      	str	r3, [sp, #8]
 8000ca8:	2300      	movs	r3, #0
 8000caa:	9301      	str	r3, [sp, #4]
 8000cac:	2300      	movs	r3, #0
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	4920      	ldr	r1, [pc, #128]	; (8000d34 <SPI1_Periph_Enable+0x16c>)
 8000cb4:	f7ff fd76 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fe58 	bl	8000974 <GPIO_Init>
		break;
 8000cc4:	bf00      	nop
	}

	//Configure MOSI pin
	switch(mosi_pin){
 8000cc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cca:	2b05      	cmp	r3, #5
 8000ccc:	d016      	beq.n	8000cfc <SPI1_Periph_Enable+0x134>
 8000cce:	2b07      	cmp	r3, #7
 8000cd0:	d129      	bne.n	8000d26 <SPI1_Periph_Enable+0x15e>
	case 7:
		GPIO_Config(&SPI1_Periph, GPIOA, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000cd2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000cd6:	f107 000c 	add.w	r0, r7, #12
 8000cda:	2300      	movs	r3, #0
 8000cdc:	9302      	str	r3, [sp, #8]
 8000cde:	2300      	movs	r3, #0
 8000ce0:	9301      	str	r3, [sp, #4]
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	4911      	ldr	r1, [pc, #68]	; (8000d30 <SPI1_Periph_Enable+0x168>)
 8000cea:	f7ff fd5b 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	2105      	movs	r1, #5
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fe3d 	bl	8000974 <GPIO_Init>
		break;
 8000cfa:	e014      	b.n	8000d26 <SPI1_Periph_Enable+0x15e>
	case 5:
		GPIO_Config(&SPI1_Periph, GPIOB, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000cfc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d00:	f107 000c 	add.w	r0, r7, #12
 8000d04:	2300      	movs	r3, #0
 8000d06:	9302      	str	r3, [sp, #8]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	9301      	str	r3, [sp, #4]
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	2302      	movs	r3, #2
 8000d12:	4908      	ldr	r1, [pc, #32]	; (8000d34 <SPI1_Periph_Enable+0x16c>)
 8000d14:	f7ff fd46 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	2105      	movs	r1, #5
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fe28 	bl	8000974 <GPIO_Init>
		break;
 8000d24:	bf00      	nop
	}
}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40020000 	.word	0x40020000
 8000d34:	40020400 	.word	0x40020400

08000d38 <SPI2_Periph_Enable>:

void SPI2_Periph_Enable(uint8_t ssm_enabled, GPIO_TypeDef *GPIOx, uint8_t cs_pin, uint8_t clk_pin, uint8_t mosi_pin, uint8_t miso_pin)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af04      	add	r7, sp, #16
 8000d3e:	6039      	str	r1, [r7, #0]
 8000d40:	4611      	mov	r1, r2
 8000d42:	461a      	mov	r2, r3
 8000d44:	4603      	mov	r3, r0
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	71bb      	strb	r3, [r7, #6]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	717b      	strb	r3, [r7, #5]
	GPIO_Config_t SPI2_Periph;

	//Check if SSM bit is enabled
	if(ssm_enabled)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d013      	beq.n	8000d7e <SPI2_Periph_Enable+0x46>
	{
		//Config the specified pin and port for the chip select
		GPIO_Config(&SPI2_Periph, GPIOx, cs_pin, GPIO_Output, GPIO_PushPull, GPIO_LowSpeed, GPIO_PullUp);
 8000d56:	79ba      	ldrb	r2, [r7, #6]
 8000d58:	f107 000c 	add.w	r0, r7, #12
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	9302      	str	r3, [sp, #8]
 8000d60:	2300      	movs	r3, #0
 8000d62:	9301      	str	r3, [sp, #4]
 8000d64:	2300      	movs	r3, #0
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	2301      	movs	r3, #1
 8000d6a:	6839      	ldr	r1, [r7, #0]
 8000d6c:	f7ff fd1a 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, 0x00);
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fdfc 	bl	8000974 <GPIO_Init>
 8000d7c:	e012      	b.n	8000da4 <SPI2_Periph_Enable+0x6c>
	}
	//If SSOE is enabled
	else
	{
		//Configure the NSS pin for alternate function
		GPIO_Config(&SPI2_Periph, GPIOB, cs_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000d7e:	79ba      	ldrb	r2, [r7, #6]
 8000d80:	f107 000c 	add.w	r0, r7, #12
 8000d84:	2300      	movs	r3, #0
 8000d86:	9302      	str	r3, [sp, #8]
 8000d88:	2300      	movs	r3, #0
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2302      	movs	r3, #2
 8000d92:	494d      	ldr	r1, [pc, #308]	; (8000ec8 <SPI2_Periph_Enable+0x190>)
 8000d94:	f7ff fd06 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	2105      	movs	r1, #5
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fde8 	bl	8000974 <GPIO_Init>
	}

	//Configure the SPI clock pin
	switch(clk_pin){
 8000da4:	797b      	ldrb	r3, [r7, #5]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d113      	bne.n	8000dd2 <SPI2_Periph_Enable+0x9a>
	case 3:
		GPIO_Config(&SPI2_Periph, GPIOD, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000daa:	797a      	ldrb	r2, [r7, #5]
 8000dac:	f107 000c 	add.w	r0, r7, #12
 8000db0:	2300      	movs	r3, #0
 8000db2:	9302      	str	r3, [sp, #8]
 8000db4:	2300      	movs	r3, #0
 8000db6:	9301      	str	r3, [sp, #4]
 8000db8:	2300      	movs	r3, #0
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	4943      	ldr	r1, [pc, #268]	; (8000ecc <SPI2_Periph_Enable+0x194>)
 8000dc0:	f7ff fcf0 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	2105      	movs	r1, #5
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fdd2 	bl	8000974 <GPIO_Init>
		break;
 8000dd0:	e013      	b.n	8000dfa <SPI2_Periph_Enable+0xc2>
	default:
		GPIO_Config(&SPI2_Periph, GPIOB, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000dd2:	797a      	ldrb	r2, [r7, #5]
 8000dd4:	f107 000c 	add.w	r0, r7, #12
 8000dd8:	2300      	movs	r3, #0
 8000dda:	9302      	str	r3, [sp, #8]
 8000ddc:	2300      	movs	r3, #0
 8000dde:	9301      	str	r3, [sp, #4]
 8000de0:	2300      	movs	r3, #0
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2302      	movs	r3, #2
 8000de6:	4938      	ldr	r1, [pc, #224]	; (8000ec8 <SPI2_Periph_Enable+0x190>)
 8000de8:	f7ff fcdc 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	2105      	movs	r1, #5
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fdbe 	bl	8000974 <GPIO_Init>
		break;
 8000df8:	bf00      	nop
	}

	//Conigure MISO pin
	switch(miso_pin){
 8000dfa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d002      	beq.n	8000e08 <SPI2_Periph_Enable+0xd0>
 8000e02:	2b0e      	cmp	r3, #14
 8000e04:	d015      	beq.n	8000e32 <SPI2_Periph_Enable+0xfa>
 8000e06:	e029      	b.n	8000e5c <SPI2_Periph_Enable+0x124>
	case 2:
		GPIO_Config(&SPI2_Periph, GPIOC, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000e08:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000e0c:	f107 000c 	add.w	r0, r7, #12
 8000e10:	2300      	movs	r3, #0
 8000e12:	9302      	str	r3, [sp, #8]
 8000e14:	2300      	movs	r3, #0
 8000e16:	9301      	str	r3, [sp, #4]
 8000e18:	2300      	movs	r3, #0
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	492c      	ldr	r1, [pc, #176]	; (8000ed0 <SPI2_Periph_Enable+0x198>)
 8000e20:	f7ff fcc0 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	2105      	movs	r1, #5
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fda2 	bl	8000974 <GPIO_Init>
		break;
 8000e30:	e014      	b.n	8000e5c <SPI2_Periph_Enable+0x124>
	case 14:
		GPIO_Config(&SPI2_Periph, GPIOB, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000e32:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000e36:	f107 000c 	add.w	r0, r7, #12
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	9302      	str	r3, [sp, #8]
 8000e3e:	2300      	movs	r3, #0
 8000e40:	9301      	str	r3, [sp, #4]
 8000e42:	2300      	movs	r3, #0
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	2302      	movs	r3, #2
 8000e48:	491f      	ldr	r1, [pc, #124]	; (8000ec8 <SPI2_Periph_Enable+0x190>)
 8000e4a:	f7ff fcab 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8000e4e:	f107 030c 	add.w	r3, r7, #12
 8000e52:	2105      	movs	r1, #5
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fd8d 	bl	8000974 <GPIO_Init>
		break;
 8000e5a:	bf00      	nop
	}

	//Configure MOSI pin
	switch(mosi_pin){
 8000e5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e60:	2b03      	cmp	r3, #3
 8000e62:	d002      	beq.n	8000e6a <SPI2_Periph_Enable+0x132>
 8000e64:	2b0f      	cmp	r3, #15
 8000e66:	d015      	beq.n	8000e94 <SPI2_Periph_Enable+0x15c>
	case 15:
		GPIO_Config(&SPI2_Periph, GPIOB, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
		GPIO_Init(&SPI2_Periph, AF5);
		break;
	}
}
 8000e68:	e029      	b.n	8000ebe <SPI2_Periph_Enable+0x186>
		GPIO_Config(&SPI2_Periph, GPIOC, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000e6a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000e6e:	f107 000c 	add.w	r0, r7, #12
 8000e72:	2300      	movs	r3, #0
 8000e74:	9302      	str	r3, [sp, #8]
 8000e76:	2300      	movs	r3, #0
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2302      	movs	r3, #2
 8000e80:	4913      	ldr	r1, [pc, #76]	; (8000ed0 <SPI2_Periph_Enable+0x198>)
 8000e82:	f7ff fc8f 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	2105      	movs	r1, #5
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fd71 	bl	8000974 <GPIO_Init>
		break;
 8000e92:	e014      	b.n	8000ebe <SPI2_Periph_Enable+0x186>
		GPIO_Config(&SPI2_Periph, GPIOB, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000e94:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000e98:	f107 000c 	add.w	r0, r7, #12
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	9302      	str	r3, [sp, #8]
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	4907      	ldr	r1, [pc, #28]	; (8000ec8 <SPI2_Periph_Enable+0x190>)
 8000eac:	f7ff fc7a 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	2105      	movs	r1, #5
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fd5c 	bl	8000974 <GPIO_Init>
		break;
 8000ebc:	bf00      	nop
}
 8000ebe:	bf00      	nop
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40020400 	.word	0x40020400
 8000ecc:	40020c00 	.word	0x40020c00
 8000ed0:	40020800 	.word	0x40020800

08000ed4 <SPI3_Periph_Enable>:

void SPI3_Periph_Enable(uint8_t ssm_enabled, GPIO_TypeDef *GPIOx, uint8_t cs_pin, uint8_t clk_pin, uint8_t mosi_pin, uint8_t miso_pin)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af04      	add	r7, sp, #16
 8000eda:	6039      	str	r1, [r7, #0]
 8000edc:	4611      	mov	r1, r2
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	71bb      	strb	r3, [r7, #6]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	717b      	strb	r3, [r7, #5]
	GPIO_Config_t SPI3_Periph;

	//Check if SSM bit is enabled
	if(ssm_enabled)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d013      	beq.n	8000f1a <SPI3_Periph_Enable+0x46>
	{
		//Config the specified pin and port for the chip select
		GPIO_Config(&SPI3_Periph, GPIOx, cs_pin, GPIO_Output, GPIO_PushPull, GPIO_LowSpeed, GPIO_PullUp);
 8000ef2:	79ba      	ldrb	r2, [r7, #6]
 8000ef4:	f107 000c 	add.w	r0, r7, #12
 8000ef8:	2301      	movs	r3, #1
 8000efa:	9302      	str	r3, [sp, #8]
 8000efc:	2300      	movs	r3, #0
 8000efe:	9301      	str	r3, [sp, #4]
 8000f00:	2300      	movs	r3, #0
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2301      	movs	r3, #1
 8000f06:	6839      	ldr	r1, [r7, #0]
 8000f08:	f7ff fc4c 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, 0x00);
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fd2e 	bl	8000974 <GPIO_Init>
 8000f18:	e012      	b.n	8000f40 <SPI3_Periph_Enable+0x6c>
	}
	//If SSOE is enabled
	else
	{
		//Configure the NSS pin for alternate function
		GPIO_Config(&SPI3_Periph, GPIOA, cs_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000f1a:	79ba      	ldrb	r2, [r7, #6]
 8000f1c:	f107 000c 	add.w	r0, r7, #12
 8000f20:	2300      	movs	r3, #0
 8000f22:	9302      	str	r3, [sp, #8]
 8000f24:	2300      	movs	r3, #0
 8000f26:	9301      	str	r3, [sp, #4]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	495a      	ldr	r1, [pc, #360]	; (8001098 <SPI3_Periph_Enable+0x1c4>)
 8000f30:	f7ff fc38 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	2106      	movs	r1, #6
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fd1a 	bl	8000974 <GPIO_Init>
	}

	//Configure the SPI clock pin
	switch(clk_pin){
 8000f40:	797b      	ldrb	r3, [r7, #5]
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d015      	beq.n	8000f72 <SPI3_Periph_Enable+0x9e>
 8000f46:	2b0a      	cmp	r3, #10
 8000f48:	d127      	bne.n	8000f9a <SPI3_Periph_Enable+0xc6>
	case 10:
		GPIO_Config(&SPI3_Periph, GPIOC, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000f4a:	797a      	ldrb	r2, [r7, #5]
 8000f4c:	f107 000c 	add.w	r0, r7, #12
 8000f50:	2300      	movs	r3, #0
 8000f52:	9302      	str	r3, [sp, #8]
 8000f54:	2300      	movs	r3, #0
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	2300      	movs	r3, #0
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	494f      	ldr	r1, [pc, #316]	; (800109c <SPI3_Periph_Enable+0x1c8>)
 8000f60:	f7ff fc20 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2106      	movs	r1, #6
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fd02 	bl	8000974 <GPIO_Init>
		break;
 8000f70:	e013      	b.n	8000f9a <SPI3_Periph_Enable+0xc6>
	case 3:
		GPIO_Config(&SPI3_Periph, GPIOB, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000f72:	797a      	ldrb	r2, [r7, #5]
 8000f74:	f107 000c 	add.w	r0, r7, #12
 8000f78:	2300      	movs	r3, #0
 8000f7a:	9302      	str	r3, [sp, #8]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	2300      	movs	r3, #0
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2302      	movs	r3, #2
 8000f86:	4946      	ldr	r1, [pc, #280]	; (80010a0 <SPI3_Periph_Enable+0x1cc>)
 8000f88:	f7ff fc0c 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2106      	movs	r1, #6
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fcee 	bl	8000974 <GPIO_Init>
		break;
 8000f98:	bf00      	nop
	}

	//Conigure MISO pin
	switch(miso_pin){
 8000f9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	d016      	beq.n	8000fd0 <SPI3_Periph_Enable+0xfc>
 8000fa2:	2b0b      	cmp	r3, #11
 8000fa4:	d129      	bne.n	8000ffa <SPI3_Periph_Enable+0x126>
	case 11:
		GPIO_Config(&SPI3_Periph, GPIOC, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000fa6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000faa:	f107 000c 	add.w	r0, r7, #12
 8000fae:	2300      	movs	r3, #0
 8000fb0:	9302      	str	r3, [sp, #8]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2302      	movs	r3, #2
 8000fbc:	4937      	ldr	r1, [pc, #220]	; (800109c <SPI3_Periph_Enable+0x1c8>)
 8000fbe:	f7ff fbf1 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	2106      	movs	r1, #6
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fcd3 	bl	8000974 <GPIO_Init>
		break;
 8000fce:	e014      	b.n	8000ffa <SPI3_Periph_Enable+0x126>
	case 4:
		GPIO_Config(&SPI3_Periph, GPIOB, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000fd0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000fd4:	f107 000c 	add.w	r0, r7, #12
 8000fd8:	2300      	movs	r3, #0
 8000fda:	9302      	str	r3, [sp, #8]
 8000fdc:	2300      	movs	r3, #0
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	492e      	ldr	r1, [pc, #184]	; (80010a0 <SPI3_Periph_Enable+0x1cc>)
 8000fe8:	f7ff fbdc 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	2106      	movs	r1, #6
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fcbe 	bl	8000974 <GPIO_Init>
		break;
 8000ff8:	bf00      	nop
	}

	//Configure MOSI pin
	switch(mosi_pin){
 8000ffa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ffe:	2b0c      	cmp	r3, #12
 8001000:	d006      	beq.n	8001010 <SPI3_Periph_Enable+0x13c>
 8001002:	2b0c      	cmp	r3, #12
 8001004:	dc43      	bgt.n	800108e <SPI3_Periph_Enable+0x1ba>
 8001006:	2b05      	cmp	r3, #5
 8001008:	d017      	beq.n	800103a <SPI3_Periph_Enable+0x166>
 800100a:	2b06      	cmp	r3, #6
 800100c:	d02a      	beq.n	8001064 <SPI3_Periph_Enable+0x190>
		break;
	case 6:
		GPIO_Config(&SPI3_Periph, GPIOD, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
		GPIO_Init(&SPI3_Periph, AF5);
	}
}
 800100e:	e03e      	b.n	800108e <SPI3_Periph_Enable+0x1ba>
		GPIO_Config(&SPI3_Periph, GPIOC, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001010:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001014:	f107 000c 	add.w	r0, r7, #12
 8001018:	2300      	movs	r3, #0
 800101a:	9302      	str	r3, [sp, #8]
 800101c:	2300      	movs	r3, #0
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	2300      	movs	r3, #0
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2302      	movs	r3, #2
 8001026:	491d      	ldr	r1, [pc, #116]	; (800109c <SPI3_Periph_Enable+0x1c8>)
 8001028:	f7ff fbbc 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	2106      	movs	r1, #6
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fc9e 	bl	8000974 <GPIO_Init>
		break;
 8001038:	e029      	b.n	800108e <SPI3_Periph_Enable+0x1ba>
		GPIO_Config(&SPI3_Periph, GPIOB, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 800103a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800103e:	f107 000c 	add.w	r0, r7, #12
 8001042:	2300      	movs	r3, #0
 8001044:	9302      	str	r3, [sp, #8]
 8001046:	2300      	movs	r3, #0
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	2300      	movs	r3, #0
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2302      	movs	r3, #2
 8001050:	4913      	ldr	r1, [pc, #76]	; (80010a0 <SPI3_Periph_Enable+0x1cc>)
 8001052:	f7ff fba7 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	2106      	movs	r1, #6
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fc89 	bl	8000974 <GPIO_Init>
		break;
 8001062:	e014      	b.n	800108e <SPI3_Periph_Enable+0x1ba>
		GPIO_Config(&SPI3_Periph, GPIOD, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001064:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001068:	f107 000c 	add.w	r0, r7, #12
 800106c:	2300      	movs	r3, #0
 800106e:	9302      	str	r3, [sp, #8]
 8001070:	2300      	movs	r3, #0
 8001072:	9301      	str	r3, [sp, #4]
 8001074:	2300      	movs	r3, #0
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	2302      	movs	r3, #2
 800107a:	490a      	ldr	r1, [pc, #40]	; (80010a4 <SPI3_Periph_Enable+0x1d0>)
 800107c:	f7ff fb92 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF5);
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2105      	movs	r1, #5
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fc74 	bl	8000974 <GPIO_Init>
}
 800108c:	e7ff      	b.n	800108e <SPI3_Periph_Enable+0x1ba>
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40020000 	.word	0x40020000
 800109c:	40020800 	.word	0x40020800
 80010a0:	40020400 	.word	0x40020400
 80010a4:	40020c00 	.word	0x40020c00

080010a8 <SPI4_Periph_Enable>:

void SPI4_Periph_Enable(uint8_t ssm_enabled, GPIO_TypeDef *GPIOx, uint8_t cs_pin, uint8_t clk_pin, uint8_t mosi_pin, uint8_t miso_pin)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af04      	add	r7, sp, #16
 80010ae:	6039      	str	r1, [r7, #0]
 80010b0:	4611      	mov	r1, r2
 80010b2:	461a      	mov	r2, r3
 80010b4:	4603      	mov	r3, r0
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	460b      	mov	r3, r1
 80010ba:	71bb      	strb	r3, [r7, #6]
 80010bc:	4613      	mov	r3, r2
 80010be:	717b      	strb	r3, [r7, #5]
	GPIO_Config_t SPI4_Periph;

	//Check if SSM bit is enabled
	if(ssm_enabled)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d013      	beq.n	80010ee <SPI4_Periph_Enable+0x46>
	{
		//Config the specified pin and port for the chip select
		GPIO_Config(&SPI4_Periph, GPIOx, cs_pin, GPIO_Output, GPIO_PushPull, GPIO_LowSpeed, GPIO_PullUp);
 80010c6:	79ba      	ldrb	r2, [r7, #6]
 80010c8:	f107 000c 	add.w	r0, r7, #12
 80010cc:	2301      	movs	r3, #1
 80010ce:	9302      	str	r3, [sp, #8]
 80010d0:	2300      	movs	r3, #0
 80010d2:	9301      	str	r3, [sp, #4]
 80010d4:	2300      	movs	r3, #0
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	6839      	ldr	r1, [r7, #0]
 80010dc:	f7ff fb62 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI4_Periph, 0x00);
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fc44 	bl	8000974 <GPIO_Init>
 80010ec:	e012      	b.n	8001114 <SPI4_Periph_Enable+0x6c>
	}
	//If SSOE is enabled
	else
	{
		//Configure the NSS pin for alternate function
		GPIO_Config(&SPI4_Periph, GPIOE, cs_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 80010ee:	79ba      	ldrb	r2, [r7, #6]
 80010f0:	f107 000c 	add.w	r0, r7, #12
 80010f4:	2300      	movs	r3, #0
 80010f6:	9302      	str	r3, [sp, #8]
 80010f8:	2300      	movs	r3, #0
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	2300      	movs	r3, #0
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2302      	movs	r3, #2
 8001102:	4924      	ldr	r1, [pc, #144]	; (8001194 <SPI4_Periph_Enable+0xec>)
 8001104:	f7ff fb4e 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI4_Periph, AF5);
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2105      	movs	r1, #5
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fc30 	bl	8000974 <GPIO_Init>
	}

	//Configure the SPI clock pin
	GPIO_Config(&SPI4_Periph, GPIOE, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001114:	797a      	ldrb	r2, [r7, #5]
 8001116:	f107 000c 	add.w	r0, r7, #12
 800111a:	2300      	movs	r3, #0
 800111c:	9302      	str	r3, [sp, #8]
 800111e:	2300      	movs	r3, #0
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	2300      	movs	r3, #0
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2302      	movs	r3, #2
 8001128:	491a      	ldr	r1, [pc, #104]	; (8001194 <SPI4_Periph_Enable+0xec>)
 800112a:	f7ff fb3b 	bl	80007a4 <GPIO_Config>
	GPIO_Init(&SPI4_Periph, AF5);
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	2105      	movs	r1, #5
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fc1d 	bl	8000974 <GPIO_Init>

	//Configure MISO Pin
	GPIO_Config(&SPI4_Periph, GPIOE, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 800113a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800113e:	f107 000c 	add.w	r0, r7, #12
 8001142:	2300      	movs	r3, #0
 8001144:	9302      	str	r3, [sp, #8]
 8001146:	2300      	movs	r3, #0
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	2300      	movs	r3, #0
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2302      	movs	r3, #2
 8001150:	4910      	ldr	r1, [pc, #64]	; (8001194 <SPI4_Periph_Enable+0xec>)
 8001152:	f7ff fb27 	bl	80007a4 <GPIO_Config>
	GPIO_Init(&SPI4_Periph, AF5);
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	2105      	movs	r1, #5
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fc09 	bl	8000974 <GPIO_Init>

	//Configure MOSI pin
	GPIO_Config(&SPI4_Periph, GPIOE, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001162:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001166:	f107 000c 	add.w	r0, r7, #12
 800116a:	2300      	movs	r3, #0
 800116c:	9302      	str	r3, [sp, #8]
 800116e:	2300      	movs	r3, #0
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	2300      	movs	r3, #0
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2302      	movs	r3, #2
 8001178:	4906      	ldr	r1, [pc, #24]	; (8001194 <SPI4_Periph_Enable+0xec>)
 800117a:	f7ff fb13 	bl	80007a4 <GPIO_Config>
	GPIO_Init(&SPI4_Periph, AF5);
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	2105      	movs	r1, #5
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fbf5 	bl	8000974 <GPIO_Init>

}
 800118a:	bf00      	nop
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000

08001198 <GPIO_WritePin>:
 *			GPIO_Reset		or		0x2
 *			GPIO_Toggle		or		0x3
 */

void GPIO_WritePin(GPIO_Config_t *GPIO_Config, uint8_t State)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
	uint8_t pin = GPIO_Config->GPIO_Pin;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	73fb      	strb	r3, [r7, #15]

	if(State == GPIO_Write)
 80011aa:	78fb      	ldrb	r3, [r7, #3]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d10a      	bne.n	80011c6 <GPIO_WritePin+0x2e>
	{
		GPIO_Config->GPIO_Port->ODR |= (0x1UL << pin);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	6959      	ldr	r1, [r3, #20]
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	2201      	movs	r2, #1
 80011ba:	409a      	lsls	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	430a      	orrs	r2, r1
 80011c2:	615a      	str	r2, [r3, #20]
	else if(State == GPIO_Toggle)
	{
		GPIO_Config->GPIO_Port->ODR ^= (0x1UL << pin);
	}

}
 80011c4:	e01c      	b.n	8001200 <GPIO_WritePin+0x68>
	else if(State == GPIO_Reset)
 80011c6:	78fb      	ldrb	r3, [r7, #3]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d10c      	bne.n	80011e6 <GPIO_WritePin+0x4e>
		GPIO_Config->GPIO_Port->ODR &= ~(0x1UL << pin);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	6959      	ldr	r1, [r3, #20]
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	2201      	movs	r2, #1
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	400a      	ands	r2, r1
 80011e2:	615a      	str	r2, [r3, #20]
}
 80011e4:	e00c      	b.n	8001200 <GPIO_WritePin+0x68>
	else if(State == GPIO_Toggle)
 80011e6:	78fb      	ldrb	r3, [r7, #3]
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d109      	bne.n	8001200 <GPIO_WritePin+0x68>
		GPIO_Config->GPIO_Port->ODR ^= (0x1UL << pin);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	6959      	ldr	r1, [r3, #20]
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	2201      	movs	r2, #1
 80011f6:	409a      	lsls	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	404a      	eors	r2, r1
 80011fe:	615a      	str	r2, [r3, #20]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <RCC_AHB1Cmd>:
 * @param	AHB1_Periph: Specific peripheral selected by the user (GPIOx, SPIx, I2Cx etc)
 *
 * @param	State: Specifies whether to enable or disable the peripheral.
 */
void RCC_AHB1Cmd(uint32_t AHB1_Periph, FunctionalState State)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d106      	bne.n	800122c <RCC_AHB1Cmd+0x20>
	{
		RCC->AHB1ENR |= AHB1_Periph;
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <RCC_AHB1Cmd+0x3c>)
 8001220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001222:	4909      	ldr	r1, [pc, #36]	; (8001248 <RCC_AHB1Cmd+0x3c>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4313      	orrs	r3, r2
 8001228:	630b      	str	r3, [r1, #48]	; 0x30

	else
	{
		RCC->AHB1ENR &= ~AHB1_Periph;
	}
}
 800122a:	e006      	b.n	800123a <RCC_AHB1Cmd+0x2e>
		RCC->AHB1ENR &= ~AHB1_Periph;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <RCC_AHB1Cmd+0x3c>)
 800122e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	43db      	mvns	r3, r3
 8001234:	4904      	ldr	r1, [pc, #16]	; (8001248 <RCC_AHB1Cmd+0x3c>)
 8001236:	4013      	ands	r3, r2
 8001238:	630b      	str	r3, [r1, #48]	; 0x30
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800

0800124c <RCC_APB1Cmd>:
 * @param	APB1_Periph: Specific peripheral selected by the user (GPIOx, SPIx, I2Cx etc)
 *
 * @param	State: Specifies whether to enable or disable the peripheral.
 */
void RCC_APB1Cmd(uint32_t APB1_Periph, FunctionalState State)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d106      	bne.n	800126c <RCC_APB1Cmd+0x20>
	{
		RCC->APB1ENR |= APB1_Periph;
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <RCC_APB1Cmd+0x3c>)
 8001260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001262:	4909      	ldr	r1, [pc, #36]	; (8001288 <RCC_APB1Cmd+0x3c>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4313      	orrs	r3, r2
 8001268:	640b      	str	r3, [r1, #64]	; 0x40

	else
	{
		RCC->APB1ENR &= ~APB1_Periph;
	}
}
 800126a:	e006      	b.n	800127a <RCC_APB1Cmd+0x2e>
		RCC->APB1ENR &= ~APB1_Periph;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <RCC_APB1Cmd+0x3c>)
 800126e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	43db      	mvns	r3, r3
 8001274:	4904      	ldr	r1, [pc, #16]	; (8001288 <RCC_APB1Cmd+0x3c>)
 8001276:	4013      	ands	r3, r2
 8001278:	640b      	str	r3, [r1, #64]	; 0x40
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800

0800128c <RCC_APB2Cmd>:
 * @param	APB2_Periph: Specific peripheral selected by the user (GPIOx, SPIx, I2Cx etc)
 *
 * @param	State: Specifies whether to enable or disable the peripheral.
 */
void RCC_APB2Cmd(uint32_t APB2_Periph, FunctionalState State)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 8001298:	78fb      	ldrb	r3, [r7, #3]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d106      	bne.n	80012ac <RCC_APB2Cmd+0x20>
	{
		RCC->APB2ENR |= APB2_Periph;
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <RCC_APB2Cmd+0x3c>)
 80012a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012a2:	4909      	ldr	r1, [pc, #36]	; (80012c8 <RCC_APB2Cmd+0x3c>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	644b      	str	r3, [r1, #68]	; 0x44

	else
	{
		RCC->APB2ENR &= ~APB2_Periph;
	}
}
 80012aa:	e006      	b.n	80012ba <RCC_APB2Cmd+0x2e>
		RCC->APB2ENR &= ~APB2_Periph;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <RCC_APB2Cmd+0x3c>)
 80012ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	4904      	ldr	r1, [pc, #16]	; (80012c8 <RCC_APB2Cmd+0x3c>)
 80012b6:	4013      	ands	r3, r2
 80012b8:	644b      	str	r3, [r1, #68]	; 0x44
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800

080012cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	db0b      	blt.n	80012f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	f003 021f 	and.w	r2, r3, #31
 80012e4:	4907      	ldr	r1, [pc, #28]	; (8001304 <__NVIC_EnableIRQ+0x38>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	2001      	movs	r0, #1
 80012ee:	fa00 f202 	lsl.w	r2, r0, r2
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100

08001308 <Check_Flag>:
 * brief	A helper function that keeps track of specific flags in the status register.
 *
 * @retval	Returns status of the flag which is defined in an enumeration.
 */
static Flag_Status Check_Flag(SPI_Handle_t *SPI_Handle, uint32_t flag)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
	if(SPI_Handle->SPIx->SR & flag)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	4013      	ands	r3, r2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <Check_Flag+0x1c>
	{
		return Flag_Set;
 8001320:	2301      	movs	r3, #1
 8001322:	e000      	b.n	8001326 <Check_Flag+0x1e>
	}

	else
	{
		return Flag_Unset;
 8001324:	2300      	movs	r3, #0
	}

}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <SPI_Init>:
/*
 * @Brief	SPI initialization function that sets all the configurations such as clock phase, polarity, data frame,
 * 			data format and more.
 */
void SPI_Init(SPI_Handle_t *SPI_Handle)
{
 8001334:	b590      	push	{r4, r7, lr}
 8001336:	b087      	sub	sp, #28
 8001338:	af02      	add	r7, sp, #8
 800133a:	6078      	str	r0, [r7, #4]
	uint8_t cs_pin, clk_pin, mosi_pin, miso_pin;
	cs_pin = SPI_Handle->SPI_Config.pin_cs;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	791b      	ldrb	r3, [r3, #4]
 8001340:	73fb      	strb	r3, [r7, #15]
	clk_pin = SPI_Handle->SPI_Config.pin_clk;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	795b      	ldrb	r3, [r3, #5]
 8001346:	73bb      	strb	r3, [r7, #14]
	mosi_pin = SPI_Handle->SPI_Config.pin_mosi;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	799b      	ldrb	r3, [r3, #6]
 800134c:	737b      	strb	r3, [r7, #13]
	miso_pin = SPI_Handle->SPI_Config.pin_miso;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	79db      	ldrb	r3, [r3, #7]
 8001352:	733b      	strb	r3, [r7, #12]
	/*
	 * Set the specified pins based on which SPI peripheral is chosen and whether or not the SSM bit is enabled or
	 * disabled. These functions are called from the "stm32f401_gpio.h" file, and are defined in the stm32f401_gpio.c file.
	 * This also enables clock access to the specified SPI peripheral using functions from the stm32f401_rcc file.
	 */
	if(SPI_Handle->SPIx == SPI1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a5f      	ldr	r2, [pc, #380]	; (80014d8 <SPI_Init+0x1a4>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d112      	bne.n	8001384 <SPI_Init+0x50>
	{
		SPI1_Periph_Enable((SPI_Handle->ssm), (SPI_Handle->SPI_Config.cs_gpio), cs_pin, clk_pin, mosi_pin, miso_pin);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7c58      	ldrb	r0, [r3, #17]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6899      	ldr	r1, [r3, #8]
 8001366:	7bbc      	ldrb	r4, [r7, #14]
 8001368:	7bfa      	ldrb	r2, [r7, #15]
 800136a:	7b3b      	ldrb	r3, [r7, #12]
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	7b7b      	ldrb	r3, [r7, #13]
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	4623      	mov	r3, r4
 8001374:	f7ff fc28 	bl	8000bc8 <SPI1_Periph_Enable>
		RCC_APB2Cmd(SPI1_Enable, ENABLE);
 8001378:	2101      	movs	r1, #1
 800137a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800137e:	f7ff ff85 	bl	800128c <RCC_APB2Cmd>
 8001382:	e041      	b.n	8001408 <SPI_Init+0xd4>
	}
	else if(SPI_Handle->SPIx == SPI2)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a54      	ldr	r2, [pc, #336]	; (80014dc <SPI_Init+0x1a8>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d112      	bne.n	80013b4 <SPI_Init+0x80>
	{
		SPI2_Periph_Enable((SPI_Handle->ssm), (SPI_Handle->SPI_Config.cs_gpio), cs_pin, clk_pin, mosi_pin, miso_pin);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7c58      	ldrb	r0, [r3, #17]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6899      	ldr	r1, [r3, #8]
 8001396:	7bbc      	ldrb	r4, [r7, #14]
 8001398:	7bfa      	ldrb	r2, [r7, #15]
 800139a:	7b3b      	ldrb	r3, [r7, #12]
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	7b7b      	ldrb	r3, [r7, #13]
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	4623      	mov	r3, r4
 80013a4:	f7ff fcc8 	bl	8000d38 <SPI2_Periph_Enable>
		RCC_APB1Cmd(SPI2_Enable, ENABLE);
 80013a8:	2101      	movs	r1, #1
 80013aa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013ae:	f7ff ff4d 	bl	800124c <RCC_APB1Cmd>
 80013b2:	e029      	b.n	8001408 <SPI_Init+0xd4>
	}
	else if(SPI_Handle->SPIx == SPI3)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a49      	ldr	r2, [pc, #292]	; (80014e0 <SPI_Init+0x1ac>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d112      	bne.n	80013e4 <SPI_Init+0xb0>
	{
		SPI3_Periph_Enable((SPI_Handle->ssm), (SPI_Handle->SPI_Config.cs_gpio), cs_pin, clk_pin, mosi_pin, miso_pin);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	7c58      	ldrb	r0, [r3, #17]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6899      	ldr	r1, [r3, #8]
 80013c6:	7bbc      	ldrb	r4, [r7, #14]
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	7b3b      	ldrb	r3, [r7, #12]
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	7b7b      	ldrb	r3, [r7, #13]
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	4623      	mov	r3, r4
 80013d4:	f7ff fd7e 	bl	8000ed4 <SPI3_Periph_Enable>
		RCC_APB1Cmd(SPI3_Enable, ENABLE);
 80013d8:	2101      	movs	r1, #1
 80013da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013de:	f7ff ff35 	bl	800124c <RCC_APB1Cmd>
 80013e2:	e011      	b.n	8001408 <SPI_Init+0xd4>
	}
	else
	{
		SPI4_Periph_Enable((SPI_Handle->ssm), (SPI_Handle->SPI_Config.cs_gpio), cs_pin, clk_pin, mosi_pin, miso_pin);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	7c58      	ldrb	r0, [r3, #17]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6899      	ldr	r1, [r3, #8]
 80013ec:	7bbc      	ldrb	r4, [r7, #14]
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	7b3b      	ldrb	r3, [r7, #12]
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	7b7b      	ldrb	r3, [r7, #13]
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	4623      	mov	r3, r4
 80013fa:	f7ff fe55 	bl	80010a8 <SPI4_Periph_Enable>
		RCC_APB2Cmd(SPI4_Enable, ENABLE);
 80013fe:	2101      	movs	r1, #1
 8001400:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001404:	f7ff ff42 	bl	800128c <RCC_APB2Cmd>
	}

	//Set BaudRate control
	SPI_Handle->SPIx->CR1 |= ((SPI_Handle->SPI_Config.baudrate_ctrl) << CR1_BR_Pos);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7b1b      	ldrb	r3, [r3, #12]
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	4619      	mov	r1, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	430a      	orrs	r2, r1
 800141c:	601a      	str	r2, [r3, #0]

	//Set CPOL and CHPA
	SPI_Handle->SPIx->CR1 |= (SPI_Handle->SPI_Config.cpha);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	7b9b      	ldrb	r3, [r3, #14]
 8001428:	4619      	mov	r1, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	601a      	str	r2, [r3, #0]
	SPI_Handle->SPIx->CR1 |= (SPI_Handle->SPI_Config.cpol);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7b5b      	ldrb	r3, [r3, #13]
 800143c:	4619      	mov	r1, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	430a      	orrs	r2, r1
 8001444:	601a      	str	r2, [r3, #0]

	//Set Data format to either LSB or MSB first
	SPI_Handle->SPIx->CR1 |= (SPI_Handle->SPI_Config.data_format);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7bdb      	ldrb	r3, [r3, #15]
 8001450:	4619      	mov	r1, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	430a      	orrs	r2, r1
 8001458:	601a      	str	r2, [r3, #0]

	//Set mode to master
	SPI_Handle->SPIx->CR1 |= CR1_MSTR_Enable;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f042 0204 	orr.w	r2, r2, #4
 8001468:	601a      	str	r2, [r3, #0]

	//Set 8 bit
	SPI_Handle->SPIx->CR1 |= ((SPI_Handle->data_frame) << CR1_DFF_Pos);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7c1b      	ldrb	r3, [r3, #16]
 8001474:	02db      	lsls	r3, r3, #11
 8001476:	4619      	mov	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	601a      	str	r2, [r3, #0]
	 * If SSM is not enabled, then SSOE (slave select output enabled) is used which uses the NSS pin as the CS and
	 * it automatically handled by the MCU. When this mode is selected, as soon as the SPI is enabled in master mode, the
	 * CS will go low and will only go high when SPI is disabled. This is why if SSM is enabled, the SPI is enabled also but
	 * if SSOE is enabled it is not enabled in the Init function.
	 */
	if(SPI_Handle->ssm)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	7c5b      	ldrb	r3, [r3, #17]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d01b      	beq.n	80014c0 <SPI_Init+0x18c>
	{
		//Set SSM and SSI high
		SPI_Handle->SPIx->CR1 |= ((SPI_Handle->ssm) << CR1_SSM_Pos);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7c5b      	ldrb	r3, [r3, #17]
 8001492:	025b      	lsls	r3, r3, #9
 8001494:	4619      	mov	r1, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	601a      	str	r2, [r3, #0]
		SPI_Handle->SPIx->CR1 |= CR1_SSI_Enable;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014ac:	601a      	str	r2, [r3, #0]
		//Enable SPI periph
		SPI_Handle->SPIx->CR1 |= CR1_SPE_Enable;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014bc:	601a      	str	r2, [r3, #0]
	{
		//Set SSOE high
		SPI_Handle->SPIx->CR2 |= CR2_SSOE_Enable;
	}

}
 80014be:	e007      	b.n	80014d0 <SPI_Init+0x19c>
		SPI_Handle->SPIx->CR2 |= CR2_SSOE_Enable;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 0204 	orr.w	r2, r2, #4
 80014ce:	605a      	str	r2, [r3, #4]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd90      	pop	{r4, r7, pc}
 80014d8:	40013000 	.word	0x40013000
 80014dc:	40003800 	.word	0x40003800
 80014e0:	40003c00 	.word	0x40003c00

080014e4 <Enable_NVIC>:

/*
 * @brief	Support function used to enable the NVIC interrupts
 */
static void Enable_NVIC(SPI_Handle_t *SPI_Handle)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	if(SPI_Handle->SPIx == SPI1){
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0f      	ldr	r2, [pc, #60]	; (8001530 <Enable_NVIC+0x4c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d103      	bne.n	80014fe <Enable_NVIC+0x1a>
		NVIC_EnableIRQ(SPI1_IRQn);
 80014f6:	2023      	movs	r0, #35	; 0x23
 80014f8:	f7ff fee8 	bl	80012cc <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(SPI3_IRQn);
	}
	else{
		NVIC_EnableIRQ(SPI4_IRQn);
	}
}
 80014fc:	e014      	b.n	8001528 <Enable_NVIC+0x44>
	else if(SPI_Handle->SPIx == SPI2){
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a0c      	ldr	r2, [pc, #48]	; (8001534 <Enable_NVIC+0x50>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d103      	bne.n	8001510 <Enable_NVIC+0x2c>
		NVIC_EnableIRQ(SPI2_IRQn);
 8001508:	2024      	movs	r0, #36	; 0x24
 800150a:	f7ff fedf 	bl	80012cc <__NVIC_EnableIRQ>
}
 800150e:	e00b      	b.n	8001528 <Enable_NVIC+0x44>
	else if(SPI_Handle->SPIx == SPI3){
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a08      	ldr	r2, [pc, #32]	; (8001538 <Enable_NVIC+0x54>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d103      	bne.n	8001522 <Enable_NVIC+0x3e>
		NVIC_EnableIRQ(SPI3_IRQn);
 800151a:	2033      	movs	r0, #51	; 0x33
 800151c:	f7ff fed6 	bl	80012cc <__NVIC_EnableIRQ>
}
 8001520:	e002      	b.n	8001528 <Enable_NVIC+0x44>
		NVIC_EnableIRQ(SPI4_IRQn);
 8001522:	2054      	movs	r0, #84	; 0x54
 8001524:	f7ff fed2 	bl	80012cc <__NVIC_EnableIRQ>
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40013000 	.word	0x40013000
 8001534:	40003800 	.word	0x40003800
 8001538:	40003c00 	.word	0x40003c00

0800153c <Disable_SPI_Transmission>:
/*
 * @brief	Support function used to disable interrupt transmission only when SSOE
 * is being used.
 */
static void Disable_SPI_Transmission(SPI_Handle_t *SPI_Handle)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	/*Temporary variable to clear the overrun flag - the overrun flag is cleared
	 * by reading the DR followed by the SR.
	 */
	uint32_t clear_overrun;

	while(!Check_Flag(SPI_Handle, SR_TXE_Flag));
 8001544:	bf00      	nop
 8001546:	2102      	movs	r1, #2
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff fedd 	bl	8001308 <Check_Flag>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0f8      	beq.n	8001546 <Disable_SPI_Transmission+0xa>
	//Disable TXEIE bit in CR2
	SPI_Handle->SPIx->CR2 &= ~CR2_TXEIE_Enable;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001562:	605a      	str	r2, [r3, #4]

	while(Check_Flag(SPI_Handle, SR_BSY_Flag));
 8001564:	bf00      	nop
 8001566:	2180      	movs	r1, #128	; 0x80
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff fecd 	bl	8001308 <Check_Flag>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f8      	bne.n	8001566 <Disable_SPI_Transmission+0x2a>

	//Clear overrun flag
	clear_overrun = SPI_Handle->SPIx->DR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	60fb      	str	r3, [r7, #12]
	clear_overrun = SPI_Handle->SPIx->SR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	60fb      	str	r3, [r7, #12]

	//Disable SPI periph
	SPI_Handle->SPIx->CR1 &= ~CR1_SPE_Enable;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001592:	601a      	str	r2, [r3, #0]

	//Reset bus state back to SPI_Ready to allow another communication to begin.
	SPI_Handle->bus_state = SPI_Ready;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	765a      	strb	r2, [r3, #25]
}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <Disable_SPI_Reception>:

/*
 * @brief	Support function used to disable SPI reception when using interrupts with SSOE.
 */
static void Disable_SPI_Reception(SPI_Handle_t *SPI_Handle)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
	while(!Check_Flag(SPI_Handle, SR_TXE_Flag));
 80015aa:	bf00      	nop
 80015ac:	2102      	movs	r1, #2
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff feaa 	bl	8001308 <Check_Flag>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f8      	beq.n	80015ac <Disable_SPI_Reception+0xa>

	//Disable TXEIE and RXNEIE bit
	SPI_Handle->SPIx->CR2 &= ~CR2_TXEIE_Enable;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015c8:	605a      	str	r2, [r3, #4]
	SPI_Handle->SPIx->CR2 &= ~CR2_RXNEIE_Enable;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015d8:	605a      	str	r2, [r3, #4]

	while(Check_Flag(SPI_Handle, SR_BSY_Flag));
 80015da:	bf00      	nop
 80015dc:	2180      	movs	r1, #128	; 0x80
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff fe92 	bl	8001308 <Check_Flag>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f8      	bne.n	80015dc <Disable_SPI_Reception+0x3a>

	//Disable SPI periph
	SPI_Handle->SPIx->CR1 &= ~CR1_SPE_Enable;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015f8:	601a      	str	r2, [r3, #0]

	//Set the SPI bus state back to SPI_Ready to allow for another seperate SPI transmission
	SPI_Handle->bus_state = SPI_Ready;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	765a      	strb	r2, [r3, #25]
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <TXE_Interrupt_Handler>:
 * @brief	Support function to transmit data when an interrupt is generated by the TXE flag.
 *
 * @note	This function is called directly from the interrupt service routine.
 */
static void TXE_Interrupt_Handler(SPI_Handle_t *SPI_Handle)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	//Check if the bus state is currently in SPI_Transmitting
	if(SPI_Handle->bus_state == SPI_Transmitting)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	7e5b      	ldrb	r3, [r3, #25]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d153      	bne.n	80016c0 <TXE_Interrupt_Handler+0xb8>
	{
		//16 bit data mode
		if(SPI_Handle->data_frame == Data_16_Bits)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	7c1b      	ldrb	r3, [r3, #16]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d11e      	bne.n	800165e <TXE_Interrupt_Handler+0x56>
		{
			if(SPI_Handle->tx_length)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7e1b      	ldrb	r3, [r3, #24]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00e      	beq.n	8001646 <TXE_Interrupt_Handler+0x3e>
			{
				//Write values from the data buffer into the data register to be transmitted
				SPI_Handle->SPIx->DR = *((uint16_t *)SPI_Handle->pTxBuffer++);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	1c59      	adds	r1, r3, #1
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6151      	str	r1, [r2, #20]
 8001632:	881a      	ldrh	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	60da      	str	r2, [r3, #12]
				SPI_Handle->tx_length--;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	7e1b      	ldrb	r3, [r3, #24]
 800163e:	3b01      	subs	r3, #1
 8001640:	b2da      	uxtb	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	761a      	strb	r2, [r3, #24]
			}

			if(SPI_Handle->tx_length == 0 && (!SPI_Handle->ssm))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	7e1b      	ldrb	r3, [r3, #24]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d13e      	bne.n	80016cc <TXE_Interrupt_Handler+0xc4>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	7c5b      	ldrb	r3, [r3, #17]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d13a      	bne.n	80016cc <TXE_Interrupt_Handler+0xc4>
			{
				Disable_SPI_Transmission(SPI_Handle);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ff70 	bl	800153c <Disable_SPI_Transmission>
	{
		//Transmit the address of the register to read from
		SPI_Handle->SPIx->DR = SPI_Handle->reg_address;

	}
}
 800165c:	e036      	b.n	80016cc <TXE_Interrupt_Handler+0xc4>
			if(SPI_Handle->tx_length)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7e1b      	ldrb	r3, [r3, #24]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00e      	beq.n	8001684 <TXE_Interrupt_Handler+0x7c>
				SPI_Handle->SPIx->DR = *(SPI_Handle->pTxBuffer++);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	1c59      	adds	r1, r3, #1
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6151      	str	r1, [r2, #20]
 8001670:	781a      	ldrb	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	60da      	str	r2, [r3, #12]
				SPI_Handle->tx_length--;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	7e1b      	ldrb	r3, [r3, #24]
 800167c:	3b01      	subs	r3, #1
 800167e:	b2da      	uxtb	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	761a      	strb	r2, [r3, #24]
			if(SPI_Handle->tx_length == 0)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7e1b      	ldrb	r3, [r3, #24]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d11f      	bne.n	80016cc <TXE_Interrupt_Handler+0xc4>
				SPI_Handle->bus_state = SPI_Ready;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	765a      	strb	r2, [r3, #25]
				if(!SPI_Handle->ssm)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	7c5b      	ldrb	r3, [r3, #17]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d103      	bne.n	80016a2 <TXE_Interrupt_Handler+0x9a>
					Disable_SPI_Transmission(SPI_Handle);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff ff4e 	bl	800153c <Disable_SPI_Transmission>
}
 80016a0:	e014      	b.n	80016cc <TXE_Interrupt_Handler+0xc4>
					SPI_Handle->SPIx->CR2 &= ~CR2_TXEIE_Enable;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016b0:	605a      	str	r2, [r3, #4]
					GPIO_WritePin(SPI_Handle->Slave, GPIO_Write);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	2101      	movs	r1, #1
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fd6d 	bl	8001198 <GPIO_WritePin>
}
 80016be:	e005      	b.n	80016cc <TXE_Interrupt_Handler+0xc4>
		SPI_Handle->SPIx->DR = SPI_Handle->reg_address;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	60da      	str	r2, [r3, #12]
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <RXNE_Interrupt_Handler>:
/*
 * @Brief	Support function called from the interrupt service handler when the RXNE flag
 * 			is raised.
 */
static void RXNE_Interrupt_Handler(SPI_Handle_t *SPI_Handle)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	//For 16 bit data transmission
	if(SPI_Handle->data_frame == Data_16_Bits)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	7c1b      	ldrb	r3, [r3, #16]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d117      	bne.n	8001714 <RXNE_Interrupt_Handler+0x40>
	{
		//If rx_length is greater than 0
		if(SPI_Handle->rx_length)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d029      	beq.n	8001742 <RXNE_Interrupt_Handler+0x6e>
		{
			//Read value from Data register inot buffer
			*((uint16_t *)SPI_Handle->pRxBuffer++) = SPI_Handle->SPIx->DR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68d8      	ldr	r0, [r3, #12]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	1c59      	adds	r1, r3, #1
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	61d1      	str	r1, [r2, #28]
 80016fe:	b282      	uxth	r2, r0
 8001700:	801a      	strh	r2, [r3, #0]
			SPI_Handle->rx_length--;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001708:	3b01      	subs	r3, #1
 800170a:	b2da      	uxtb	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f883 2020 	strb.w	r2, [r3, #32]
 8001712:	e016      	b.n	8001742 <RXNE_Interrupt_Handler+0x6e>

	//For 8 bit data transmission
	else
	{
		//If rx_length is greater than 0
		if(SPI_Handle->rx_length)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 3020 	ldrb.w	r3, [r3, #32]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d011      	beq.n	8001742 <RXNE_Interrupt_Handler+0x6e>
		{
			//Read value from Data register inot buffer
			*(SPI_Handle->pRxBuffer++) = SPI_Handle->SPIx->DR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68d8      	ldr	r0, [r3, #12]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	1c59      	adds	r1, r3, #1
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	61d1      	str	r1, [r2, #28]
 800172e:	b2c2      	uxtb	r2, r0
 8001730:	701a      	strb	r2, [r3, #0]
			SPI_Handle->rx_length--;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001738:	3b01      	subs	r3, #1
 800173a:	b2da      	uxtb	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f883 2020 	strb.w	r2, [r3, #32]
		}
	}


	if(SPI_Handle->rx_length == 0)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d120      	bne.n	800178e <RXNE_Interrupt_Handler+0xba>
	{
		//Set the spi bus back to SPI_Ready
		SPI_Handle->bus_state = SPI_Ready;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	765a      	strb	r2, [r3, #25]

		//If SSM is disabled
		if(!SPI_Handle->ssm)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	7c5b      	ldrb	r3, [r3, #17]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d103      	bne.n	8001762 <RXNE_Interrupt_Handler+0x8e>
		{
			Disable_SPI_Reception(SPI_Handle);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ff21 	bl	80015a2 <Disable_SPI_Reception>

			//Pull chip select high
			GPIO_WritePin(SPI_Handle->Slave, GPIO_Write);
		}
	}
}
 8001760:	e015      	b.n	800178e <RXNE_Interrupt_Handler+0xba>
			SPI_Handle->SPIx->CR2 &= ~CR2_TXEIE_Enable;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001770:	605a      	str	r2, [r3, #4]
			SPI_Handle->SPIx->CR2 &= ~CR2_RXNEIE_Enable;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001780:	605a      	str	r2, [r3, #4]
			GPIO_WritePin(SPI_Handle->Slave, GPIO_Write);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	2101      	movs	r1, #1
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fd05 	bl	8001198 <GPIO_WritePin>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <SPI_MultiSlave_TransmitIT>:
 *
 * @note	This requires a GPIO slave device to be passed in, which is created form the GPIO driver included in this file.
 * 			This function will handle pulling the CS low, all that is needed, is to specifcy which slave to interact with.
 */
void SPI_MultiSlave_TransmitIT(SPI_Handle_t *SPI_Handle, GPIO_Config_t *Slave_Device, uint8_t *input_buffer, uint8_t num_of_bytes)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b084      	sub	sp, #16
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	70fb      	strb	r3, [r7, #3]
	if(SPI_Handle->bus_state == SPI_Ready)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	7e5b      	ldrb	r3, [r3, #25]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d11a      	bne.n	80017e2 <SPI_MultiSlave_TransmitIT+0x4c>
	{
		SPI_Handle->pTxBuffer = input_buffer;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	615a      	str	r2, [r3, #20]
		SPI_Handle->tx_length = num_of_bytes;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	78fa      	ldrb	r2, [r7, #3]
 80017b6:	761a      	strb	r2, [r3, #24]
		SPI_Handle->bus_state = SPI_Transmitting;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2201      	movs	r2, #1
 80017bc:	765a      	strb	r2, [r3, #25]
		SPI_Handle->Slave = Slave_Device;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	625a      	str	r2, [r3, #36]	; 0x24

		//Enable NVIC interrupts
		Enable_NVIC(SPI_Handle);
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f7ff fe8d 	bl	80014e4 <Enable_NVIC>

		//Pull Slave Device Low to begin data transmission
		GPIO_WritePin(Slave_Device, GPIO_Reset);
 80017ca:	2102      	movs	r1, #2
 80017cc:	68b8      	ldr	r0, [r7, #8]
 80017ce:	f7ff fce3 	bl	8001198 <GPIO_WritePin>

		//Enable TXEIE and RXNEIE bit in CR2
		SPI_Handle->SPIx->CR2 |= CR2_TXEIE_Enable;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017e0:	605a      	str	r2, [r3, #4]
	}
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <SPI_MultiSlave_RecieveIT>:
 *
 * @note	This requires a GPIO slave device to be passed in, which is created form the GPIO driver included in this file.
 * 			This function will handle pulling the CS low, all that is needed, is to specifcy which slave to interact with.
 */
void SPI_MultiSlave_RecieveIT(SPI_Handle_t *SPI_Handle, GPIO_Config_t *Slave_Device, uint8_t *output_buffer, uint8_t num_of_bytes, uint8_t address)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	70fb      	strb	r3, [r7, #3]
	if(SPI_Handle->bus_state == SPI_Ready)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	7e5b      	ldrb	r3, [r3, #25]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d127      	bne.n	8001850 <SPI_MultiSlave_RecieveIT+0x66>
	{
		SPI_Handle->pRxBuffer = output_buffer;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	61da      	str	r2, [r3, #28]
		SPI_Handle->rx_length = num_of_bytes;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	78fa      	ldrb	r2, [r7, #3]
 800180a:	f883 2020 	strb.w	r2, [r3, #32]
		SPI_Handle->bus_state = SPI_Receiving;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2202      	movs	r2, #2
 8001812:	765a      	strb	r2, [r3, #25]
		SPI_Handle->reg_address = address;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	7e3a      	ldrb	r2, [r7, #24]
 8001818:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		SPI_Handle->Slave = Slave_Device;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	625a      	str	r2, [r3, #36]	; 0x24

		//Enable NVIC interrupts
		Enable_NVIC(SPI_Handle);
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f7ff fe5e 	bl	80014e4 <Enable_NVIC>

		//Pull Slave Device Low to begin data transmission
		GPIO_WritePin(Slave_Device, GPIO_Reset);
 8001828:	2102      	movs	r1, #2
 800182a:	68b8      	ldr	r0, [r7, #8]
 800182c:	f7ff fcb4 	bl	8001198 <GPIO_WritePin>

		//Enable TXEIE and RXNEIE bit in CR2
		SPI_Handle->SPIx->CR2 |= CR2_RXNEIE_Enable;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800183e:	605a      	str	r2, [r3, #4]
		SPI_Handle->SPIx->CR2 |= CR2_TXEIE_Enable;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800184e:	605a      	str	r2, [r3, #4]
	}
}
 8001850:	bf00      	nop
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <SPI_IRQ_Handler>:
 *
 * @note	This function is called whenever an interrupt occurs generated by the TXE or RXNE flag. It also
 * 			services both the TXE and RXNE interrupts.
 */
void SPI_IRQ_Handler(SPI_Handle_t *SPI_Handle)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	uint32_t temp1, temp2;

	temp1 = ((SPI_Handle->SPIx->CR2 & CR2_RXNEIE_Enable) >> 6);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	099b      	lsrs	r3, r3, #6
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	60fb      	str	r3, [r7, #12]
	temp2 = (SPI_Handle->SPIx->SR & SR_RXNE_Flag);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	60bb      	str	r3, [r7, #8]
	//If the RXNE flag is raised and the RXNEIE bit is set - call the RXNE interrupt support function
	if(temp1 && temp2)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <SPI_IRQ_Handler+0x34>
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <SPI_IRQ_Handler+0x34>
	{
		RXNE_Interrupt_Handler(SPI_Handle);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ff24 	bl	80016d4 <RXNE_Interrupt_Handler>
	}


	temp1 = ((SPI_Handle->SPIx->CR2 & CR2_TXEIE_Enable) >> 7);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	09db      	lsrs	r3, r3, #7
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
	temp2 = ((SPI_Handle->SPIx->SR & SR_TXE_Flag) >> 1);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	085b      	lsrs	r3, r3, #1
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
	//If the TXE flag is raised and the TXEIE bit is set - call the TXE interrupt support function
	if(temp1 && temp2)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <SPI_IRQ_Handler+0x62>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d002      	beq.n	80018ba <SPI_IRQ_Handler+0x62>
	{
		TXE_Interrupt_Handler(SPI_Handle);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff fea7 	bl	8001608 <TXE_Interrupt_Handler>
	}


}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	0000      	movs	r0, r0
 80018c4:	0000      	movs	r0, r0
	...

080018c8 <main>:

void SPI_Specs_Init();
void SPI1_IRQHandler();

int main()
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af04      	add	r7, sp, #16

	/*
	 * Data that holds the address of the data registers of the ADXL - this is where data will be read
	 * from (Not the address of the device). A buffer that will hold the data being read.
	 */
	uint8_t adxl_address[1] = {0xF2};
 80018ce:	23f2      	movs	r3, #242	; 0xf2
 80018d0:	753b      	strb	r3, [r7, #20]

	/*
	 * Functions to initialize the ADXL registers to set range to +- 4g, to allow
	 * continous reading of the data registers and set the transfer rate to 100Hz.
	 */
	uint8_t adxl_set_data_format[2] = {0x31, 0x01};
 80018d2:	f240 1331 	movw	r3, #305	; 0x131
 80018d6:	823b      	strh	r3, [r7, #16]
	uint8_t adxl_clear_powerctl_reg[2] = {0x2D, 0x00};
 80018d8:	232d      	movs	r3, #45	; 0x2d
 80018da:	81bb      	strh	r3, [r7, #12]
	uint8_t adxl_set_powerctl_reg[2] = {0x2D, 0x08};
 80018dc:	f640 032d 	movw	r3, #2093	; 0x82d
 80018e0:	813b      	strh	r3, [r7, #8]
	uint8_t daxl_set_bw_rate_reg[2] = {0x2C, 0x0A};
 80018e2:	f640 232c 	movw	r3, #2604	; 0xa2c
 80018e6:	80bb      	strh	r3, [r7, #4]

	//Create and initialze a slave pin with the desired port and pin
	GPIO_Config(&Slave1, GPIOA, Pin8, GPIO_Output, GPIO_PushPull, GPIO_LowSpeed, GPIO_PullUp);
 80018e8:	2301      	movs	r3, #1
 80018ea:	9302      	str	r3, [sp, #8]
 80018ec:	2300      	movs	r3, #0
 80018ee:	9301      	str	r3, [sp, #4]
 80018f0:	2300      	movs	r3, #0
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	2301      	movs	r3, #1
 80018f6:	2208      	movs	r2, #8
 80018f8:	4945      	ldr	r1, [pc, #276]	; (8001a10 <main+0x148>)
 80018fa:	4846      	ldr	r0, [pc, #280]	; (8001a14 <main+0x14c>)
 80018fc:	f7fe ff52 	bl	80007a4 <GPIO_Config>
	GPIO_Init(&Slave1, 0x0);
 8001900:	2100      	movs	r1, #0
 8001902:	4844      	ldr	r0, [pc, #272]	; (8001a14 <main+0x14c>)
 8001904:	f7ff f836 	bl	8000974 <GPIO_Init>
	GPIOA->ODR |= (1U << 8); //Used to enable the P-MOS and ensure CS is active high
 8001908:	4b41      	ldr	r3, [pc, #260]	; (8001a10 <main+0x148>)
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	4a40      	ldr	r2, [pc, #256]	; (8001a10 <main+0x148>)
 800190e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001912:	6153      	str	r3, [r2, #20]

	//GPIO_Config(&Slave2, GPIOA, Pin9, GPIO_Output, GPIO_PushPull, GPIO_LowSpeed, GPIO_PullUp);
	//GPIO_Init(&Slave2, 0x0);
	//GPIOA->ODR |= (1U << 9); //Used to enable the P-MOS and ensure CS is active high

	SPI_Specs_Init();
 8001914:	f000 f89a 	bl	8001a4c <SPI_Specs_Init>

	SPI_Init(&SPI1_Example);
 8001918:	483f      	ldr	r0, [pc, #252]	; (8001a18 <main+0x150>)
 800191a:	f7ff fd0b 	bl	8001334 <SPI_Init>

	/*
	 * Initial Transmission to send to the ADXL. Sets the ADXL to specified settings.
	 */
	SPI_MultiSlave_TransmitIT(&SPI1_Example, &Slave1, adxl_clear_powerctl_reg, 2);
 800191e:	f107 020c 	add.w	r2, r7, #12
 8001922:	2302      	movs	r3, #2
 8001924:	493b      	ldr	r1, [pc, #236]	; (8001a14 <main+0x14c>)
 8001926:	483c      	ldr	r0, [pc, #240]	; (8001a18 <main+0x150>)
 8001928:	f7ff ff35 	bl	8001796 <SPI_MultiSlave_TransmitIT>
	SPI_MultiSlave_TransmitIT(&SPI1_Example, &Slave1, adxl_set_data_format, 2);
 800192c:	f107 0210 	add.w	r2, r7, #16
 8001930:	2302      	movs	r3, #2
 8001932:	4938      	ldr	r1, [pc, #224]	; (8001a14 <main+0x14c>)
 8001934:	4838      	ldr	r0, [pc, #224]	; (8001a18 <main+0x150>)
 8001936:	f7ff ff2e 	bl	8001796 <SPI_MultiSlave_TransmitIT>
	SPI_MultiSlave_TransmitIT(&SPI1_Example, &Slave1, daxl_set_bw_rate_reg, 2);
 800193a:	1d3a      	adds	r2, r7, #4
 800193c:	2302      	movs	r3, #2
 800193e:	4935      	ldr	r1, [pc, #212]	; (8001a14 <main+0x14c>)
 8001940:	4835      	ldr	r0, [pc, #212]	; (8001a18 <main+0x150>)
 8001942:	f7ff ff28 	bl	8001796 <SPI_MultiSlave_TransmitIT>
	SPI_MultiSlave_TransmitIT(&SPI1_Example, &Slave1, adxl_set_powerctl_reg, 2);
 8001946:	f107 0208 	add.w	r2, r7, #8
 800194a:	2302      	movs	r3, #2
 800194c:	4931      	ldr	r1, [pc, #196]	; (8001a14 <main+0x14c>)
 800194e:	4832      	ldr	r0, [pc, #200]	; (8001a18 <main+0x150>)
 8001950:	f7ff ff21 	bl	8001796 <SPI_MultiSlave_TransmitIT>
	//SPI_MultiSlave_TransmitIT(&SPI1_Example, &Slave2, adxl_set_powerctl_reg, 2);

	while(1)
	{
		//Reading data from the SPI
		SPI_MultiSlave_RecieveIT(&SPI1_Example, &Slave1, adxl_data_rec, 7, *adxl_address);
 8001954:	7d3b      	ldrb	r3, [r7, #20]
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2307      	movs	r3, #7
 800195a:	4a30      	ldr	r2, [pc, #192]	; (8001a1c <main+0x154>)
 800195c:	492d      	ldr	r1, [pc, #180]	; (8001a14 <main+0x14c>)
 800195e:	482e      	ldr	r0, [pc, #184]	; (8001a18 <main+0x150>)
 8001960:	f7ff ff43 	bl	80017ea <SPI_MultiSlave_RecieveIT>

		x = ((adxl_data_rec[2] << 8) | adxl_data_rec[1]);
 8001964:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <main+0x154>)
 8001966:	789b      	ldrb	r3, [r3, #2]
 8001968:	021b      	lsls	r3, r3, #8
 800196a:	b21a      	sxth	r2, r3
 800196c:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <main+0x154>)
 800196e:	785b      	ldrb	r3, [r3, #1]
 8001970:	b21b      	sxth	r3, r3
 8001972:	4313      	orrs	r3, r2
 8001974:	b21a      	sxth	r2, r3
 8001976:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <main+0x158>)
 8001978:	801a      	strh	r2, [r3, #0]
		y = ((adxl_data_rec[4] << 8) | adxl_data_rec[3]);
 800197a:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <main+0x154>)
 800197c:	791b      	ldrb	r3, [r3, #4]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	b21a      	sxth	r2, r3
 8001982:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <main+0x154>)
 8001984:	78db      	ldrb	r3, [r3, #3]
 8001986:	b21b      	sxth	r3, r3
 8001988:	4313      	orrs	r3, r2
 800198a:	b21a      	sxth	r2, r3
 800198c:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <main+0x15c>)
 800198e:	801a      	strh	r2, [r3, #0]
		z = ((adxl_data_rec[6] << 8) | adxl_data_rec[5]);
 8001990:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <main+0x154>)
 8001992:	799b      	ldrb	r3, [r3, #6]
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	b21a      	sxth	r2, r3
 8001998:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <main+0x154>)
 800199a:	795b      	ldrb	r3, [r3, #5]
 800199c:	b21b      	sxth	r3, r3
 800199e:	4313      	orrs	r3, r2
 80019a0:	b21a      	sxth	r2, r3
 80019a2:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <main+0x160>)
 80019a4:	801a      	strh	r2, [r3, #0]

		xg = (x * 0.0078);
 80019a6:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <main+0x158>)
 80019a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fe8f 	bl	80006d0 <__aeabi_i2d>
 80019b2:	a315      	add	r3, pc, #84	; (adr r3, 8001a08 <main+0x140>)
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	f7fe fc0e 	bl	80001d8 <__aeabi_dmul>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	491a      	ldr	r1, [pc, #104]	; (8001a2c <main+0x164>)
 80019c2:	e9c1 2300 	strd	r2, r3, [r1]
		yg = (y * 0.0078);
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <main+0x15c>)
 80019c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fe7f 	bl	80006d0 <__aeabi_i2d>
 80019d2:	a30d      	add	r3, pc, #52	; (adr r3, 8001a08 <main+0x140>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	f7fe fbfe 	bl	80001d8 <__aeabi_dmul>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4913      	ldr	r1, [pc, #76]	; (8001a30 <main+0x168>)
 80019e2:	e9c1 2300 	strd	r2, r3, [r1]
		zg = (z * 0.0078);
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <main+0x160>)
 80019e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fe6f 	bl	80006d0 <__aeabi_i2d>
 80019f2:	a305      	add	r3, pc, #20	; (adr r3, 8001a08 <main+0x140>)
 80019f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f8:	f7fe fbee 	bl	80001d8 <__aeabi_dmul>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	490c      	ldr	r1, [pc, #48]	; (8001a34 <main+0x16c>)
 8001a02:	e9c1 2300 	strd	r2, r3, [r1]
		SPI_MultiSlave_RecieveIT(&SPI1_Example, &Slave1, adxl_data_rec, 7, *adxl_address);
 8001a06:	e7a5      	b.n	8001954 <main+0x8c>
 8001a08:	8e8a71de 	.word	0x8e8a71de
 8001a0c:	3f7ff2e4 	.word	0x3f7ff2e4
 8001a10:	40020000 	.word	0x40020000
 8001a14:	20000044 	.word	0x20000044
 8001a18:	2000001c 	.word	0x2000001c
 8001a1c:	20000070 	.word	0x20000070
 8001a20:	20000050 	.word	0x20000050
 8001a24:	20000052 	.word	0x20000052
 8001a28:	20000054 	.word	0x20000054
 8001a2c:	20000058 	.word	0x20000058
 8001a30:	20000060 	.word	0x20000060
 8001a34:	20000068 	.word	0x20000068

08001a38 <SPI1_IRQHandler>:

/*
 * Function to serve interrupts
 */
void SPI1_IRQHandler()
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	SPI_IRQ_Handler(&SPI1_Example);
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <SPI1_IRQHandler+0x10>)
 8001a3e:	f7ff ff0b 	bl	8001858 <SPI_IRQ_Handler>
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000001c 	.word	0x2000001c

08001a4c <SPI_Specs_Init>:

/*
 * Function to set the SPI specs
 */
void SPI_Specs_Init()
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
	//Set desired pins
	SPI1_Example.SPI_Config.cs_gpio = GPIOA;
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <SPI_Specs_Init+0x50>)
 8001a52:	4a13      	ldr	r2, [pc, #76]	; (8001aa0 <SPI_Specs_Init+0x54>)
 8001a54:	609a      	str	r2, [r3, #8]
	SPI1_Example.SPI_Config.pin_clk = Pin5;
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <SPI_Specs_Init+0x50>)
 8001a58:	2205      	movs	r2, #5
 8001a5a:	715a      	strb	r2, [r3, #5]
	SPI1_Example.SPI_Config.pin_miso = Pin6;
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <SPI_Specs_Init+0x50>)
 8001a5e:	2206      	movs	r2, #6
 8001a60:	71da      	strb	r2, [r3, #7]
	SPI1_Example.SPI_Config.pin_mosi = Pin7;
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <SPI_Specs_Init+0x50>)
 8001a64:	2207      	movs	r2, #7
 8001a66:	719a      	strb	r2, [r3, #6]

	//Set desired transfer methods
	SPI1_Example.ssm = SSM_Enable;
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <SPI_Specs_Init+0x50>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	745a      	strb	r2, [r3, #17]
	SPI1_Example.SPIx = SPI1;
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <SPI_Specs_Init+0x50>)
 8001a70:	4a0c      	ldr	r2, [pc, #48]	; (8001aa4 <SPI_Specs_Init+0x58>)
 8001a72:	601a      	str	r2, [r3, #0]
	SPI1_Example.SPI_Config.baudrate_ctrl = DIV4;
 8001a74:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <SPI_Specs_Init+0x50>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	731a      	strb	r2, [r3, #12]
	SPI1_Example.SPI_Config.cpha = Falling_Edge;
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <SPI_Specs_Init+0x50>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	739a      	strb	r2, [r3, #14]
	SPI1_Example.SPI_Config.cpol = Even_Polarity;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <SPI_Specs_Init+0x50>)
 8001a82:	2202      	movs	r2, #2
 8001a84:	735a      	strb	r2, [r3, #13]
	SPI1_Example.SPI_Config.data_format = MSB_First;
 8001a86:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <SPI_Specs_Init+0x50>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	73da      	strb	r2, [r3, #15]
	SPI1_Example.data_frame = Data_8_Bits;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <SPI_Specs_Init+0x50>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	741a      	strb	r2, [r3, #16]
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	2000001c 	.word	0x2000001c
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	40013000 	.word	0x40013000

08001aa8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001aa8:	480d      	ldr	r0, [pc, #52]	; (8001ae0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001aaa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001aac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab0:	480c      	ldr	r0, [pc, #48]	; (8001ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ab2:	490d      	ldr	r1, [pc, #52]	; (8001ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <LoopForever+0xe>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab8:	e002      	b.n	8001ac0 <LoopCopyDataInit>

08001aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001abe:	3304      	adds	r3, #4

08001ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac4:	d3f9      	bcc.n	8001aba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ac8:	4c0a      	ldr	r4, [pc, #40]	; (8001af4 <LoopForever+0x16>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001acc:	e001      	b.n	8001ad2 <LoopFillZerobss>

08001ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad0:	3204      	adds	r2, #4

08001ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad4:	d3fb      	bcc.n	8001ace <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ad6:	f000 f811 	bl	8001afc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ada:	f7ff fef5 	bl	80018c8 <main>

08001ade <LoopForever>:

LoopForever:
  b LoopForever
 8001ade:	e7fe      	b.n	8001ade <LoopForever>
  ldr   r0, =_estack
 8001ae0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001aec:	08001b64 	.word	0x08001b64
  ldr r2, =_sbss
 8001af0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001af4:	20000078 	.word	0x20000078

08001af8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001af8:	e7fe      	b.n	8001af8 <ADC_IRQHandler>
	...

08001afc <__libc_init_array>:
 8001afc:	b570      	push	{r4, r5, r6, lr}
 8001afe:	4d0d      	ldr	r5, [pc, #52]	; (8001b34 <__libc_init_array+0x38>)
 8001b00:	4c0d      	ldr	r4, [pc, #52]	; (8001b38 <__libc_init_array+0x3c>)
 8001b02:	1b64      	subs	r4, r4, r5
 8001b04:	10a4      	asrs	r4, r4, #2
 8001b06:	2600      	movs	r6, #0
 8001b08:	42a6      	cmp	r6, r4
 8001b0a:	d109      	bne.n	8001b20 <__libc_init_array+0x24>
 8001b0c:	4d0b      	ldr	r5, [pc, #44]	; (8001b3c <__libc_init_array+0x40>)
 8001b0e:	4c0c      	ldr	r4, [pc, #48]	; (8001b40 <__libc_init_array+0x44>)
 8001b10:	f000 f818 	bl	8001b44 <_init>
 8001b14:	1b64      	subs	r4, r4, r5
 8001b16:	10a4      	asrs	r4, r4, #2
 8001b18:	2600      	movs	r6, #0
 8001b1a:	42a6      	cmp	r6, r4
 8001b1c:	d105      	bne.n	8001b2a <__libc_init_array+0x2e>
 8001b1e:	bd70      	pop	{r4, r5, r6, pc}
 8001b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b24:	4798      	blx	r3
 8001b26:	3601      	adds	r6, #1
 8001b28:	e7ee      	b.n	8001b08 <__libc_init_array+0xc>
 8001b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b2e:	4798      	blx	r3
 8001b30:	3601      	adds	r6, #1
 8001b32:	e7f2      	b.n	8001b1a <__libc_init_array+0x1e>
 8001b34:	08001b5c 	.word	0x08001b5c
 8001b38:	08001b5c 	.word	0x08001b5c
 8001b3c:	08001b5c 	.word	0x08001b5c
 8001b40:	08001b60 	.word	0x08001b60

08001b44 <_init>:
 8001b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b46:	bf00      	nop
 8001b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b4a:	bc08      	pop	{r3}
 8001b4c:	469e      	mov	lr, r3
 8001b4e:	4770      	bx	lr

08001b50 <_fini>:
 8001b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b52:	bf00      	nop
 8001b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b56:	bc08      	pop	{r3}
 8001b58:	469e      	mov	lr, r3
 8001b5a:	4770      	bx	lr
