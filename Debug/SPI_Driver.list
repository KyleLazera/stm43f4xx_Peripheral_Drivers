
SPI_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c78  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08001e10  08001e10  00011e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e18  08001e18  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08001e18  08001e18  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e18  08001e18  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e18  08001e18  00011e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e1c  08001e1c  00011e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08001e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000028  08001e44  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08001e44  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002d32  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000abc  00000000  00000000  00022dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000260  00000000  00000000  00023888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001bc  00000000  00000000  00023ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000e4eb  00000000  00000000  00023ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002ee2  00000000  00000000  0003218f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00052350  00000000  00000000  00035071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000009b0  00000000  00000000  000873c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00087d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000028 	.word	0x20000028
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001df8 	.word	0x08001df8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000002c 	.word	0x2000002c
 80001d4:	08001df8 	.word	0x08001df8

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <GPIO_Config>:
 * 			0x0		or		GPIO_PUPD_None
 * 			0x1		or		GPIO_PullUp
 * 			0x2		or		GPIO_PullDown
 */
void GPIO_Config(GPIO_Config_t *GPIO_Config, GPIO_TypeDef *Port, uint8_t Pin, uint8_t Mode, uint8_t OType, uint8_t OSpeed, uint8_t PUPD)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	4611      	mov	r1, r2
 80007b0:	461a      	mov	r2, r3
 80007b2:	460b      	mov	r3, r1
 80007b4:	71fb      	strb	r3, [r7, #7]
 80007b6:	4613      	mov	r3, r2
 80007b8:	71bb      	strb	r3, [r7, #6]
	GPIO_Config->GPIO_Pin = Pin;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	79fa      	ldrb	r2, [r7, #7]
 80007be:	701a      	strb	r2, [r3, #0]
	GPIO_Config->GPIO_Port = Port;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	609a      	str	r2, [r3, #8]
	GPIO_Config->GPIO_MODE = Mode;
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	79ba      	ldrb	r2, [r7, #6]
 80007ca:	705a      	strb	r2, [r3, #1]
	GPIO_Config->GPIO_OTYPE = OType;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	7e3a      	ldrb	r2, [r7, #24]
 80007d0:	709a      	strb	r2, [r3, #2]
	GPIO_Config->GPIO_OSPEED = OSpeed;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	7f3a      	ldrb	r2, [r7, #28]
 80007d6:	70da      	strb	r2, [r3, #3]
	GPIO_Config->GPIO_PUPD = PUPD;
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f897 2020 	ldrb.w	r2, [r7, #32]
 80007de:	711a      	strb	r2, [r3, #4]
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <GPIO_PeriphClck>:
 * @param	GPIOx: Defines the specific GPIO port, where x can range from A - E, or H.
 *
 * @param	state: Specifies whether to enable or disable the peripheral.
 */
void GPIO_PeriphClck(GPIO_TypeDef *GPIOx, FunctionalState state)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
	if(state == ENABLE)
 80007f8:	78fb      	ldrb	r3, [r7, #3]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d135      	bne.n	800086a <GPIO_PeriphClck+0x7e>
	{
		if(GPIOx == GPIOA)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a36      	ldr	r2, [pc, #216]	; (80008dc <GPIO_PeriphClck+0xf0>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d104      	bne.n	8000810 <GPIO_PeriphClck+0x24>
		{
			RCC_AHB1Cmd(GPIOA_Enable, ENABLE);
 8000806:	2101      	movs	r1, #1
 8000808:	2001      	movs	r0, #1
 800080a:	f000 fcd9 	bl	80011c0 <RCC_AHB1Cmd>
			RCC_AHB1Cmd(GPIOH_Enable, DISABLE);
		}

	}

}
 800080e:	e061      	b.n	80008d4 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOB)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a33      	ldr	r2, [pc, #204]	; (80008e0 <GPIO_PeriphClck+0xf4>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d104      	bne.n	8000822 <GPIO_PeriphClck+0x36>
			RCC_AHB1Cmd(GPIOB_Enable, ENABLE);
 8000818:	2101      	movs	r1, #1
 800081a:	2002      	movs	r0, #2
 800081c:	f000 fcd0 	bl	80011c0 <RCC_AHB1Cmd>
}
 8000820:	e058      	b.n	80008d4 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOC)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a2f      	ldr	r2, [pc, #188]	; (80008e4 <GPIO_PeriphClck+0xf8>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d104      	bne.n	8000834 <GPIO_PeriphClck+0x48>
			RCC_AHB1Cmd(GPIOC_Enable, ENABLE);
 800082a:	2101      	movs	r1, #1
 800082c:	2004      	movs	r0, #4
 800082e:	f000 fcc7 	bl	80011c0 <RCC_AHB1Cmd>
}
 8000832:	e04f      	b.n	80008d4 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOD)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a2c      	ldr	r2, [pc, #176]	; (80008e8 <GPIO_PeriphClck+0xfc>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d104      	bne.n	8000846 <GPIO_PeriphClck+0x5a>
			RCC_AHB1Cmd(GPIOD_Enable, ENABLE);
 800083c:	2101      	movs	r1, #1
 800083e:	2008      	movs	r0, #8
 8000840:	f000 fcbe 	bl	80011c0 <RCC_AHB1Cmd>
}
 8000844:	e046      	b.n	80008d4 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOE)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a28      	ldr	r2, [pc, #160]	; (80008ec <GPIO_PeriphClck+0x100>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d104      	bne.n	8000858 <GPIO_PeriphClck+0x6c>
			RCC_AHB1Cmd(GPIOE_Enable, ENABLE);
 800084e:	2101      	movs	r1, #1
 8000850:	2010      	movs	r0, #16
 8000852:	f000 fcb5 	bl	80011c0 <RCC_AHB1Cmd>
}
 8000856:	e03d      	b.n	80008d4 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOH)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a25      	ldr	r2, [pc, #148]	; (80008f0 <GPIO_PeriphClck+0x104>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d139      	bne.n	80008d4 <GPIO_PeriphClck+0xe8>
			RCC_AHB1Cmd(GPIOH_Enable, ENABLE);
 8000860:	2101      	movs	r1, #1
 8000862:	2080      	movs	r0, #128	; 0x80
 8000864:	f000 fcac 	bl	80011c0 <RCC_AHB1Cmd>
}
 8000868:	e034      	b.n	80008d4 <GPIO_PeriphClck+0xe8>
		if(GPIOx == GPIOA)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4a1b      	ldr	r2, [pc, #108]	; (80008dc <GPIO_PeriphClck+0xf0>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d104      	bne.n	800087c <GPIO_PeriphClck+0x90>
			RCC_AHB1Cmd(GPIOA_Enable, DISABLE);
 8000872:	2100      	movs	r1, #0
 8000874:	2001      	movs	r0, #1
 8000876:	f000 fca3 	bl	80011c0 <RCC_AHB1Cmd>
}
 800087a:	e02b      	b.n	80008d4 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOB)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a18      	ldr	r2, [pc, #96]	; (80008e0 <GPIO_PeriphClck+0xf4>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d104      	bne.n	800088e <GPIO_PeriphClck+0xa2>
			RCC_AHB1Cmd(GPIOB_Enable, DISABLE);
 8000884:	2100      	movs	r1, #0
 8000886:	2002      	movs	r0, #2
 8000888:	f000 fc9a 	bl	80011c0 <RCC_AHB1Cmd>
}
 800088c:	e022      	b.n	80008d4 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOC)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a14      	ldr	r2, [pc, #80]	; (80008e4 <GPIO_PeriphClck+0xf8>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d104      	bne.n	80008a0 <GPIO_PeriphClck+0xb4>
			RCC_AHB1Cmd(GPIOC_Enable, DISABLE);
 8000896:	2100      	movs	r1, #0
 8000898:	2004      	movs	r0, #4
 800089a:	f000 fc91 	bl	80011c0 <RCC_AHB1Cmd>
}
 800089e:	e019      	b.n	80008d4 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOD)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a11      	ldr	r2, [pc, #68]	; (80008e8 <GPIO_PeriphClck+0xfc>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d104      	bne.n	80008b2 <GPIO_PeriphClck+0xc6>
			RCC_AHB1Cmd(GPIOD_Enable, DISABLE);
 80008a8:	2100      	movs	r1, #0
 80008aa:	2008      	movs	r0, #8
 80008ac:	f000 fc88 	bl	80011c0 <RCC_AHB1Cmd>
}
 80008b0:	e010      	b.n	80008d4 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOE)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a0d      	ldr	r2, [pc, #52]	; (80008ec <GPIO_PeriphClck+0x100>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d104      	bne.n	80008c4 <GPIO_PeriphClck+0xd8>
			RCC_AHB1Cmd(GPIOE_Enable, DISABLE);
 80008ba:	2100      	movs	r1, #0
 80008bc:	2010      	movs	r0, #16
 80008be:	f000 fc7f 	bl	80011c0 <RCC_AHB1Cmd>
}
 80008c2:	e007      	b.n	80008d4 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOH)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <GPIO_PeriphClck+0x104>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d103      	bne.n	80008d4 <GPIO_PeriphClck+0xe8>
			RCC_AHB1Cmd(GPIOH_Enable, DISABLE);
 80008cc:	2100      	movs	r1, #0
 80008ce:	2080      	movs	r0, #128	; 0x80
 80008d0:	f000 fc76 	bl	80011c0 <RCC_AHB1Cmd>
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40020000 	.word	0x40020000
 80008e0:	40020400 	.word	0x40020400
 80008e4:	40020800 	.word	0x40020800
 80008e8:	40020c00 	.word	0x40020c00
 80008ec:	40021000 	.word	0x40021000
 80008f0:	40021c00 	.word	0x40021c00

080008f4 <GPIO_AlternateFunctionConfig>:
 * @param	alt_function: This will take in the alternate function value that the user wishes to use.
 * 			The specific alternate function values and their functions are present in the data sheet.
 * 			The inputs for this function are AF0 - AF15;
 */
void GPIO_AlternateFunctionConfig(GPIO_Config_t *GPIO_Config, AFR_Config_t alt_function)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	70fb      	strb	r3, [r7, #3]
	uint8_t pin = GPIO_Config->GPIO_Pin;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	73fb      	strb	r3, [r7, #15]
	uint8_t alt_function_array = pin/8;
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	08db      	lsrs	r3, r3, #3
 800090a:	73bb      	strb	r3, [r7, #14]

	if(alt_function_array == 1)
 800090c:	7bbb      	ldrb	r3, [r7, #14]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d102      	bne.n	8000918 <GPIO_AlternateFunctionConfig+0x24>
	{
		pin -= 8;
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	3b08      	subs	r3, #8
 8000916:	73fb      	strb	r3, [r7, #15]
	}

	GPIO_Config->GPIO_Port->AFR[alt_function_array] &= ~(AF15 << (pin * 4));
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	7bba      	ldrb	r2, [r7, #14]
 800091e:	3208      	adds	r2, #8
 8000920:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	220f      	movs	r2, #15
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	43db      	mvns	r3, r3
 8000930:	4618      	mov	r0, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	7bba      	ldrb	r2, [r7, #14]
 8000938:	4001      	ands	r1, r0
 800093a:	3208      	adds	r2, #8
 800093c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GPIO_Config->GPIO_Port->AFR[alt_function_array] |= (alt_function << (pin * 4));
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	7bba      	ldrb	r2, [r7, #14]
 8000946:	3208      	adds	r2, #8
 8000948:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800094c:	78fa      	ldrb	r2, [r7, #3]
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	4618      	mov	r0, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	7bba      	ldrb	r2, [r7, #14]
 800095e:	4301      	orrs	r1, r0
 8000960:	3208      	adds	r2, #8
 8000962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000966:	bf00      	nop
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <GPIO_Init>:
 *
 * @param	GPIO_Config: pointer to the GPIO_Config_t data structure that contains the
 * 			configuration parameters for the specific GPIO pin.
 */
void GPIO_Init(GPIO_Config_t *GPIO_Config, AFR_Config_t alt_function)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	70fb      	strb	r3, [r7, #3]
	uint8_t pin = GPIO_Config->GPIO_Pin;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	73fb      	strb	r3, [r7, #15]
	uint32_t temp_variable;

	GPIO_PeriphClck(GPIO_Config->GPIO_Port, ENABLE);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	2101      	movs	r1, #1
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff2d 	bl	80007ec <GPIO_PeriphClck>

	if(GPIO_Config->GPIO_Pin == AllPins)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b10      	cmp	r3, #16
 8000998:	f040 8094 	bne.w	8000ac4 <GPIO_Init+0x150>
	{
		if(GPIO_Config->GPIO_Port == GPIOA)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	4a88      	ldr	r2, [pc, #544]	; (8000bc4 <GPIO_Init+0x250>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d112      	bne.n	80009cc <GPIO_Init+0x58>
		{
			/*Use the lock configuration to lock PA13 and PA14*/
			GPIO_Config->GPIO_Port->LCKR = LCKR_1_Pin13_Pin14;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	f44f 32b0 	mov.w	r2, #90112	; 0x16000
 80009ae:	61da      	str	r2, [r3, #28]
			GPIO_Config->GPIO_Port->LCKR = LCKR_0_Pin13_Pin14;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80009b8:	61da      	str	r2, [r3, #28]
			GPIO_Config->GPIO_Port->LCKR = LCKR_1_Pin13_Pin14;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	f44f 32b0 	mov.w	r2, #90112	; 0x16000
 80009c2:	61da      	str	r2, [r3, #28]
			temp_variable = GPIO_Config->GPIO_Port->LCKR;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	60bb      	str	r3, [r7, #8]
		}

		/*Used to set each pin is AllPins is set by user*/
		for(pin = 0; pin < 16; pin++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	73fb      	strb	r3, [r7, #15]
 80009d0:	e074      	b.n	8000abc <GPIO_Init+0x148>
		{
			GPIO_Config->GPIO_Port->MODER &= ~(GPIO_Mode_Reset << (pin * 2));
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	2103      	movs	r1, #3
 80009de:	fa01 f303 	lsl.w	r3, r1, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	4619      	mov	r1, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	400a      	ands	r2, r1
 80009ec:	601a      	str	r2, [r3, #0]
			GPIO_Config->GPIO_Port->MODER |= ((GPIO_Config->GPIO_MODE) << (pin * 2));
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	785b      	ldrb	r3, [r3, #1]
 80009f8:	4619      	mov	r1, r3
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000a02:	4619      	mov	r1, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	601a      	str	r2, [r3, #0]

			GPIO_Config->GPIO_Port->OTYPER &= ~(GPIO_OType_Reset << pin);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	685a      	ldr	r2, [r3, #4]
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	2101      	movs	r1, #1
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	400a      	ands	r2, r1
 8000a24:	605a      	str	r2, [r3, #4]
			GPIO_Config->GPIO_Port->OTYPER |= ((GPIO_Config->GPIO_OTYPE) << pin);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	685a      	ldr	r2, [r3, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	789b      	ldrb	r3, [r3, #2]
 8000a30:	4619      	mov	r1, r3
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	fa01 f303 	lsl.w	r3, r1, r3
 8000a38:	4619      	mov	r1, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	605a      	str	r2, [r3, #4]

			GPIO_Config->GPIO_Port->OSPEEDR &= ~(GPIO_OSpeed_Reset << (pin * 2));
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	689a      	ldr	r2, [r3, #8]
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	4619      	mov	r1, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	400a      	ands	r2, r1
 8000a5c:	609a      	str	r2, [r3, #8]
			GPIO_Config->GPIO_Port->OSPEEDR |= ((GPIO_Config->GPIO_OSPEED) << (pin * 2));
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	689a      	ldr	r2, [r3, #8]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	78db      	ldrb	r3, [r3, #3]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a72:	4619      	mov	r1, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	609a      	str	r2, [r3, #8]

			GPIO_Config->GPIO_Port->PUPDR &= ~(GPIO_PUPD_Reset << (pin * 2));
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	68da      	ldr	r2, [r3, #12]
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	2103      	movs	r1, #3
 8000a88:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	4619      	mov	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	400a      	ands	r2, r1
 8000a96:	60da      	str	r2, [r3, #12]
			GPIO_Config->GPIO_Port->PUPDR |= ((GPIO_Config->GPIO_PUPD) << (pin * 2));
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	68da      	ldr	r2, [r3, #12]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	791b      	ldrb	r3, [r3, #4]
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aac:	4619      	mov	r1, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	60da      	str	r2, [r3, #12]
		for(pin = 0; pin < 16; pin++)
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	73fb      	strb	r3, [r7, #15]
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	2b0f      	cmp	r3, #15
 8000ac0:	d987      	bls.n	80009d2 <GPIO_Init+0x5e>

		GPIO_Config->GPIO_Port->PUPDR &= ~(GPIO_PUPD_Reset << (pin * 2));
		GPIO_Config->GPIO_Port->PUPDR |= ((GPIO_Config->GPIO_PUPD) << (pin * 2));
	}

}
 8000ac2:	e07a      	b.n	8000bba <GPIO_Init+0x246>
		GPIO_Config->GPIO_Port->MODER &= ~(GPIO_Mode_Reset << (pin * 2));
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	2103      	movs	r1, #3
 8000ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	400a      	ands	r2, r1
 8000ade:	601a      	str	r2, [r3, #0]
		GPIO_Config->GPIO_Port->MODER |= ((GPIO_Config->GPIO_MODE) << (pin * 2));
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	785b      	ldrb	r3, [r3, #1]
 8000aea:	4619      	mov	r1, r3
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	fa01 f303 	lsl.w	r3, r1, r3
 8000af4:	4619      	mov	r1, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	430a      	orrs	r2, r1
 8000afc:	601a      	str	r2, [r3, #0]
		if(GPIO_Config->GPIO_MODE == GPIO_AF)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	785b      	ldrb	r3, [r3, #1]
 8000b02:	2b02      	cmp	r3, #2
 8000b04:	d104      	bne.n	8000b10 <GPIO_Init+0x19c>
			GPIO_AlternateFunctionConfig(GPIO_Config, alt_function);
 8000b06:	78fb      	ldrb	r3, [r7, #3]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff fef2 	bl	80008f4 <GPIO_AlternateFunctionConfig>
		GPIO_Config->GPIO_Port->OTYPER &= ~(GPIO_OType_Reset << pin);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	685a      	ldr	r2, [r3, #4]
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
 8000b18:	2101      	movs	r1, #1
 8000b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	4619      	mov	r1, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	400a      	ands	r2, r1
 8000b28:	605a      	str	r2, [r3, #4]
		GPIO_Config->GPIO_Port->OTYPER |= ((GPIO_Config->GPIO_OTYPE) << pin);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	689b      	ldr	r3, [r3, #8]
 8000b2e:	685a      	ldr	r2, [r3, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	789b      	ldrb	r3, [r3, #2]
 8000b34:	4619      	mov	r1, r3
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	430a      	orrs	r2, r1
 8000b44:	605a      	str	r2, [r3, #4]
		GPIO_Config->GPIO_Port->OSPEEDR &= ~(GPIO_OSpeed_Reset << (pin * 2));
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	689a      	ldr	r2, [r3, #8]
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	2101      	movs	r1, #1
 8000b52:	fa01 f303 	lsl.w	r3, r1, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	4619      	mov	r1, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	400a      	ands	r2, r1
 8000b60:	609a      	str	r2, [r3, #8]
		GPIO_Config->GPIO_Port->OSPEEDR |= ((GPIO_Config->GPIO_OSPEED) << (pin * 2));
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	689a      	ldr	r2, [r3, #8]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	78db      	ldrb	r3, [r3, #3]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	fa01 f303 	lsl.w	r3, r1, r3
 8000b76:	4619      	mov	r1, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	609a      	str	r2, [r3, #8]
		GPIO_Config->GPIO_Port->PUPDR &= ~(GPIO_PUPD_Reset << (pin * 2));
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	68da      	ldr	r2, [r3, #12]
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	2103      	movs	r1, #3
 8000b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	4619      	mov	r1, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	400a      	ands	r2, r1
 8000b9a:	60da      	str	r2, [r3, #12]
		GPIO_Config->GPIO_Port->PUPDR |= ((GPIO_Config->GPIO_PUPD) << (pin * 2));
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	68da      	ldr	r2, [r3, #12]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	791b      	ldrb	r3, [r3, #4]
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	60da      	str	r2, [r3, #12]
}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40020000 	.word	0x40020000

08000bc8 <SPI1_Periph_Enable>:

/*
 * @Brief SPI peripheral enabled specified for SPI1. There are 3 other functions: 1 for each SPI peripheral.
 */
void SPI1_Periph_Enable(uint8_t ssm_enabled, GPIO_TypeDef *GPIOx, uint8_t cs_pin, uint8_t clk_pin, uint8_t mosi_pin, uint8_t miso_pin)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af04      	add	r7, sp, #16
 8000bce:	6039      	str	r1, [r7, #0]
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	71fb      	strb	r3, [r7, #7]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	71bb      	strb	r3, [r7, #6]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	717b      	strb	r3, [r7, #5]
	GPIO_Config_t SPI1_Periph;

	//Check if SSM bit is enabled
	if(ssm_enabled)
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d013      	beq.n	8000c0e <SPI1_Periph_Enable+0x46>
	{
		//Config the specified pin and port for the chip select
		GPIO_Config(&SPI1_Periph, GPIOx, cs_pin, GPIO_Output, GPIO_PushPull, GPIO_LowSpeed, GPIO_PullUp);
 8000be6:	79ba      	ldrb	r2, [r7, #6]
 8000be8:	f107 000c 	add.w	r0, r7, #12
 8000bec:	2301      	movs	r3, #1
 8000bee:	9302      	str	r3, [sp, #8]
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	9301      	str	r3, [sp, #4]
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	6839      	ldr	r1, [r7, #0]
 8000bfc:	f7ff fdd2 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, 0x00);
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff feb4 	bl	8000974 <GPIO_Init>
 8000c0c:	e012      	b.n	8000c34 <SPI1_Periph_Enable+0x6c>
	}
	//If SSOE is enabled
	else
	{
		//Configure the NSS pin for alternate function
		GPIO_Config(&SPI1_Periph, GPIOA, cs_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000c0e:	79ba      	ldrb	r2, [r7, #6]
 8000c10:	f107 000c 	add.w	r0, r7, #12
 8000c14:	2300      	movs	r3, #0
 8000c16:	9302      	str	r3, [sp, #8]
 8000c18:	2300      	movs	r3, #0
 8000c1a:	9301      	str	r3, [sp, #4]
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	2302      	movs	r3, #2
 8000c22:	494d      	ldr	r1, [pc, #308]	; (8000d58 <SPI1_Periph_Enable+0x190>)
 8000c24:	f7ff fdbe 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	2105      	movs	r1, #5
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fea0 	bl	8000974 <GPIO_Init>
	}

	//Configure the SPI clock pin
	switch(clk_pin){
 8000c34:	797b      	ldrb	r3, [r7, #5]
 8000c36:	2b03      	cmp	r3, #3
 8000c38:	d015      	beq.n	8000c66 <SPI1_Periph_Enable+0x9e>
 8000c3a:	2b05      	cmp	r3, #5
 8000c3c:	d127      	bne.n	8000c8e <SPI1_Periph_Enable+0xc6>
	case 5:
		GPIO_Config(&SPI1_Periph, GPIOA, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000c3e:	797a      	ldrb	r2, [r7, #5]
 8000c40:	f107 000c 	add.w	r0, r7, #12
 8000c44:	2300      	movs	r3, #0
 8000c46:	9302      	str	r3, [sp, #8]
 8000c48:	2300      	movs	r3, #0
 8000c4a:	9301      	str	r3, [sp, #4]
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	2302      	movs	r3, #2
 8000c52:	4941      	ldr	r1, [pc, #260]	; (8000d58 <SPI1_Periph_Enable+0x190>)
 8000c54:	f7ff fda6 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	2105      	movs	r1, #5
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fe88 	bl	8000974 <GPIO_Init>
		break;
 8000c64:	e013      	b.n	8000c8e <SPI1_Periph_Enable+0xc6>
	case 3:
		GPIO_Config(&SPI1_Periph, GPIOB, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000c66:	797a      	ldrb	r2, [r7, #5]
 8000c68:	f107 000c 	add.w	r0, r7, #12
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	9302      	str	r3, [sp, #8]
 8000c70:	2300      	movs	r3, #0
 8000c72:	9301      	str	r3, [sp, #4]
 8000c74:	2300      	movs	r3, #0
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	2302      	movs	r3, #2
 8000c7a:	4938      	ldr	r1, [pc, #224]	; (8000d5c <SPI1_Periph_Enable+0x194>)
 8000c7c:	f7ff fd92 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	2105      	movs	r1, #5
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fe74 	bl	8000974 <GPIO_Init>
		break;
 8000c8c:	bf00      	nop
	}

	//Conigure MISO pin
	switch(miso_pin){
 8000c8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	d016      	beq.n	8000cc4 <SPI1_Periph_Enable+0xfc>
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d129      	bne.n	8000cee <SPI1_Periph_Enable+0x126>
	case 6:
		GPIO_Config(&SPI1_Periph, GPIOA, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000c9a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000c9e:	f107 000c 	add.w	r0, r7, #12
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	9302      	str	r3, [sp, #8]
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	9301      	str	r3, [sp, #4]
 8000caa:	2300      	movs	r3, #0
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	2302      	movs	r3, #2
 8000cb0:	4929      	ldr	r1, [pc, #164]	; (8000d58 <SPI1_Periph_Enable+0x190>)
 8000cb2:	f7ff fd77 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	2105      	movs	r1, #5
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fe59 	bl	8000974 <GPIO_Init>
		break;
 8000cc2:	e014      	b.n	8000cee <SPI1_Periph_Enable+0x126>
	case 4:
		GPIO_Config(&SPI1_Periph, GPIOB, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000cc4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000cc8:	f107 000c 	add.w	r0, r7, #12
 8000ccc:	2300      	movs	r3, #0
 8000cce:	9302      	str	r3, [sp, #8]
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	9301      	str	r3, [sp, #4]
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	2302      	movs	r3, #2
 8000cda:	4920      	ldr	r1, [pc, #128]	; (8000d5c <SPI1_Periph_Enable+0x194>)
 8000cdc:	f7ff fd62 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	2105      	movs	r1, #5
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fe44 	bl	8000974 <GPIO_Init>
		break;
 8000cec:	bf00      	nop
	}

	//Configure MOSI pin
	switch(mosi_pin){
 8000cee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cf2:	2b05      	cmp	r3, #5
 8000cf4:	d016      	beq.n	8000d24 <SPI1_Periph_Enable+0x15c>
 8000cf6:	2b07      	cmp	r3, #7
 8000cf8:	d129      	bne.n	8000d4e <SPI1_Periph_Enable+0x186>
	case 7:
		GPIO_Config(&SPI1_Periph, GPIOA, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000cfa:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000cfe:	f107 000c 	add.w	r0, r7, #12
 8000d02:	2300      	movs	r3, #0
 8000d04:	9302      	str	r3, [sp, #8]
 8000d06:	2300      	movs	r3, #0
 8000d08:	9301      	str	r3, [sp, #4]
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	2302      	movs	r3, #2
 8000d10:	4911      	ldr	r1, [pc, #68]	; (8000d58 <SPI1_Periph_Enable+0x190>)
 8000d12:	f7ff fd47 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 8000d16:	f107 030c 	add.w	r3, r7, #12
 8000d1a:	2105      	movs	r1, #5
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fe29 	bl	8000974 <GPIO_Init>
		break;
 8000d22:	e014      	b.n	8000d4e <SPI1_Periph_Enable+0x186>
	case 5:
		GPIO_Config(&SPI1_Periph, GPIOB, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000d24:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d28:	f107 000c 	add.w	r0, r7, #12
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	9302      	str	r3, [sp, #8]
 8000d30:	2300      	movs	r3, #0
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	2300      	movs	r3, #0
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2302      	movs	r3, #2
 8000d3a:	4908      	ldr	r1, [pc, #32]	; (8000d5c <SPI1_Periph_Enable+0x194>)
 8000d3c:	f7ff fd32 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	2105      	movs	r1, #5
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fe14 	bl	8000974 <GPIO_Init>
		break;
 8000d4c:	bf00      	nop
	}
}
 8000d4e:	bf00      	nop
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40020000 	.word	0x40020000
 8000d5c:	40020400 	.word	0x40020400

08000d60 <SPI2_Periph_Enable>:

void SPI2_Periph_Enable(uint8_t ssm_enabled, GPIO_TypeDef *GPIOx, uint8_t cs_pin, uint8_t clk_pin, uint8_t mosi_pin, uint8_t miso_pin)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af04      	add	r7, sp, #16
 8000d66:	6039      	str	r1, [r7, #0]
 8000d68:	4611      	mov	r1, r2
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	71fb      	strb	r3, [r7, #7]
 8000d70:	460b      	mov	r3, r1
 8000d72:	71bb      	strb	r3, [r7, #6]
 8000d74:	4613      	mov	r3, r2
 8000d76:	717b      	strb	r3, [r7, #5]
	GPIO_Config_t SPI2_Periph;

	//Check if SSM bit is enabled
	if(ssm_enabled)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d013      	beq.n	8000da6 <SPI2_Periph_Enable+0x46>
	{
		//Config the specified pin and port for the chip select
		GPIO_Config(&SPI2_Periph, GPIOx, cs_pin, GPIO_Output, GPIO_PushPull, GPIO_LowSpeed, GPIO_PullUp);
 8000d7e:	79ba      	ldrb	r2, [r7, #6]
 8000d80:	f107 000c 	add.w	r0, r7, #12
 8000d84:	2301      	movs	r3, #1
 8000d86:	9302      	str	r3, [sp, #8]
 8000d88:	2300      	movs	r3, #0
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2301      	movs	r3, #1
 8000d92:	6839      	ldr	r1, [r7, #0]
 8000d94:	f7ff fd06 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, 0x00);
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fde8 	bl	8000974 <GPIO_Init>
 8000da4:	e012      	b.n	8000dcc <SPI2_Periph_Enable+0x6c>
	}
	//If SSOE is enabled
	else
	{
		//Configure the NSS pin for alternate function
		GPIO_Config(&SPI2_Periph, GPIOB, cs_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000da6:	79ba      	ldrb	r2, [r7, #6]
 8000da8:	f107 000c 	add.w	r0, r7, #12
 8000dac:	2300      	movs	r3, #0
 8000dae:	9302      	str	r3, [sp, #8]
 8000db0:	2300      	movs	r3, #0
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	2300      	movs	r3, #0
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2302      	movs	r3, #2
 8000dba:	494d      	ldr	r1, [pc, #308]	; (8000ef0 <SPI2_Periph_Enable+0x190>)
 8000dbc:	f7ff fcf2 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	2105      	movs	r1, #5
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fdd4 	bl	8000974 <GPIO_Init>
	}

	//Configure the SPI clock pin
	switch(clk_pin){
 8000dcc:	797b      	ldrb	r3, [r7, #5]
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	d113      	bne.n	8000dfa <SPI2_Periph_Enable+0x9a>
	case 3:
		GPIO_Config(&SPI2_Periph, GPIOD, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000dd2:	797a      	ldrb	r2, [r7, #5]
 8000dd4:	f107 000c 	add.w	r0, r7, #12
 8000dd8:	2300      	movs	r3, #0
 8000dda:	9302      	str	r3, [sp, #8]
 8000ddc:	2300      	movs	r3, #0
 8000dde:	9301      	str	r3, [sp, #4]
 8000de0:	2300      	movs	r3, #0
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2302      	movs	r3, #2
 8000de6:	4943      	ldr	r1, [pc, #268]	; (8000ef4 <SPI2_Periph_Enable+0x194>)
 8000de8:	f7ff fcdc 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	2105      	movs	r1, #5
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fdbe 	bl	8000974 <GPIO_Init>
		break;
 8000df8:	e013      	b.n	8000e22 <SPI2_Periph_Enable+0xc2>
	default:
		GPIO_Config(&SPI2_Periph, GPIOB, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000dfa:	797a      	ldrb	r2, [r7, #5]
 8000dfc:	f107 000c 	add.w	r0, r7, #12
 8000e00:	2300      	movs	r3, #0
 8000e02:	9302      	str	r3, [sp, #8]
 8000e04:	2300      	movs	r3, #0
 8000e06:	9301      	str	r3, [sp, #4]
 8000e08:	2300      	movs	r3, #0
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	4938      	ldr	r1, [pc, #224]	; (8000ef0 <SPI2_Periph_Enable+0x190>)
 8000e10:	f7ff fcc8 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	2105      	movs	r1, #5
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fdaa 	bl	8000974 <GPIO_Init>
		break;
 8000e20:	bf00      	nop
	}

	//Conigure MISO pin
	switch(miso_pin){
 8000e22:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d002      	beq.n	8000e30 <SPI2_Periph_Enable+0xd0>
 8000e2a:	2b0e      	cmp	r3, #14
 8000e2c:	d015      	beq.n	8000e5a <SPI2_Periph_Enable+0xfa>
 8000e2e:	e029      	b.n	8000e84 <SPI2_Periph_Enable+0x124>
	case 2:
		GPIO_Config(&SPI2_Periph, GPIOC, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000e30:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000e34:	f107 000c 	add.w	r0, r7, #12
 8000e38:	2300      	movs	r3, #0
 8000e3a:	9302      	str	r3, [sp, #8]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	9301      	str	r3, [sp, #4]
 8000e40:	2300      	movs	r3, #0
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	2302      	movs	r3, #2
 8000e46:	492c      	ldr	r1, [pc, #176]	; (8000ef8 <SPI2_Periph_Enable+0x198>)
 8000e48:	f7ff fcac 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	2105      	movs	r1, #5
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fd8e 	bl	8000974 <GPIO_Init>
		break;
 8000e58:	e014      	b.n	8000e84 <SPI2_Periph_Enable+0x124>
	case 14:
		GPIO_Config(&SPI2_Periph, GPIOB, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000e5a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000e5e:	f107 000c 	add.w	r0, r7, #12
 8000e62:	2300      	movs	r3, #0
 8000e64:	9302      	str	r3, [sp, #8]
 8000e66:	2300      	movs	r3, #0
 8000e68:	9301      	str	r3, [sp, #4]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	2302      	movs	r3, #2
 8000e70:	491f      	ldr	r1, [pc, #124]	; (8000ef0 <SPI2_Periph_Enable+0x190>)
 8000e72:	f7ff fc97 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8000e76:	f107 030c 	add.w	r3, r7, #12
 8000e7a:	2105      	movs	r1, #5
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fd79 	bl	8000974 <GPIO_Init>
		break;
 8000e82:	bf00      	nop
	}

	//Configure MOSI pin
	switch(mosi_pin){
 8000e84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d002      	beq.n	8000e92 <SPI2_Periph_Enable+0x132>
 8000e8c:	2b0f      	cmp	r3, #15
 8000e8e:	d015      	beq.n	8000ebc <SPI2_Periph_Enable+0x15c>
	case 15:
		GPIO_Config(&SPI2_Periph, GPIOB, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
		GPIO_Init(&SPI2_Periph, AF5);
		break;
	}
}
 8000e90:	e029      	b.n	8000ee6 <SPI2_Periph_Enable+0x186>
		GPIO_Config(&SPI2_Periph, GPIOC, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000e92:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000e96:	f107 000c 	add.w	r0, r7, #12
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	9302      	str	r3, [sp, #8]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	4913      	ldr	r1, [pc, #76]	; (8000ef8 <SPI2_Periph_Enable+0x198>)
 8000eaa:	f7ff fc7b 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8000eae:	f107 030c 	add.w	r3, r7, #12
 8000eb2:	2105      	movs	r1, #5
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fd5d 	bl	8000974 <GPIO_Init>
		break;
 8000eba:	e014      	b.n	8000ee6 <SPI2_Periph_Enable+0x186>
		GPIO_Config(&SPI2_Periph, GPIOB, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000ebc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000ec0:	f107 000c 	add.w	r0, r7, #12
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	9302      	str	r3, [sp, #8]
 8000ec8:	2300      	movs	r3, #0
 8000eca:	9301      	str	r3, [sp, #4]
 8000ecc:	2300      	movs	r3, #0
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	4907      	ldr	r1, [pc, #28]	; (8000ef0 <SPI2_Periph_Enable+0x190>)
 8000ed4:	f7ff fc66 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	2105      	movs	r1, #5
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fd48 	bl	8000974 <GPIO_Init>
		break;
 8000ee4:	bf00      	nop
}
 8000ee6:	bf00      	nop
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40020400 	.word	0x40020400
 8000ef4:	40020c00 	.word	0x40020c00
 8000ef8:	40020800 	.word	0x40020800

08000efc <SPI3_Periph_Enable>:

void SPI3_Periph_Enable(uint8_t ssm_enabled, GPIO_TypeDef *GPIOx, uint8_t cs_pin, uint8_t clk_pin, uint8_t mosi_pin, uint8_t miso_pin)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af04      	add	r7, sp, #16
 8000f02:	6039      	str	r1, [r7, #0]
 8000f04:	4611      	mov	r1, r2
 8000f06:	461a      	mov	r2, r3
 8000f08:	4603      	mov	r3, r0
 8000f0a:	71fb      	strb	r3, [r7, #7]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	71bb      	strb	r3, [r7, #6]
 8000f10:	4613      	mov	r3, r2
 8000f12:	717b      	strb	r3, [r7, #5]
	GPIO_Config_t SPI3_Periph;

	//Check if SSM bit is enabled
	if(ssm_enabled)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d013      	beq.n	8000f42 <SPI3_Periph_Enable+0x46>
	{
		//Config the specified pin and port for the chip select
		GPIO_Config(&SPI3_Periph, GPIOx, cs_pin, GPIO_Output, GPIO_PushPull, GPIO_LowSpeed, GPIO_PullUp);
 8000f1a:	79ba      	ldrb	r2, [r7, #6]
 8000f1c:	f107 000c 	add.w	r0, r7, #12
 8000f20:	2301      	movs	r3, #1
 8000f22:	9302      	str	r3, [sp, #8]
 8000f24:	2300      	movs	r3, #0
 8000f26:	9301      	str	r3, [sp, #4]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	6839      	ldr	r1, [r7, #0]
 8000f30:	f7ff fc38 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, 0x00);
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fd1a 	bl	8000974 <GPIO_Init>
 8000f40:	e012      	b.n	8000f68 <SPI3_Periph_Enable+0x6c>
	}
	//If SSOE is enabled
	else
	{
		//Configure the NSS pin for alternate function
		GPIO_Config(&SPI3_Periph, GPIOA, cs_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000f42:	79ba      	ldrb	r2, [r7, #6]
 8000f44:	f107 000c 	add.w	r0, r7, #12
 8000f48:	2300      	movs	r3, #0
 8000f4a:	9302      	str	r3, [sp, #8]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	9301      	str	r3, [sp, #4]
 8000f50:	2300      	movs	r3, #0
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	2302      	movs	r3, #2
 8000f56:	495a      	ldr	r1, [pc, #360]	; (80010c0 <SPI3_Periph_Enable+0x1c4>)
 8000f58:	f7ff fc24 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	2106      	movs	r1, #6
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fd06 	bl	8000974 <GPIO_Init>
	}

	//Configure the SPI clock pin
	switch(clk_pin){
 8000f68:	797b      	ldrb	r3, [r7, #5]
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d015      	beq.n	8000f9a <SPI3_Periph_Enable+0x9e>
 8000f6e:	2b0a      	cmp	r3, #10
 8000f70:	d127      	bne.n	8000fc2 <SPI3_Periph_Enable+0xc6>
	case 10:
		GPIO_Config(&SPI3_Periph, GPIOC, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000f72:	797a      	ldrb	r2, [r7, #5]
 8000f74:	f107 000c 	add.w	r0, r7, #12
 8000f78:	2300      	movs	r3, #0
 8000f7a:	9302      	str	r3, [sp, #8]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	2300      	movs	r3, #0
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2302      	movs	r3, #2
 8000f86:	494f      	ldr	r1, [pc, #316]	; (80010c4 <SPI3_Periph_Enable+0x1c8>)
 8000f88:	f7ff fc0c 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2106      	movs	r1, #6
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fcee 	bl	8000974 <GPIO_Init>
		break;
 8000f98:	e013      	b.n	8000fc2 <SPI3_Periph_Enable+0xc6>
	case 3:
		GPIO_Config(&SPI3_Periph, GPIOB, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000f9a:	797a      	ldrb	r2, [r7, #5]
 8000f9c:	f107 000c 	add.w	r0, r7, #12
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	9302      	str	r3, [sp, #8]
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2302      	movs	r3, #2
 8000fae:	4946      	ldr	r1, [pc, #280]	; (80010c8 <SPI3_Periph_Enable+0x1cc>)
 8000fb0:	f7ff fbf8 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	2106      	movs	r1, #6
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fcda 	bl	8000974 <GPIO_Init>
		break;
 8000fc0:	bf00      	nop
	}

	//Conigure MISO pin
	switch(miso_pin){
 8000fc2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	d016      	beq.n	8000ff8 <SPI3_Periph_Enable+0xfc>
 8000fca:	2b0b      	cmp	r3, #11
 8000fcc:	d129      	bne.n	8001022 <SPI3_Periph_Enable+0x126>
	case 11:
		GPIO_Config(&SPI3_Periph, GPIOC, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000fce:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000fd2:	f107 000c 	add.w	r0, r7, #12
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	9302      	str	r3, [sp, #8]
 8000fda:	2300      	movs	r3, #0
 8000fdc:	9301      	str	r3, [sp, #4]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	4937      	ldr	r1, [pc, #220]	; (80010c4 <SPI3_Periph_Enable+0x1c8>)
 8000fe6:	f7ff fbdd 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	2106      	movs	r1, #6
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fcbf 	bl	8000974 <GPIO_Init>
		break;
 8000ff6:	e014      	b.n	8001022 <SPI3_Periph_Enable+0x126>
	case 4:
		GPIO_Config(&SPI3_Periph, GPIOB, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000ff8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000ffc:	f107 000c 	add.w	r0, r7, #12
 8001000:	2300      	movs	r3, #0
 8001002:	9302      	str	r3, [sp, #8]
 8001004:	2300      	movs	r3, #0
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	2300      	movs	r3, #0
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2302      	movs	r3, #2
 800100e:	492e      	ldr	r1, [pc, #184]	; (80010c8 <SPI3_Periph_Enable+0x1cc>)
 8001010:	f7ff fbc8 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	2106      	movs	r1, #6
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fcaa 	bl	8000974 <GPIO_Init>
		break;
 8001020:	bf00      	nop
	}

	//Configure MOSI pin
	switch(mosi_pin){
 8001022:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001026:	2b0c      	cmp	r3, #12
 8001028:	d006      	beq.n	8001038 <SPI3_Periph_Enable+0x13c>
 800102a:	2b0c      	cmp	r3, #12
 800102c:	dc43      	bgt.n	80010b6 <SPI3_Periph_Enable+0x1ba>
 800102e:	2b05      	cmp	r3, #5
 8001030:	d017      	beq.n	8001062 <SPI3_Periph_Enable+0x166>
 8001032:	2b06      	cmp	r3, #6
 8001034:	d02a      	beq.n	800108c <SPI3_Periph_Enable+0x190>
		break;
	case 6:
		GPIO_Config(&SPI3_Periph, GPIOD, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
		GPIO_Init(&SPI3_Periph, AF5);
	}
}
 8001036:	e03e      	b.n	80010b6 <SPI3_Periph_Enable+0x1ba>
		GPIO_Config(&SPI3_Periph, GPIOC, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001038:	f897 2020 	ldrb.w	r2, [r7, #32]
 800103c:	f107 000c 	add.w	r0, r7, #12
 8001040:	2300      	movs	r3, #0
 8001042:	9302      	str	r3, [sp, #8]
 8001044:	2300      	movs	r3, #0
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	2300      	movs	r3, #0
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2302      	movs	r3, #2
 800104e:	491d      	ldr	r1, [pc, #116]	; (80010c4 <SPI3_Periph_Enable+0x1c8>)
 8001050:	f7ff fba8 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2106      	movs	r1, #6
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fc8a 	bl	8000974 <GPIO_Init>
		break;
 8001060:	e029      	b.n	80010b6 <SPI3_Periph_Enable+0x1ba>
		GPIO_Config(&SPI3_Periph, GPIOB, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001062:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001066:	f107 000c 	add.w	r0, r7, #12
 800106a:	2300      	movs	r3, #0
 800106c:	9302      	str	r3, [sp, #8]
 800106e:	2300      	movs	r3, #0
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	2300      	movs	r3, #0
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2302      	movs	r3, #2
 8001078:	4913      	ldr	r1, [pc, #76]	; (80010c8 <SPI3_Periph_Enable+0x1cc>)
 800107a:	f7ff fb93 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	2106      	movs	r1, #6
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fc75 	bl	8000974 <GPIO_Init>
		break;
 800108a:	e014      	b.n	80010b6 <SPI3_Periph_Enable+0x1ba>
		GPIO_Config(&SPI3_Periph, GPIOD, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 800108c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001090:	f107 000c 	add.w	r0, r7, #12
 8001094:	2300      	movs	r3, #0
 8001096:	9302      	str	r3, [sp, #8]
 8001098:	2300      	movs	r3, #0
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	2300      	movs	r3, #0
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2302      	movs	r3, #2
 80010a2:	490a      	ldr	r1, [pc, #40]	; (80010cc <SPI3_Periph_Enable+0x1d0>)
 80010a4:	f7ff fb7e 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF5);
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	2105      	movs	r1, #5
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fc60 	bl	8000974 <GPIO_Init>
}
 80010b4:	e7ff      	b.n	80010b6 <SPI3_Periph_Enable+0x1ba>
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40020000 	.word	0x40020000
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020400 	.word	0x40020400
 80010cc:	40020c00 	.word	0x40020c00

080010d0 <SPI4_Periph_Enable>:

void SPI4_Periph_Enable(uint8_t ssm_enabled, GPIO_TypeDef *GPIOx, uint8_t cs_pin, uint8_t clk_pin, uint8_t mosi_pin, uint8_t miso_pin)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af04      	add	r7, sp, #16
 80010d6:	6039      	str	r1, [r7, #0]
 80010d8:	4611      	mov	r1, r2
 80010da:	461a      	mov	r2, r3
 80010dc:	4603      	mov	r3, r0
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	460b      	mov	r3, r1
 80010e2:	71bb      	strb	r3, [r7, #6]
 80010e4:	4613      	mov	r3, r2
 80010e6:	717b      	strb	r3, [r7, #5]
	GPIO_Config_t SPI4_Periph;

	//Check if SSM bit is enabled
	if(ssm_enabled)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d013      	beq.n	8001116 <SPI4_Periph_Enable+0x46>
	{
		//Config the specified pin and port for the chip select
		GPIO_Config(&SPI4_Periph, GPIOx, cs_pin, GPIO_Output, GPIO_PushPull, GPIO_LowSpeed, GPIO_PullUp);
 80010ee:	79ba      	ldrb	r2, [r7, #6]
 80010f0:	f107 000c 	add.w	r0, r7, #12
 80010f4:	2301      	movs	r3, #1
 80010f6:	9302      	str	r3, [sp, #8]
 80010f8:	2300      	movs	r3, #0
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	2300      	movs	r3, #0
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2301      	movs	r3, #1
 8001102:	6839      	ldr	r1, [r7, #0]
 8001104:	f7ff fb4e 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI4_Periph, 0x00);
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fc30 	bl	8000974 <GPIO_Init>
 8001114:	e012      	b.n	800113c <SPI4_Periph_Enable+0x6c>
	}
	//If SSOE is enabled
	else
	{
		//Configure the NSS pin for alternate function
		GPIO_Config(&SPI4_Periph, GPIOE, cs_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001116:	79ba      	ldrb	r2, [r7, #6]
 8001118:	f107 000c 	add.w	r0, r7, #12
 800111c:	2300      	movs	r3, #0
 800111e:	9302      	str	r3, [sp, #8]
 8001120:	2300      	movs	r3, #0
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	2300      	movs	r3, #0
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2302      	movs	r3, #2
 800112a:	4924      	ldr	r1, [pc, #144]	; (80011bc <SPI4_Periph_Enable+0xec>)
 800112c:	f7ff fb3a 	bl	80007a4 <GPIO_Config>
		GPIO_Init(&SPI4_Periph, AF5);
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	2105      	movs	r1, #5
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fc1c 	bl	8000974 <GPIO_Init>
	}

	//Configure the SPI clock pin
	GPIO_Config(&SPI4_Periph, GPIOE, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 800113c:	797a      	ldrb	r2, [r7, #5]
 800113e:	f107 000c 	add.w	r0, r7, #12
 8001142:	2300      	movs	r3, #0
 8001144:	9302      	str	r3, [sp, #8]
 8001146:	2300      	movs	r3, #0
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	2300      	movs	r3, #0
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2302      	movs	r3, #2
 8001150:	491a      	ldr	r1, [pc, #104]	; (80011bc <SPI4_Periph_Enable+0xec>)
 8001152:	f7ff fb27 	bl	80007a4 <GPIO_Config>
	GPIO_Init(&SPI4_Periph, AF5);
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	2105      	movs	r1, #5
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fc09 	bl	8000974 <GPIO_Init>

	//Configure MISO Pin
	GPIO_Config(&SPI4_Periph, GPIOE, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001162:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001166:	f107 000c 	add.w	r0, r7, #12
 800116a:	2300      	movs	r3, #0
 800116c:	9302      	str	r3, [sp, #8]
 800116e:	2300      	movs	r3, #0
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	2300      	movs	r3, #0
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2302      	movs	r3, #2
 8001178:	4910      	ldr	r1, [pc, #64]	; (80011bc <SPI4_Periph_Enable+0xec>)
 800117a:	f7ff fb13 	bl	80007a4 <GPIO_Config>
	GPIO_Init(&SPI4_Periph, AF5);
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	2105      	movs	r1, #5
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fbf5 	bl	8000974 <GPIO_Init>

	//Configure MOSI pin
	GPIO_Config(&SPI4_Periph, GPIOE, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 800118a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800118e:	f107 000c 	add.w	r0, r7, #12
 8001192:	2300      	movs	r3, #0
 8001194:	9302      	str	r3, [sp, #8]
 8001196:	2300      	movs	r3, #0
 8001198:	9301      	str	r3, [sp, #4]
 800119a:	2300      	movs	r3, #0
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2302      	movs	r3, #2
 80011a0:	4906      	ldr	r1, [pc, #24]	; (80011bc <SPI4_Periph_Enable+0xec>)
 80011a2:	f7ff faff 	bl	80007a4 <GPIO_Config>
	GPIO_Init(&SPI4_Periph, AF5);
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	2105      	movs	r1, #5
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fbe1 	bl	8000974 <GPIO_Init>

}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40021000 	.word	0x40021000

080011c0 <RCC_AHB1Cmd>:
 * @param	AHB1_Periph: Specific peripheral selected by the user (GPIOx, SPIx, I2Cx etc)
 *
 * @param	State: Specifies whether to enable or disable the peripheral.
 */
void RCC_AHB1Cmd(uint32_t AHB1_Periph, FunctionalState State)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d106      	bne.n	80011e0 <RCC_AHB1Cmd+0x20>
	{
		RCC->AHB1ENR |= AHB1_Periph;
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <RCC_AHB1Cmd+0x3c>)
 80011d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011d6:	4909      	ldr	r1, [pc, #36]	; (80011fc <RCC_AHB1Cmd+0x3c>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4313      	orrs	r3, r2
 80011dc:	630b      	str	r3, [r1, #48]	; 0x30

	else
	{
		RCC->AHB1ENR &= ~AHB1_Periph;
	}
}
 80011de:	e006      	b.n	80011ee <RCC_AHB1Cmd+0x2e>
		RCC->AHB1ENR &= ~AHB1_Periph;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <RCC_AHB1Cmd+0x3c>)
 80011e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	4904      	ldr	r1, [pc, #16]	; (80011fc <RCC_AHB1Cmd+0x3c>)
 80011ea:	4013      	ands	r3, r2
 80011ec:	630b      	str	r3, [r1, #48]	; 0x30
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800

08001200 <RCC_APB1Cmd>:
 * @param	APB1_Periph: Specific peripheral selected by the user (GPIOx, SPIx, I2Cx etc)
 *
 * @param	State: Specifies whether to enable or disable the peripheral.
 */
void RCC_APB1Cmd(uint32_t APB1_Periph, FunctionalState State)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d106      	bne.n	8001220 <RCC_APB1Cmd+0x20>
	{
		RCC->APB1ENR |= APB1_Periph;
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <RCC_APB1Cmd+0x3c>)
 8001214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001216:	4909      	ldr	r1, [pc, #36]	; (800123c <RCC_APB1Cmd+0x3c>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4313      	orrs	r3, r2
 800121c:	640b      	str	r3, [r1, #64]	; 0x40

	else
	{
		RCC->APB1ENR &= ~APB1_Periph;
	}
}
 800121e:	e006      	b.n	800122e <RCC_APB1Cmd+0x2e>
		RCC->APB1ENR &= ~APB1_Periph;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <RCC_APB1Cmd+0x3c>)
 8001222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	43db      	mvns	r3, r3
 8001228:	4904      	ldr	r1, [pc, #16]	; (800123c <RCC_APB1Cmd+0x3c>)
 800122a:	4013      	ands	r3, r2
 800122c:	640b      	str	r3, [r1, #64]	; 0x40
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800

08001240 <RCC_APB2Cmd>:
 * @param	APB2_Periph: Specific peripheral selected by the user (GPIOx, SPIx, I2Cx etc)
 *
 * @param	State: Specifies whether to enable or disable the peripheral.
 */
void RCC_APB2Cmd(uint32_t APB2_Periph, FunctionalState State)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 800124c:	78fb      	ldrb	r3, [r7, #3]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d106      	bne.n	8001260 <RCC_APB2Cmd+0x20>
	{
		RCC->APB2ENR |= APB2_Periph;
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <RCC_APB2Cmd+0x3c>)
 8001254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001256:	4909      	ldr	r1, [pc, #36]	; (800127c <RCC_APB2Cmd+0x3c>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4313      	orrs	r3, r2
 800125c:	644b      	str	r3, [r1, #68]	; 0x44

	else
	{
		RCC->APB2ENR &= ~APB2_Periph;
	}
}
 800125e:	e006      	b.n	800126e <RCC_APB2Cmd+0x2e>
		RCC->APB2ENR &= ~APB2_Periph;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <RCC_APB2Cmd+0x3c>)
 8001262:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	43db      	mvns	r3, r3
 8001268:	4904      	ldr	r1, [pc, #16]	; (800127c <RCC_APB2Cmd+0x3c>)
 800126a:	4013      	ands	r3, r2
 800126c:	644b      	str	r3, [r1, #68]	; 0x44
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800

08001280 <RCC_GetClockFreq>:
 *
 * @param	ClockSource: Points to the ClockSource data structure which contains the varibales to hold
 * 			the frequencies of the SYSCLCK, HCLCK, PCLCK1, PCLCK2.
 */
void RCC_GetClockFreq(RCC_ClockFrequency_t *ClockSource)
{
 8001280:	b480      	push	{r7}
 8001282:	b08b      	sub	sp, #44	; 0x2c
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	uint32_t pll_Value = 0, plln = 0, pllm = 2, pllp = 2, pll_src = 0, pll_fvco = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	2302      	movs	r3, #2
 8001292:	61bb      	str	r3, [r7, #24]
 8001294:	2302      	movs	r3, #2
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]

	uint32_t temp_variable, prescaler;

	/*Determine the clock source for the SYSCLCK*/
	if(((RCC->CFGR & RCC_CFGR_SWS_Mask) >> 2) == 0x0)
 80012a0:	4b43      	ldr	r3, [pc, #268]	; (80013b0 <RCC_GetClockFreq+0x130>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d103      	bne.n	80012b6 <RCC_GetClockFreq+0x36>
	{
		ClockSource->SYSCLCK = HSI_Value;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a40      	ldr	r2, [pc, #256]	; (80013b4 <RCC_GetClockFreq+0x134>)
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	e03f      	b.n	8001336 <RCC_GetClockFreq+0xb6>
	}

	else if(((RCC->CFGR & RCC_CFGR_SWS_Mask) >> 2) == 0x1)
 80012b6:	4b3e      	ldr	r3, [pc, #248]	; (80013b0 <RCC_GetClockFreq+0x130>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d103      	bne.n	80012cc <RCC_GetClockFreq+0x4c>
	{
		ClockSource->SYSCLCK = HSE_Value;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a3c      	ldr	r2, [pc, #240]	; (80013b8 <RCC_GetClockFreq+0x138>)
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	e034      	b.n	8001336 <RCC_GetClockFreq+0xb6>
	}

	else if(((RCC->CFGR & RCC_CFGR_SWS_Mask) >> 2) == 0x2)
 80012cc:	4b38      	ldr	r3, [pc, #224]	; (80013b0 <RCC_GetClockFreq+0x130>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d12d      	bne.n	8001336 <RCC_GetClockFreq+0xb6>
	{
		/*Determine the input source of the PLL*/
		if(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC_Mask)
 80012da:	4b35      	ldr	r3, [pc, #212]	; (80013b0 <RCC_GetClockFreq+0x130>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d002      	beq.n	80012ec <RCC_GetClockFreq+0x6c>
		{
			pll_src = HSE_Value;
 80012e6:	4b34      	ldr	r3, [pc, #208]	; (80013b8 <RCC_GetClockFreq+0x138>)
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
 80012ea:	e001      	b.n	80012f0 <RCC_GetClockFreq+0x70>
		}

		else
		{
			pll_src = HSI_Value;
 80012ec:	4b31      	ldr	r3, [pc, #196]	; (80013b4 <RCC_GetClockFreq+0x134>)
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
		}

		plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Mask) >> 6);
 80012f0:	4b2f      	ldr	r3, [pc, #188]	; (80013b0 <RCC_GetClockFreq+0x130>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	099b      	lsrs	r3, r3, #6
 80012f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012fa:	61fb      	str	r3, [r7, #28]
		pllm = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Mask);
 80012fc:	4b2c      	ldr	r3, [pc, #176]	; (80013b0 <RCC_GetClockFreq+0x130>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001304:	61bb      	str	r3, [r7, #24]
		pll_fvco = (pll_src/pllm) * plln;
 8001306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	fbb2 f2f3 	udiv	r2, r2, r3
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fb02 f303 	mul.w	r3, r2, r3
 8001314:	613b      	str	r3, [r7, #16]
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP_Mask) >> 16) * 2) + 2);
 8001316:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <RCC_GetClockFreq+0x130>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	0c1b      	lsrs	r3, r3, #16
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	3301      	adds	r3, #1
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	617b      	str	r3, [r7, #20]
		pll_Value = pll_fvco/pllp;
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	623b      	str	r3, [r7, #32]

		ClockSource->SYSCLCK = pll_Value;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a3a      	ldr	r2, [r7, #32]
 8001334:	601a      	str	r2, [r3, #0]
	}

	/*Determine the frequency of the HCLCK*/
	temp_variable = ((RCC->CFGR & RCC_CFGR_HPRE_Mask) >> 4);
 8001336:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <RCC_GetClockFreq+0x130>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	091b      	lsrs	r3, r3, #4
 800133c:	f003 030f 	and.w	r3, r3, #15
 8001340:	60fb      	str	r3, [r7, #12]
	prescaler = prescalerTable[temp_variable];
 8001342:	4a1e      	ldr	r2, [pc, #120]	; (80013bc <RCC_GetClockFreq+0x13c>)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800134a:	b29b      	uxth	r3, r3
 800134c:	60bb      	str	r3, [r7, #8]
	ClockSource->HCLCK = (ClockSource->SYSCLCK) >> prescaler;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	40da      	lsrs	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	605a      	str	r2, [r3, #4]

	/*Determine the frequency of the PCLCK1*/
	temp_variable = ((RCC->CFGR & RCC_CFGR_PPRE1_Mask) >> 10);
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <RCC_GetClockFreq+0x130>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	0a9b      	lsrs	r3, r3, #10
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	60fb      	str	r3, [r7, #12]
	prescaler = prescalerTable[temp_variable];
 8001366:	4a15      	ldr	r2, [pc, #84]	; (80013bc <RCC_GetClockFreq+0x13c>)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800136e:	b29b      	uxth	r3, r3
 8001370:	60bb      	str	r3, [r7, #8]
	ClockSource->PCLCK1 = (ClockSource->HCLCK) >> prescaler;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	40da      	lsrs	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	609a      	str	r2, [r3, #8]

	/*Determine frequency of PCLCK2*/
	temp_variable = ((RCC->CFGR & RCC_CFGR_PPRE2_Mask) >> 13);
 800137e:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <RCC_GetClockFreq+0x130>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	0b5b      	lsrs	r3, r3, #13
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	60fb      	str	r3, [r7, #12]
	prescaler = prescalerTable[temp_variable];
 800138a:	4a0c      	ldr	r2, [pc, #48]	; (80013bc <RCC_GetClockFreq+0x13c>)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001392:	b29b      	uxth	r3, r3
 8001394:	60bb      	str	r3, [r7, #8]
	ClockSource->PCLCK2 = (ClockSource->HCLCK) >> prescaler;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	40da      	lsrs	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	60da      	str	r2, [r3, #12]

}
 80013a2:	bf00      	nop
 80013a4:	372c      	adds	r7, #44	; 0x2c
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	00f42400 	.word	0x00f42400
 80013b8:	007a1200 	.word	0x007a1200
 80013bc:	20000000 	.word	0x20000000

080013c0 <Check_Flag>:
 * brief	A helper function that keeps track of specific flags in the status register.
 *
 * @retval	Returns status of the flag which is defined in an enumeration.
 */
static Flag_Status Check_Flag(SPI_Handle_t *SPI_Handle, uint32_t flag)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
	if(SPI_Handle->SPIx->SR & flag)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <Check_Flag+0x1c>
	{
		return Flag_Set;
 80013d8:	2301      	movs	r3, #1
 80013da:	e000      	b.n	80013de <Check_Flag+0x1e>
	}

	else
	{
		return Flag_Unset;
 80013dc:	2300      	movs	r3, #0
	}

}
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <Disable_SPI>:

/*
 * @brief	Helper function used to check flags and disable the SPI peripheral when using slave select output enabled (SSOE)
 */
static void Disable_SPI(SPI_Handle_t *SPI_Handle)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
	while(!Check_Flag(SPI_Handle, SR_TXE_Flag));
 80013f2:	bf00      	nop
 80013f4:	2102      	movs	r1, #2
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ffe2 	bl	80013c0 <Check_Flag>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0f8      	beq.n	80013f4 <Disable_SPI+0xa>
	while(Check_Flag(SPI_Handle, SR_BSY_Flag));
 8001402:	bf00      	nop
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffda 	bl	80013c0 <Check_Flag>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f8      	bne.n	8001404 <Disable_SPI+0x1a>
	//Disable SPI
	SPI_Handle->SPIx->CR1 &= ~CR1_SPE_Enable;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001420:	601a      	str	r2, [r3, #0]
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <SPI_Init>:
/*
 * @Brief	SPI initialization function that sets all the configurations such as clock phase, polarity, data frame,
 * 			data format and more.
 */
void SPI_Init(SPI_Handle_t *SPI_Handle)
{
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b087      	sub	sp, #28
 8001430:	af02      	add	r7, sp, #8
 8001432:	6078      	str	r0, [r7, #4]
	uint8_t cs_pin, clk_pin, mosi_pin, miso_pin;
	cs_pin = SPI_Handle->SPI_Config.pin_cs;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	791b      	ldrb	r3, [r3, #4]
 8001438:	73fb      	strb	r3, [r7, #15]
	clk_pin = SPI_Handle->SPI_Config.pin_clk;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	795b      	ldrb	r3, [r3, #5]
 800143e:	73bb      	strb	r3, [r7, #14]
	mosi_pin = SPI_Handle->SPI_Config.pin_mosi;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	799b      	ldrb	r3, [r3, #6]
 8001444:	737b      	strb	r3, [r7, #13]
	miso_pin = SPI_Handle->SPI_Config.pin_miso;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	79db      	ldrb	r3, [r3, #7]
 800144a:	733b      	strb	r3, [r7, #12]
	/*
	 * Set the specified pins based on which SPI peripheral is chosen and whether or not the SSM bit is enabled or
	 * disabled. These functions are called from the "stm32f401_gpio.h" file, and are defined in the stm32f401_gpio.c file.
	 * This also enables clock access to the specified SPI peripheral using functions from the stm32f401_rcc file.
	 */
	if(SPI_Handle->SPIx == SPI1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a5f      	ldr	r2, [pc, #380]	; (80015d0 <SPI_Init+0x1a4>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d112      	bne.n	800147c <SPI_Init+0x50>
	{
		SPI1_Periph_Enable((SPI_Handle->ssm), (SPI_Handle->SPI_Config.cs_gpio), cs_pin, clk_pin, mosi_pin, miso_pin);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7c58      	ldrb	r0, [r3, #17]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6899      	ldr	r1, [r3, #8]
 800145e:	7bbc      	ldrb	r4, [r7, #14]
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	7b3b      	ldrb	r3, [r7, #12]
 8001464:	9301      	str	r3, [sp, #4]
 8001466:	7b7b      	ldrb	r3, [r7, #13]
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	4623      	mov	r3, r4
 800146c:	f7ff fbac 	bl	8000bc8 <SPI1_Periph_Enable>
		RCC_APB2Cmd(SPI1_Enable, ENABLE);
 8001470:	2101      	movs	r1, #1
 8001472:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001476:	f7ff fee3 	bl	8001240 <RCC_APB2Cmd>
 800147a:	e041      	b.n	8001500 <SPI_Init+0xd4>
	}
	else if(SPI_Handle->SPIx == SPI2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a54      	ldr	r2, [pc, #336]	; (80015d4 <SPI_Init+0x1a8>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d112      	bne.n	80014ac <SPI_Init+0x80>
	{
		SPI2_Periph_Enable((SPI_Handle->ssm), (SPI_Handle->SPI_Config.cs_gpio), cs_pin, clk_pin, mosi_pin, miso_pin);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7c58      	ldrb	r0, [r3, #17]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6899      	ldr	r1, [r3, #8]
 800148e:	7bbc      	ldrb	r4, [r7, #14]
 8001490:	7bfa      	ldrb	r2, [r7, #15]
 8001492:	7b3b      	ldrb	r3, [r7, #12]
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	7b7b      	ldrb	r3, [r7, #13]
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	4623      	mov	r3, r4
 800149c:	f7ff fc60 	bl	8000d60 <SPI2_Periph_Enable>
		RCC_APB1Cmd(SPI2_Enable, ENABLE);
 80014a0:	2101      	movs	r1, #1
 80014a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014a6:	f7ff feab 	bl	8001200 <RCC_APB1Cmd>
 80014aa:	e029      	b.n	8001500 <SPI_Init+0xd4>
	}
	else if(SPI_Handle->SPIx == SPI3)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a49      	ldr	r2, [pc, #292]	; (80015d8 <SPI_Init+0x1ac>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d112      	bne.n	80014dc <SPI_Init+0xb0>
	{
		SPI3_Periph_Enable((SPI_Handle->ssm), (SPI_Handle->SPI_Config.cs_gpio), cs_pin, clk_pin, mosi_pin, miso_pin);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	7c58      	ldrb	r0, [r3, #17]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6899      	ldr	r1, [r3, #8]
 80014be:	7bbc      	ldrb	r4, [r7, #14]
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	7b3b      	ldrb	r3, [r7, #12]
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	7b7b      	ldrb	r3, [r7, #13]
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	4623      	mov	r3, r4
 80014cc:	f7ff fd16 	bl	8000efc <SPI3_Periph_Enable>
		RCC_APB1Cmd(SPI3_Enable, ENABLE);
 80014d0:	2101      	movs	r1, #1
 80014d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80014d6:	f7ff fe93 	bl	8001200 <RCC_APB1Cmd>
 80014da:	e011      	b.n	8001500 <SPI_Init+0xd4>
	}
	else
	{
		SPI4_Periph_Enable((SPI_Handle->ssm), (SPI_Handle->SPI_Config.cs_gpio), cs_pin, clk_pin, mosi_pin, miso_pin);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7c58      	ldrb	r0, [r3, #17]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6899      	ldr	r1, [r3, #8]
 80014e4:	7bbc      	ldrb	r4, [r7, #14]
 80014e6:	7bfa      	ldrb	r2, [r7, #15]
 80014e8:	7b3b      	ldrb	r3, [r7, #12]
 80014ea:	9301      	str	r3, [sp, #4]
 80014ec:	7b7b      	ldrb	r3, [r7, #13]
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	4623      	mov	r3, r4
 80014f2:	f7ff fded 	bl	80010d0 <SPI4_Periph_Enable>
		RCC_APB2Cmd(SPI4_Enable, ENABLE);
 80014f6:	2101      	movs	r1, #1
 80014f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014fc:	f7ff fea0 	bl	8001240 <RCC_APB2Cmd>
	}

	//Set BaudRate control
	SPI_Handle->SPIx->CR1 |= ((SPI_Handle->SPI_Config.baudrate_ctrl) << CR1_BR_Pos);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7b1b      	ldrb	r3, [r3, #12]
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4619      	mov	r1, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	601a      	str	r2, [r3, #0]

	//Set CPOL and CHPA
	SPI_Handle->SPIx->CR1 |= (SPI_Handle->SPI_Config.cpha);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7b9b      	ldrb	r3, [r3, #14]
 8001520:	4619      	mov	r1, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	601a      	str	r2, [r3, #0]
	SPI_Handle->SPIx->CR1 |= (SPI_Handle->SPI_Config.cpol);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	7b5b      	ldrb	r3, [r3, #13]
 8001534:	4619      	mov	r1, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	430a      	orrs	r2, r1
 800153c:	601a      	str	r2, [r3, #0]

	//Set Data format to either LSB or MSB first
	SPI_Handle->SPIx->CR1 |= (SPI_Handle->SPI_Config.data_format);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7bdb      	ldrb	r3, [r3, #15]
 8001548:	4619      	mov	r1, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	601a      	str	r2, [r3, #0]

	//Set mode to master
	SPI_Handle->SPIx->CR1 |= CR1_MSTR_Enable;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f042 0204 	orr.w	r2, r2, #4
 8001560:	601a      	str	r2, [r3, #0]

	//Set 8 bit
	SPI_Handle->SPIx->CR1 |= ((SPI_Handle->data_frame) << CR1_DFF_Pos);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7c1b      	ldrb	r3, [r3, #16]
 800156c:	02db      	lsls	r3, r3, #11
 800156e:	4619      	mov	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
	 * If SSM is not enabled, then SSOE (slave select output enabled) is used which uses the NSS pin as the CS and
	 * it automatically handled by the MCU. When this mode is selected, as soon as the SPI is enabled in master mode, the
	 * CS will go low and will only go high when SPI is disabled. This is why if SSM is enabled, the SPI is enabled also but
	 * if SSOE is enabled it is not enabled in the Init function.
	 */
	if(SPI_Handle->ssm)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	7c5b      	ldrb	r3, [r3, #17]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d01b      	beq.n	80015b8 <SPI_Init+0x18c>
	{
		//Set SSM and SSI high
		SPI_Handle->SPIx->CR1 |= ((SPI_Handle->ssm) << CR1_SSM_Pos);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	7c5b      	ldrb	r3, [r3, #17]
 800158a:	025b      	lsls	r3, r3, #9
 800158c:	4619      	mov	r1, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	601a      	str	r2, [r3, #0]
		SPI_Handle->SPIx->CR1 |= CR1_SSI_Enable;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015a4:	601a      	str	r2, [r3, #0]
		//Enable SPI periph
		SPI_Handle->SPIx->CR1 |= CR1_SPE_Enable;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015b4:	601a      	str	r2, [r3, #0]
	{
		//Set SSOE high
		SPI_Handle->SPIx->CR2 |= CR2_SSOE_Enable;
	}

}
 80015b6:	e007      	b.n	80015c8 <SPI_Init+0x19c>
		SPI_Handle->SPIx->CR2 |= CR2_SSOE_Enable;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0204 	orr.w	r2, r2, #4
 80015c6:	605a      	str	r2, [r3, #4]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd90      	pop	{r4, r7, pc}
 80015d0:	40013000 	.word	0x40013000
 80015d4:	40003800 	.word	0x40003800
 80015d8:	40003c00 	.word	0x40003c00

080015dc <SPI_Transmit>:

/*
 * @Brief	Funtion to transmit data in full duplex mode using blocking.
 */
void SPI_Transmit(SPI_Handle_t *SPI_Handle, uint8_t *pTxBuffer, uint32_t num_of_bytes, uint8_t restart_condition)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	70fb      	strb	r3, [r7, #3]
	uint32_t temp;

	//Enable SPI periph
	SPI_Handle->SPIx->CR1 |= CR1_SPE_Enable;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015f8:	601a      	str	r2, [r3, #0]

	if(SPI_Handle->data_frame == Data_16_Bits)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	7c1b      	ldrb	r3, [r3, #16]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d128      	bne.n	8001654 <SPI_Transmit+0x78>
	{
		while(num_of_bytes > 0)
 8001602:	e011      	b.n	8001628 <SPI_Transmit+0x4c>
		{
			//Ensure TXE flag is set and transmit data
			while(!Check_Flag(SPI_Handle, SR_TXE_Flag));
 8001604:	bf00      	nop
 8001606:	2102      	movs	r1, #2
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f7ff fed9 	bl	80013c0 <Check_Flag>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f8      	beq.n	8001606 <SPI_Transmit+0x2a>
			SPI_Handle->SPIx->DR = *((uint16_t *)pTxBuffer++);
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	60ba      	str	r2, [r7, #8]
 800161a:	881a      	ldrh	r2, [r3, #0]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	60da      	str	r2, [r3, #12]
			num_of_bytes--;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3b01      	subs	r3, #1
 8001626:	607b      	str	r3, [r7, #4]
		while(num_of_bytes > 0)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ea      	bne.n	8001604 <SPI_Transmit+0x28>
 800162e:	e014      	b.n	800165a <SPI_Transmit+0x7e>
	else
	{
		while(num_of_bytes > 0)
		{
			//Ensure TXE flag is set and transmit data
			while(!Check_Flag(SPI_Handle, SR_TXE_Flag));
 8001630:	bf00      	nop
 8001632:	2102      	movs	r1, #2
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f7ff fec3 	bl	80013c0 <Check_Flag>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f8      	beq.n	8001632 <SPI_Transmit+0x56>
			SPI_Handle->SPIx->DR = *pTxBuffer++;
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	60ba      	str	r2, [r7, #8]
 8001646:	781a      	ldrb	r2, [r3, #0]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60da      	str	r2, [r3, #12]
			num_of_bytes--;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3b01      	subs	r3, #1
 8001652:	607b      	str	r3, [r7, #4]
		while(num_of_bytes > 0)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1ea      	bne.n	8001630 <SPI_Transmit+0x54>
		}
	}


	while(!(SPI_Handle->SPIx->SR & (SR_TXE_Flag)));
 800165a:	bf00      	nop
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f8      	beq.n	800165c <SPI_Transmit+0x80>
	while(!(SPI_Handle->SPIx->SR & (SR_BSY_Flag)));
 800166a:	bf00      	nop
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f8      	beq.n	800166c <SPI_Transmit+0x90>

	//clear overrun
	temp = SPI_Handle->SPIx->DR;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	617b      	str	r3, [r7, #20]
	temp = SPI_Handle->SPIx->SR;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	617b      	str	r3, [r7, #20]

	if(restart_condition)
 800168a:	78fb      	ldrb	r3, [r7, #3]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d002      	beq.n	8001696 <SPI_Transmit+0xba>
	{
		Disable_SPI(SPI_Handle);
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f7ff feaa 	bl	80013ea <Disable_SPI>
	}

}
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <SPI_Receive>:

/*
 * @Brief	Function to receive data in full-duplex mode using blocking.
 */
void SPI_Receive(SPI_Handle_t *SPI_Handle, uint8_t *pRxBuffer, uint32_t num_of_bytes)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
	uint8_t dummy_byte = 0x00;
 80016aa:	2300      	movs	r3, #0
 80016ac:	75fb      	strb	r3, [r7, #23]
	uint8_t ssm_enabled = SPI_Handle->ssm;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	7c5b      	ldrb	r3, [r3, #17]
 80016b2:	75bb      	strb	r3, [r7, #22]

	//Enable SPI periph - Mainly used if SSM is disabled
	SPI_Handle->SPIx->CR1 |= CR1_SPE_Enable;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016c2:	601a      	str	r2, [r3, #0]

	if(SPI_Handle->data_frame == Data_16_Bits)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	7c1b      	ldrb	r3, [r3, #16]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d142      	bne.n	8001752 <SPI_Receive+0xb4>
	{
		while(num_of_bytes)
 80016cc:	e01e      	b.n	800170c <SPI_Receive+0x6e>
		{
			//Ensure TXE flag is raised and send dummy_byte
			while(!Check_Flag(SPI_Handle, SR_TXE_Flag)){}
 80016ce:	bf00      	nop
 80016d0:	2102      	movs	r1, #2
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f7ff fe74 	bl	80013c0 <Check_Flag>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f8      	beq.n	80016d0 <SPI_Receive+0x32>
			SPI_Handle->SPIx->DR = (uint16_t)dummy_byte;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	7dfa      	ldrb	r2, [r7, #23]
 80016e4:	60da      	str	r2, [r3, #12]
			//Ensure RXNE flag is raised and read value from data register
			 while(!Check_Flag(SPI_Handle, SR_RXNE_Flag)){}
 80016e6:	bf00      	nop
 80016e8:	2101      	movs	r1, #1
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f7ff fe68 	bl	80013c0 <Check_Flag>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f8      	beq.n	80016e8 <SPI_Receive+0x4a>
			 *((uint16_t *)pRxBuffer++) = SPI_Handle->SPIx->DR;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68d9      	ldr	r1, [r3, #12]
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	60ba      	str	r2, [r7, #8]
 8001702:	b28a      	uxth	r2, r1
 8001704:	801a      	strh	r2, [r3, #0]
			 num_of_bytes--;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3b01      	subs	r3, #1
 800170a:	607b      	str	r3, [r7, #4]
		while(num_of_bytes)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1dd      	bne.n	80016ce <SPI_Receive+0x30>
 8001712:	e021      	b.n	8001758 <SPI_Receive+0xba>
	else
	{
		while(num_of_bytes)
		{
			//Ensure TXE flag is raised and send dummy_byte
			while(!Check_Flag(SPI_Handle, SR_TXE_Flag)){}
 8001714:	bf00      	nop
 8001716:	2102      	movs	r1, #2
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f7ff fe51 	bl	80013c0 <Check_Flag>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f8      	beq.n	8001716 <SPI_Receive+0x78>
			SPI_Handle->SPIx->DR = dummy_byte;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	7dfa      	ldrb	r2, [r7, #23]
 800172a:	60da      	str	r2, [r3, #12]
			//Ensure RXNE flag is raised and read value from data register
			 while(!Check_Flag(SPI_Handle, SR_RXNE_Flag)){}
 800172c:	bf00      	nop
 800172e:	2101      	movs	r1, #1
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f7ff fe45 	bl	80013c0 <Check_Flag>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f8      	beq.n	800172e <SPI_Receive+0x90>
			 *pRxBuffer++ = SPI_Handle->SPIx->DR;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68d9      	ldr	r1, [r3, #12]
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	1c5a      	adds	r2, r3, #1
 8001746:	60ba      	str	r2, [r7, #8]
 8001748:	b2ca      	uxtb	r2, r1
 800174a:	701a      	strb	r2, [r3, #0]
			 num_of_bytes--;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3b01      	subs	r3, #1
 8001750:	607b      	str	r3, [r7, #4]
		while(num_of_bytes)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1dd      	bne.n	8001714 <SPI_Receive+0x76>
		}
	}


	//If SSM is disabled then disable the SPI periph
	if(!ssm_enabled)
 8001758:	7dbb      	ldrb	r3, [r7, #22]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d102      	bne.n	8001764 <SPI_Receive+0xc6>
	{
		Disable_SPI(SPI_Handle);
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f7ff fe43 	bl	80013ea <Disable_SPI>
	}

}
 8001764:	bf00      	nop
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <Disable_SPI_Transmission>:
		NVIC_EnableIRQ(SPI4_IRQn);
	}
}

static void Disable_SPI_Transmission(SPI_Handle_t *SPI_Handle)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	uint32_t clear_overrun;

	while(!Check_Flag(SPI_Handle, SR_TXE_Flag));
 8001774:	bf00      	nop
 8001776:	2102      	movs	r1, #2
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fe21 	bl	80013c0 <Check_Flag>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f8      	beq.n	8001776 <Disable_SPI_Transmission+0xa>

	//Disable TXEIE bit in CR2
	SPI_Handle->SPIx->CR2 &= ~CR2_TXEIE_Enable;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001792:	605a      	str	r2, [r3, #4]

	while(Check_Flag(SPI_Handle, SR_BSY_Flag));
 8001794:	bf00      	nop
 8001796:	2180      	movs	r1, #128	; 0x80
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff fe11 	bl	80013c0 <Check_Flag>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f8      	bne.n	8001796 <Disable_SPI_Transmission+0x2a>

	//Clear overrun flag
	clear_overrun = SPI_Handle->SPIx->DR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	60fb      	str	r3, [r7, #12]
	clear_overrun = SPI_Handle->SPIx->SR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	60fb      	str	r3, [r7, #12]

	SPI_Handle->bus_state = SPI_Ready;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	765a      	strb	r2, [r3, #25]

}
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <TXE_Interrupt_Handler>:

/*
 * @brief	support function to transmit data when an interrupt is generated by the TXE flag
 */
static void TXE_Interrupt_Handler(SPI_Handle_t *SPI_Handle)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b084      	sub	sp, #16
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
	uint8_t cs_pin = SPI_Handle->SPI_Config.pin_cs;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	791b      	ldrb	r3, [r3, #4]
 80017ce:	73fb      	strb	r3, [r7, #15]

	//TODO: add 16 bit and 8 bit dependencies
	if(SPI_Handle->tx_length)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	7e1b      	ldrb	r3, [r3, #24]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00e      	beq.n	80017f6 <TXE_Interrupt_Handler+0x34>
	{
		SPI_Handle->SPIx->DR = *(SPI_Handle->pTxBuffer++);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	1c59      	adds	r1, r3, #1
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6151      	str	r1, [r2, #20]
 80017e2:	781a      	ldrb	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60da      	str	r2, [r3, #12]
		SPI_Handle->tx_length--;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	7e1b      	ldrb	r3, [r3, #24]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	761a      	strb	r2, [r3, #24]
	}

	if(SPI_Handle->tx_length == 0 && (!SPI_Handle->ssm))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	7e1b      	ldrb	r3, [r3, #24]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d106      	bne.n	800180c <TXE_Interrupt_Handler+0x4a>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	7c5b      	ldrb	r3, [r3, #17]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d102      	bne.n	800180c <TXE_Interrupt_Handler+0x4a>
	{
		Disable_SPI_Transmission(SPI_Handle);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff ffb0 	bl	800176c <Disable_SPI_Transmission>
	}
}
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <SPI_IRQ_Handler>:
		}
	}
}

void SPI_IRQ_Handler(SPI_Handle_t *SPI_Handle)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	uint32_t temp1, temp2;

	temp1 = ((SPI_Handle->SPIx->CR2 & CR2_TXEIE_Enable) >> 7);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	09db      	lsrs	r3, r3, #7
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	60fb      	str	r3, [r7, #12]
	temp2 = ((SPI_Handle->SPIx->SR & SR_TXE_Flag) >> 1);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	085b      	lsrs	r3, r3, #1
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
	if(temp1 && temp2)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d005      	beq.n	800184a <SPI_IRQ_Handler+0x36>
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d002      	beq.n	800184a <SPI_IRQ_Handler+0x36>
	{
		TXE_Interrupt_Handler(SPI_Handle);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ffbc 	bl	80017c2 <TXE_Interrupt_Handler>
	}
}
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <UART_Config>:
 *
 * @param	baudrate: Allows the user to input their desired baud-rate for the UART peripheral.
 *
 */
void UART_Config(UART_Config_t *UART_Config, USART_TypeDef *UARTx, uint16_t mode, uint32_t baudrate)
{
 8001852:	b480      	push	{r7}
 8001854:	b085      	sub	sp, #20
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	603b      	str	r3, [r7, #0]
 800185e:	4613      	mov	r3, r2
 8001860:	80fb      	strh	r3, [r7, #6]
	UART_Config->UARTx = UARTx;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	611a      	str	r2, [r3, #16]
	UART_Config->Mode = mode;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	88fa      	ldrh	r2, [r7, #6]
 800186c:	819a      	strh	r2, [r3, #12]
	UART_Config->BaudRate = baudrate;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	609a      	str	r2, [r3, #8]
	UART_Config->World_Length = UART_WORDLEN_8BITS;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2200      	movs	r2, #0
 8001878:	805a      	strh	r2, [r3, #2]
	UART_Config->Parity = UART_PARITY_DISABLED;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	80da      	strh	r2, [r3, #6]
	UART_Config->oversampling = UART_OVERSAMPLING_16;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	809a      	strh	r2, [r3, #4]
	UART_Config->Stop_Bits = UART_STOPBITS_1;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	801a      	strh	r2, [r3, #0]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <Select_UART_Periph>:
 *
 * @param	alt_function: Defines the alternate function value to input into the Alternate function register.
 *
 */
void Select_UART_Periph(GPIO_TypeDef *GPIOx, uint8_t pin, AFR_Config_t alt_function)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08c      	sub	sp, #48	; 0x30
 800189c:	af04      	add	r7, sp, #16
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	70fb      	strb	r3, [r7, #3]
 80018a4:	4613      	mov	r3, r2
 80018a6:	70bb      	strb	r3, [r7, #2]
	GPIO_Config_t GPIOx_UARTx_Tx, GPIOx_UARTx_Rx;

	GPIO_Config(&GPIOx_UARTx_Tx, GPIOx, pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 80018a8:	78fa      	ldrb	r2, [r7, #3]
 80018aa:	f107 0014 	add.w	r0, r7, #20
 80018ae:	2300      	movs	r3, #0
 80018b0:	9302      	str	r3, [sp, #8]
 80018b2:	2300      	movs	r3, #0
 80018b4:	9301      	str	r3, [sp, #4]
 80018b6:	2300      	movs	r3, #0
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2302      	movs	r3, #2
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	f7fe ff71 	bl	80007a4 <GPIO_Config>
	GPIO_Init(&GPIOx_UARTx_Tx, alt_function);
 80018c2:	78ba      	ldrb	r2, [r7, #2]
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4611      	mov	r1, r2
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff f852 	bl	8000974 <GPIO_Init>

	GPIO_Config(&GPIOx_UARTx_Rx, GPIOx, (pin + 1), GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 80018d0:	78fb      	ldrb	r3, [r7, #3]
 80018d2:	3301      	adds	r3, #1
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	f107 0008 	add.w	r0, r7, #8
 80018da:	2300      	movs	r3, #0
 80018dc:	9302      	str	r3, [sp, #8]
 80018de:	2300      	movs	r3, #0
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	2300      	movs	r3, #0
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	2302      	movs	r3, #2
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	f7fe ff5b 	bl	80007a4 <GPIO_Config>
	GPIO_Init(&GPIOx_UARTx_Rx, alt_function);
 80018ee:	78ba      	ldrb	r2, [r7, #2]
 80018f0:	f107 0308 	add.w	r3, r7, #8
 80018f4:	4611      	mov	r1, r2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff f83c 	bl	8000974 <GPIO_Init>
}
 80018fc:	bf00      	nop
 80018fe:	3720      	adds	r7, #32
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <Enable_UART_Periph>:
 * 			based on the peripheral selected by the user.
 *
 * @param	UARTx: Defines which UART peripheral the user chooses, this can be: USART1, USART2 or USART6.
 */
void Enable_UART_Periph(USART_TypeDef *UARTx)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	if(UARTx == USART2)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a1c      	ldr	r2, [pc, #112]	; (8001980 <Enable_UART_Periph+0x7c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d10f      	bne.n	8001934 <Enable_UART_Periph+0x30>
	{

		Select_UART_Periph(GPIOA, Pin2, AF7);
 8001914:	2207      	movs	r2, #7
 8001916:	2102      	movs	r1, #2
 8001918:	481a      	ldr	r0, [pc, #104]	; (8001984 <Enable_UART_Periph+0x80>)
 800191a:	f7ff ffbd 	bl	8001898 <Select_UART_Periph>
		Select_UART_Periph(GPIOD, Pin5, AF7);
 800191e:	2207      	movs	r2, #7
 8001920:	2105      	movs	r1, #5
 8001922:	4819      	ldr	r0, [pc, #100]	; (8001988 <Enable_UART_Periph+0x84>)
 8001924:	f7ff ffb8 	bl	8001898 <Select_UART_Periph>

		RCC_APB1Cmd(USART2_Enable, ENABLE);
 8001928:	2101      	movs	r1, #1
 800192a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800192e:	f7ff fc67 	bl	8001200 <RCC_APB1Cmd>
		Select_UART_Periph(GPIOC, Pin6, AF7);

		RCC_APB2Cmd(USART6_Enable, ENABLE);

	}
}
 8001932:	e020      	b.n	8001976 <Enable_UART_Periph+0x72>
	else if(UARTx == USART1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a15      	ldr	r2, [pc, #84]	; (800198c <Enable_UART_Periph+0x88>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d10e      	bne.n	800195a <Enable_UART_Periph+0x56>
		Select_UART_Periph(GPIOA, Pin9, AF7);
 800193c:	2207      	movs	r2, #7
 800193e:	2109      	movs	r1, #9
 8001940:	4810      	ldr	r0, [pc, #64]	; (8001984 <Enable_UART_Periph+0x80>)
 8001942:	f7ff ffa9 	bl	8001898 <Select_UART_Periph>
		Select_UART_Periph(GPIOB, Pin6, AF7);
 8001946:	2207      	movs	r2, #7
 8001948:	2106      	movs	r1, #6
 800194a:	4811      	ldr	r0, [pc, #68]	; (8001990 <Enable_UART_Periph+0x8c>)
 800194c:	f7ff ffa4 	bl	8001898 <Select_UART_Periph>
		RCC_APB2Cmd(USART1_Enable, ENABLE);
 8001950:	2101      	movs	r1, #1
 8001952:	2010      	movs	r0, #16
 8001954:	f7ff fc74 	bl	8001240 <RCC_APB2Cmd>
}
 8001958:	e00d      	b.n	8001976 <Enable_UART_Periph+0x72>
		Select_UART_Periph(GPIOA, Pin11, AF8);
 800195a:	2208      	movs	r2, #8
 800195c:	210b      	movs	r1, #11
 800195e:	4809      	ldr	r0, [pc, #36]	; (8001984 <Enable_UART_Periph+0x80>)
 8001960:	f7ff ff9a 	bl	8001898 <Select_UART_Periph>
		Select_UART_Periph(GPIOC, Pin6, AF7);
 8001964:	2207      	movs	r2, #7
 8001966:	2106      	movs	r1, #6
 8001968:	480a      	ldr	r0, [pc, #40]	; (8001994 <Enable_UART_Periph+0x90>)
 800196a:	f7ff ff95 	bl	8001898 <Select_UART_Periph>
		RCC_APB2Cmd(USART6_Enable, ENABLE);
 800196e:	2101      	movs	r1, #1
 8001970:	2020      	movs	r0, #32
 8001972:	f7ff fc65 	bl	8001240 <RCC_APB2Cmd>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40004400 	.word	0x40004400
 8001984:	40020000 	.word	0x40020000
 8001988:	40020c00 	.word	0x40020c00
 800198c:	40011000 	.word	0x40011000
 8001990:	40020400 	.word	0x40020400
 8001994:	40020800 	.word	0x40020800

08001998 <Set_BaudRate>:
 *@param	ClockSource: Defines the specific clock source for the MCU which includes SYSCLK,
 *			HCLK, PCLK1, PCLK2.
 *
 */
void Set_BaudRate(RCC_ClockFrequency_t *ClockSource, UART_Config_t *UART_Config)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
	RCC_GetClockFreq(ClockSource);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff fc6c 	bl	8001280 <RCC_GetClockFreq>

	uint32_t periph_clk, over8, usartdiv, baudrate;
	uint32_t mantissa_value, fraction_value, tempvariable = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]

	over8 = (UART_Config->UARTx->CR1) & (UART_CR1_OVER8_Mask);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019b6:	61fb      	str	r3, [r7, #28]
	baudrate = UART_Config->BaudRate;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	61bb      	str	r3, [r7, #24]

	if(UART_Config->UARTx == USART2)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	4a32      	ldr	r2, [pc, #200]	; (8001a8c <Set_BaudRate+0xf4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d103      	bne.n	80019d0 <Set_BaudRate+0x38>
	{
		periph_clk = ClockSource->PCLCK1;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
 80019ce:	e002      	b.n	80019d6 <Set_BaudRate+0x3e>
	}

	else
	{
		periph_clk = ClockSource->PCLCK2;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/*Over-sampling by 16*/
	if(over8 == 0)
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d125      	bne.n	8001a28 <Set_BaudRate+0x90>
	{
		usartdiv = (periph_clk * 100)/(16 * baudrate);
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	2264      	movs	r2, #100	; 0x64
 80019e0:	fb03 f202 	mul.w	r2, r3, r2
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ec:	617b      	str	r3, [r7, #20]
		mantissa_value = usartdiv/100;
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	4a27      	ldr	r2, [pc, #156]	; (8001a90 <Set_BaudRate+0xf8>)
 80019f2:	fba2 2303 	umull	r2, r3, r2, r3
 80019f6:	095b      	lsrs	r3, r3, #5
 80019f8:	613b      	str	r3, [r7, #16]
		tempvariable |= mantissa_value << 4;
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	6a3a      	ldr	r2, [r7, #32]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	623b      	str	r3, [r7, #32]

		fraction_value = (((usartdiv - (mantissa_value * 100)) * 16) + 50)/100;
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	2264      	movs	r2, #100	; 0x64
 8001a08:	fb02 f303 	mul.w	r3, r2, r3
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	3332      	adds	r3, #50	; 0x32
 8001a14:	4a1e      	ldr	r2, [pc, #120]	; (8001a90 <Set_BaudRate+0xf8>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	60fb      	str	r3, [r7, #12]
		tempvariable |= fraction_value;
 8001a1e:	6a3a      	ldr	r2, [r7, #32]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	623b      	str	r3, [r7, #32]
 8001a26:	e024      	b.n	8001a72 <Set_BaudRate+0xda>
	}

	/*Over-sampling by 8*/
	else
	{
		usartdiv = ((periph_clk * 100)/(8 * baudrate));
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	2264      	movs	r2, #100	; 0x64
 8001a2c:	fb03 f202 	mul.w	r2, r3, r2
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a38:	617b      	str	r3, [r7, #20]
		mantissa_value = usartdiv/100;
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	4a14      	ldr	r2, [pc, #80]	; (8001a90 <Set_BaudRate+0xf8>)
 8001a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	613b      	str	r3, [r7, #16]
		tempvariable |= (mantissa_value << 4);
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	6a3a      	ldr	r2, [r7, #32]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	623b      	str	r3, [r7, #32]
		fraction_value = (((usartdiv - (mantissa_value * 100)) * 8) + 50)/100;
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	2264      	movs	r2, #100	; 0x64
 8001a54:	fb02 f303 	mul.w	r3, r2, r3
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	3332      	adds	r3, #50	; 0x32
 8001a60:	4a0b      	ldr	r2, [pc, #44]	; (8001a90 <Set_BaudRate+0xf8>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	60fb      	str	r3, [r7, #12]
		tempvariable |= fraction_value;
 8001a6a:	6a3a      	ldr	r2, [r7, #32]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	623b      	str	r3, [r7, #32]
	}

	UART_Config->UARTx->BRR |= tempvariable;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	6899      	ldr	r1, [r3, #8]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	6a3a      	ldr	r2, [r7, #32]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	609a      	str	r2, [r3, #8]
}
 8001a82:	bf00      	nop
 8001a84:	3728      	adds	r7, #40	; 0x28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40004400 	.word	0x40004400
 8001a90:	51eb851f 	.word	0x51eb851f

08001a94 <UART_Init>:
 *
 * @param	UART_Config_t: This points to the UART_Config_t data structure that holds all of the information for the
 * 			specific UART peripheral.
 */
void UART_Init(UART_Config_t *UART_Config)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	RCC_ClockFrequency_t Clock_Source;

	Enable_UART_Periph(UART_Config->UARTx);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff2f 	bl	8001904 <Enable_UART_Periph>

	/**Configuring UART**/

	/*Select the Word-Length (8 bits/9 bits)*/
	UART_Config->UARTx->CR1 &= ~UART_WORDLEN_9BITS;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ab4:	60da      	str	r2, [r3, #12]
	UART_Config->UARTx->CR1 |= UART_Config->World_Length;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	885b      	ldrh	r3, [r3, #2]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	60da      	str	r2, [r3, #12]

	/*Select over-sampling (8 or 16)*/
	UART_Config->UARTx->CR1 &= ~UART_OVERSAMPLING_8;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ad8:	60da      	str	r2, [r3, #12]
	UART_Config->UARTx->CR1 |= UART_Config->oversampling;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	889b      	ldrh	r3, [r3, #4]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	60da      	str	r2, [r3, #12]

	/*Select transmission direction (Tx, Rx or Tx & Rx)*/
	UART_Config->UARTx->CR1 &= ~UART_MODE_TXRX;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	f022 020c 	bic.w	r2, r2, #12
 8001afc:	60da      	str	r2, [r3, #12]
	UART_Config->UARTx->CR1 |= UART_Config->Mode;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	899b      	ldrh	r3, [r3, #12]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	60da      	str	r2, [r3, #12]

	/*Select parity (odd or even)*/
	UART_Config->UARTx->CR1 &= ~UART_PARITY_ODD;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001b20:	60da      	str	r2, [r3, #12]
	UART_Config->UARTx->CR1 |= UART_Config->Parity;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	88db      	ldrh	r3, [r3, #6]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	60da      	str	r2, [r3, #12]

	/*Select number of stop bits (0.5, 1, 1.5, 2)*/
	UART_Config->UARTx->CR2 &= ~UART_STOPBITS_1_5;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	691a      	ldr	r2, [r3, #16]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001b44:	611a      	str	r2, [r3, #16]
	UART_Config->UARTx->CR2 |= UART_Config->Stop_Bits;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	4619      	mov	r1, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	611a      	str	r2, [r3, #16]

	/*Calculate and set baud-rate*/
	Set_BaudRate(&Clock_Source, UART_Config);
 8001b5a:	f107 0308 	add.w	r3, r7, #8
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff19 	bl	8001998 <Set_BaudRate>

	/*Enable UART*/
	UART_Config->UARTx->CR1 |= UART_CR1_Enable;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b74:	60da      	str	r2, [r3, #12]

}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <main>:

void cs_disable(uint8_t slave_number);
void cs_enable(uint8_t slave_number);

int main()
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af00      	add	r7, sp, #0
	uint8_t bme_init[6] = {0x72, 0x01, 0x74, 0x27, 0x75, 0x80};
 8001b86:	4a62      	ldr	r2, [pc, #392]	; (8001d10 <main+0x190>)
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b90:	6018      	str	r0, [r3, #0]
 8001b92:	3304      	adds	r3, #4
 8001b94:	8019      	strh	r1, [r3, #0]
	uint8_t adxl_init1[2] = {0x31, 0x01};
 8001b96:	f240 1331 	movw	r3, #305	; 0x131
 8001b9a:	823b      	strh	r3, [r7, #16]
	uint8_t adxl_init2[2] = {0x2D, 0x00};
 8001b9c:	232d      	movs	r3, #45	; 0x2d
 8001b9e:	81bb      	strh	r3, [r7, #12]
	uint8_t adxl_init3[2] = {0x2D, 0x08};
 8001ba0:	f640 032d 	movw	r3, #2093	; 0x82d
 8001ba4:	813b      	strh	r3, [r7, #8]
	uint8_t adxl_init4[2] = {0x2C, 0x0A}; //Default is 0x0A for 100Hz output
 8001ba6:	f640 232c 	movw	r3, #2604	; 0xa2c
 8001baa:	80bb      	strh	r3, [r7, #4]

	UART_Config(&Debug, USART2, UART_MODE_TX, 115200);
 8001bac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	4958      	ldr	r1, [pc, #352]	; (8001d14 <main+0x194>)
 8001bb4:	4858      	ldr	r0, [pc, #352]	; (8001d18 <main+0x198>)
 8001bb6:	f7ff fe4c 	bl	8001852 <UART_Config>
	UART_Init(&Debug);
 8001bba:	4857      	ldr	r0, [pc, #348]	; (8001d18 <main+0x198>)
 8001bbc:	f7ff ff6a 	bl	8001a94 <UART_Init>

	SPI1_Example.SPI_Config.cs_gpio = GPIOA;
 8001bc0:	4b56      	ldr	r3, [pc, #344]	; (8001d1c <main+0x19c>)
 8001bc2:	4a57      	ldr	r2, [pc, #348]	; (8001d20 <main+0x1a0>)
 8001bc4:	609a      	str	r2, [r3, #8]
	SPI1_Example.SPI_Config.pin_clk = Pin5;
 8001bc6:	4b55      	ldr	r3, [pc, #340]	; (8001d1c <main+0x19c>)
 8001bc8:	2205      	movs	r2, #5
 8001bca:	715a      	strb	r2, [r3, #5]
	SPI1_Example.SPI_Config.pin_cs = Pin4; //Used for SSM disabled
 8001bcc:	4b53      	ldr	r3, [pc, #332]	; (8001d1c <main+0x19c>)
 8001bce:	2204      	movs	r2, #4
 8001bd0:	711a      	strb	r2, [r3, #4]
	//SPI1_Example.SPI_Config.pin_cs = Pin9; //Used for ADXL345 slave
	SPI1_Example.SPI_Config.pin_miso = Pin6;
 8001bd2:	4b52      	ldr	r3, [pc, #328]	; (8001d1c <main+0x19c>)
 8001bd4:	2206      	movs	r2, #6
 8001bd6:	71da      	strb	r2, [r3, #7]
	SPI1_Example.SPI_Config.pin_mosi = Pin7;
 8001bd8:	4b50      	ldr	r3, [pc, #320]	; (8001d1c <main+0x19c>)
 8001bda:	2207      	movs	r2, #7
 8001bdc:	719a      	strb	r2, [r3, #6]

	SPI1_Example.ssm = SSM_Disable;
 8001bde:	4b4f      	ldr	r3, [pc, #316]	; (8001d1c <main+0x19c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	745a      	strb	r2, [r3, #17]
	SPI1_Example.SPIx = SPI1;
 8001be4:	4b4d      	ldr	r3, [pc, #308]	; (8001d1c <main+0x19c>)
 8001be6:	4a4f      	ldr	r2, [pc, #316]	; (8001d24 <main+0x1a4>)
 8001be8:	601a      	str	r2, [r3, #0]
	SPI1_Example.SPI_Config.baudrate_ctrl = DIV32;
 8001bea:	4b4c      	ldr	r3, [pc, #304]	; (8001d1c <main+0x19c>)
 8001bec:	2204      	movs	r2, #4
 8001bee:	731a      	strb	r2, [r3, #12]
	SPI1_Example.SPI_Config.cpha = Falling_Edge;
 8001bf0:	4b4a      	ldr	r3, [pc, #296]	; (8001d1c <main+0x19c>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	739a      	strb	r2, [r3, #14]
	SPI1_Example.SPI_Config.cpol = Even_Polarity;
 8001bf6:	4b49      	ldr	r3, [pc, #292]	; (8001d1c <main+0x19c>)
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	735a      	strb	r2, [r3, #13]
	SPI1_Example.SPI_Config.data_format = MSB_First;
 8001bfc:	4b47      	ldr	r3, [pc, #284]	; (8001d1c <main+0x19c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	73da      	strb	r2, [r3, #15]
	SPI1_Example.data_frame = Data_8_Bits;
 8001c02:	4b46      	ldr	r3, [pc, #280]	; (8001d1c <main+0x19c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	741a      	strb	r2, [r3, #16]

	SPI_Init(&SPI1_Example);
 8001c08:	4844      	ldr	r0, [pc, #272]	; (8001d1c <main+0x19c>)
 8001c0a:	f7ff fc0f 	bl	800142c <SPI_Init>

	//cs_enable(0);
	SPI_Transmit(&SPI1_Example, adxl_init2, 2, No_Restart);
 8001c0e:	f107 010c 	add.w	r1, r7, #12
 8001c12:	2301      	movs	r3, #1
 8001c14:	2202      	movs	r2, #2
 8001c16:	4841      	ldr	r0, [pc, #260]	; (8001d1c <main+0x19c>)
 8001c18:	f7ff fce0 	bl	80015dc <SPI_Transmit>
	//cs_disable(0);

	//cs_enable(0);
	SPI_Transmit(&SPI1_Example, adxl_init1, 2, No_Restart);
 8001c1c:	f107 0110 	add.w	r1, r7, #16
 8001c20:	2301      	movs	r3, #1
 8001c22:	2202      	movs	r2, #2
 8001c24:	483d      	ldr	r0, [pc, #244]	; (8001d1c <main+0x19c>)
 8001c26:	f7ff fcd9 	bl	80015dc <SPI_Transmit>
	//cs_disable(0);

	//cs_enable(0);
	SPI_Transmit(&SPI1_Example, adxl_init4, 2, No_Restart);
 8001c2a:	1d39      	adds	r1, r7, #4
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	2202      	movs	r2, #2
 8001c30:	483a      	ldr	r0, [pc, #232]	; (8001d1c <main+0x19c>)
 8001c32:	f7ff fcd3 	bl	80015dc <SPI_Transmit>
	//cs_disable(0);

	//cs_enable(0);
	SPI_Transmit(&SPI1_Example, adxl_init3, 2, No_Restart);
 8001c36:	f107 0108 	add.w	r1, r7, #8
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	4837      	ldr	r0, [pc, #220]	; (8001d1c <main+0x19c>)
 8001c40:	f7ff fccc 	bl	80015dc <SPI_Transmit>
	//cs_enable(0);
	//SPI_Transmit(&SPI1_Example, bme_init, 6, Restart);
	//cs_disable(0);


	int work_done = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]

	while(1)
	{
		//cs_enable(0);
		SPI_Transmit(&SPI1_Example, adxl_address, 1, Restart);
 8001c48:	2300      	movs	r3, #0
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	4936      	ldr	r1, [pc, #216]	; (8001d28 <main+0x1a8>)
 8001c4e:	4833      	ldr	r0, [pc, #204]	; (8001d1c <main+0x19c>)
 8001c50:	f7ff fcc4 	bl	80015dc <SPI_Transmit>
		SPI_Receive(&SPI1_Example, adxl_data_rec, 6);
 8001c54:	2206      	movs	r2, #6
 8001c56:	4935      	ldr	r1, [pc, #212]	; (8001d2c <main+0x1ac>)
 8001c58:	4830      	ldr	r0, [pc, #192]	; (8001d1c <main+0x19c>)
 8001c5a:	f7ff fd20 	bl	800169e <SPI_Receive>
		//cs_disable(0);


		x = ((adxl_data_rec[2] << 8) | adxl_data_rec[1]);
 8001c5e:	4b33      	ldr	r3, [pc, #204]	; (8001d2c <main+0x1ac>)
 8001c60:	789b      	ldrb	r3, [r3, #2]
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	b21a      	sxth	r2, r3
 8001c66:	4b31      	ldr	r3, [pc, #196]	; (8001d2c <main+0x1ac>)
 8001c68:	785b      	ldrb	r3, [r3, #1]
 8001c6a:	b21b      	sxth	r3, r3
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	b21a      	sxth	r2, r3
 8001c70:	4b2f      	ldr	r3, [pc, #188]	; (8001d30 <main+0x1b0>)
 8001c72:	801a      	strh	r2, [r3, #0]
		y = ((adxl_data_rec[4] << 8) | adxl_data_rec[3]);
 8001c74:	4b2d      	ldr	r3, [pc, #180]	; (8001d2c <main+0x1ac>)
 8001c76:	791b      	ldrb	r3, [r3, #4]
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <main+0x1ac>)
 8001c7e:	78db      	ldrb	r3, [r3, #3]
 8001c80:	b21b      	sxth	r3, r3
 8001c82:	4313      	orrs	r3, r2
 8001c84:	b21a      	sxth	r2, r3
 8001c86:	4b2b      	ldr	r3, [pc, #172]	; (8001d34 <main+0x1b4>)
 8001c88:	801a      	strh	r2, [r3, #0]
		z = ((adxl_data_rec[6] << 8) | adxl_data_rec[5]);
 8001c8a:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <main+0x1ac>)
 8001c8c:	799b      	ldrb	r3, [r3, #6]
 8001c8e:	021b      	lsls	r3, r3, #8
 8001c90:	b21a      	sxth	r2, r3
 8001c92:	4b26      	ldr	r3, [pc, #152]	; (8001d2c <main+0x1ac>)
 8001c94:	795b      	ldrb	r3, [r3, #5]
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	b21a      	sxth	r2, r3
 8001c9c:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <main+0x1b8>)
 8001c9e:	801a      	strh	r2, [r3, #0]

		//x = ((adxl_data_rec[1] << 8) | adxl_data_rec[0]);
		//y = ((adxl_data_rec[3] << 8) | adxl_data_rec[2]);
		//z = ((adxl_data_rec[5] << 8) | adxl_data_rec[4]);

		xg = (x * 0.0078);
 8001ca0:	4b23      	ldr	r3, [pc, #140]	; (8001d30 <main+0x1b0>)
 8001ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fd12 	bl	80006d0 <__aeabi_i2d>
 8001cac:	a316      	add	r3, pc, #88	; (adr r3, 8001d08 <main+0x188>)
 8001cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb2:	f7fe fa91 	bl	80001d8 <__aeabi_dmul>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4920      	ldr	r1, [pc, #128]	; (8001d3c <main+0x1bc>)
 8001cbc:	e9c1 2300 	strd	r2, r3, [r1]
		yg = (y * 0.0078);
 8001cc0:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <main+0x1b4>)
 8001cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fd02 	bl	80006d0 <__aeabi_i2d>
 8001ccc:	a30e      	add	r3, pc, #56	; (adr r3, 8001d08 <main+0x188>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	f7fe fa81 	bl	80001d8 <__aeabi_dmul>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4919      	ldr	r1, [pc, #100]	; (8001d40 <main+0x1c0>)
 8001cdc:	e9c1 2300 	strd	r2, r3, [r1]
		zg = (z * 0.0078);
 8001ce0:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <main+0x1b8>)
 8001ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fcf2 	bl	80006d0 <__aeabi_i2d>
 8001cec:	a306      	add	r3, pc, #24	; (adr r3, 8001d08 <main+0x188>)
 8001cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf2:	f7fe fa71 	bl	80001d8 <__aeabi_dmul>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4912      	ldr	r1, [pc, #72]	; (8001d44 <main+0x1c4>)
 8001cfc:	e9c1 2300 	strd	r2, r3, [r1]
		SPI_Transmit(&SPI1_Example, adxl_address, 1, Restart);
 8001d00:	e7a2      	b.n	8001c48 <main+0xc8>
 8001d02:	bf00      	nop
 8001d04:	f3af 8000 	nop.w
 8001d08:	8e8a71de 	.word	0x8e8a71de
 8001d0c:	3f7ff2e4 	.word	0x3f7ff2e4
 8001d10:	08001e10 	.word	0x08001e10
 8001d14:	40004400 	.word	0x40004400
 8001d18:	2000008c 	.word	0x2000008c
 8001d1c:	20000070 	.word	0x20000070
 8001d20:	40020000 	.word	0x40020000
 8001d24:	40013000 	.word	0x40013000
 8001d28:	20000020 	.word	0x20000020
 8001d2c:	20000068 	.word	0x20000068
 8001d30:	20000044 	.word	0x20000044
 8001d34:	20000046 	.word	0x20000046
 8001d38:	20000048 	.word	0x20000048
 8001d3c:	20000050 	.word	0x20000050
 8001d40:	20000058 	.word	0x20000058
 8001d44:	20000060 	.word	0x20000060

08001d48 <SPI1_IRQHandler>:
	}
}

void SPI1_IRQHandler()
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	SPI_IRQ_Handler(&SPI1_Example);
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <SPI1_IRQHandler+0x10>)
 8001d4e:	f7ff fd61 	bl	8001814 <SPI_IRQ_Handler>
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000070 	.word	0x20000070

08001d5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d5c:	480d      	ldr	r0, [pc, #52]	; (8001d94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d5e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d60:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d64:	480c      	ldr	r0, [pc, #48]	; (8001d98 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d66:	490d      	ldr	r1, [pc, #52]	; (8001d9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d68:	4a0d      	ldr	r2, [pc, #52]	; (8001da0 <LoopForever+0xe>)
  movs r3, #0
 8001d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d6c:	e002      	b.n	8001d74 <LoopCopyDataInit>

08001d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d72:	3304      	adds	r3, #4

08001d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d78:	d3f9      	bcc.n	8001d6e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d7c:	4c0a      	ldr	r4, [pc, #40]	; (8001da8 <LoopForever+0x16>)
  movs r3, #0
 8001d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d80:	e001      	b.n	8001d86 <LoopFillZerobss>

08001d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d84:	3204      	adds	r2, #4

08001d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d88:	d3fb      	bcc.n	8001d82 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d8a:	f000 f811 	bl	8001db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d8e:	f7ff fef7 	bl	8001b80 <main>

08001d92 <LoopForever>:

LoopForever:
  b LoopForever
 8001d92:	e7fe      	b.n	8001d92 <LoopForever>
  ldr   r0, =_estack
 8001d94:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d9c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001da0:	08001e20 	.word	0x08001e20
  ldr r2, =_sbss
 8001da4:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001da8:	200000a0 	.word	0x200000a0

08001dac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dac:	e7fe      	b.n	8001dac <ADC_IRQHandler>
	...

08001db0 <__libc_init_array>:
 8001db0:	b570      	push	{r4, r5, r6, lr}
 8001db2:	4d0d      	ldr	r5, [pc, #52]	; (8001de8 <__libc_init_array+0x38>)
 8001db4:	4c0d      	ldr	r4, [pc, #52]	; (8001dec <__libc_init_array+0x3c>)
 8001db6:	1b64      	subs	r4, r4, r5
 8001db8:	10a4      	asrs	r4, r4, #2
 8001dba:	2600      	movs	r6, #0
 8001dbc:	42a6      	cmp	r6, r4
 8001dbe:	d109      	bne.n	8001dd4 <__libc_init_array+0x24>
 8001dc0:	4d0b      	ldr	r5, [pc, #44]	; (8001df0 <__libc_init_array+0x40>)
 8001dc2:	4c0c      	ldr	r4, [pc, #48]	; (8001df4 <__libc_init_array+0x44>)
 8001dc4:	f000 f818 	bl	8001df8 <_init>
 8001dc8:	1b64      	subs	r4, r4, r5
 8001dca:	10a4      	asrs	r4, r4, #2
 8001dcc:	2600      	movs	r6, #0
 8001dce:	42a6      	cmp	r6, r4
 8001dd0:	d105      	bne.n	8001dde <__libc_init_array+0x2e>
 8001dd2:	bd70      	pop	{r4, r5, r6, pc}
 8001dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dd8:	4798      	blx	r3
 8001dda:	3601      	adds	r6, #1
 8001ddc:	e7ee      	b.n	8001dbc <__libc_init_array+0xc>
 8001dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8001de2:	4798      	blx	r3
 8001de4:	3601      	adds	r6, #1
 8001de6:	e7f2      	b.n	8001dce <__libc_init_array+0x1e>
 8001de8:	08001e18 	.word	0x08001e18
 8001dec:	08001e18 	.word	0x08001e18
 8001df0:	08001e18 	.word	0x08001e18
 8001df4:	08001e1c 	.word	0x08001e1c

08001df8 <_init>:
 8001df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dfa:	bf00      	nop
 8001dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dfe:	bc08      	pop	{r3}
 8001e00:	469e      	mov	lr, r3
 8001e02:	4770      	bx	lr

08001e04 <_fini>:
 8001e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e06:	bf00      	nop
 8001e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e0a:	bc08      	pop	{r3}
 8001e0c:	469e      	mov	lr, r3
 8001e0e:	4770      	bx	lr
